<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja">
    <title>Happy developing - book</title>
    <subtitle>楽しい開発ライフ</subtitle>
    <link href="https://blog.ymgyt.io/tags/book/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://blog.ymgyt.io/entry/"/>
    <author><name>ymgyt</name></author>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-09-28T00:00:00+00:00</updated>
    <id>https://blog.ymgyt.io/tags/book/atom.xml</id>
    <entry xml:lang="ja">
        <title>⚙️ Ironies of Automationを読んだ感想</title>
        <published>2024-09-28T00:00:00+00:00</published>
        <updated>2024-09-28T00:00:00+00:00</updated>
        <author>
          <name>ymgyt</name>
        </author>
        <link rel="alternate" href="https://blog.ymgyt.io/entry/ironies-of-automation/" type="text/html"/>
        <id>https://blog.ymgyt.io/entry/ironies-of-automation/</id>
        
        <summary type="html">自動化するほどつらいところだけ人に残されて逆に大変になる</summary>
        
    </entry>
    <entry xml:lang="ja">
        <title>📗 なぜ依存を注入するのか DIの原理・原則とパターンを読んだ感想</title>
        <published>2024-09-14T00:00:00+00:00</published>
        <updated>2024-09-14T00:00:00+00:00</updated>
        <author>
          <name>ymgyt</name>
        </author>
        <link rel="alternate" href="https://blog.ymgyt.io/entry/dependency-injection/" type="text/html"/>
        <id>https://blog.ymgyt.io/entry/dependency-injection/</id>
        
        <summary type="html">DIという観点からコードの設計を考える本</summary>
        
    </entry>
    <entry xml:lang="ja">
        <title>📗 Write Powerful Rust Macrosを読んだ感想</title>
        <published>2024-07-15T00:00:00+00:00</published>
        <updated>2024-07-15T00:00:00+00:00</updated>
        <author>
          <name>ymgyt</name>
        </author>
        <link rel="alternate" href="https://blog.ymgyt.io/entry/write-powerful-rust-macros/" type="text/html"/>
        <id>https://blog.ymgyt.io/entry/write-powerful-rust-macros/</id>
        
        <summary type="html">一冊まるごとMacroについての本</summary>
        
    </entry>
    <entry xml:lang="ja">
        <title>📗 OSSライセンスを正しく理解するための本を読んだ感想</title>
        <published>2024-05-17T00:00:00+00:00</published>
        <updated>2024-05-17T00:00:00+00:00</updated>
        <author>
          <name>ymgyt</name>
        </author>
        <link rel="alternate" href="https://blog.ymgyt.io/entry/understand-the-open-source-software-license-correctly/" type="text/html"/>
        <id>https://blog.ymgyt.io/entry/understand-the-open-source-software-license-correctly/</id>
        
        <summary type="html">OSSライセンスと著作権の関係</summary>
        
    </entry>
    <entry xml:lang="ja">
        <title>📗 Learning OpenTelemetryを読んだ感想</title>
        <published>2024-03-29T00:00:00+00:00</published>
        <updated>2024-03-29T00:00:00+00:00</updated>
        <author>
          <name>ymgyt</name>
        </author>
        <link rel="alternate" href="https://blog.ymgyt.io/entry/learning-opentelemetry/" type="text/html"/>
        <id>https://blog.ymgyt.io/entry/learning-opentelemetry/</id>
        
        <summary type="html">Observability is a commitment</summary>
        
    </entry>
    <entry xml:lang="ja">
        <title>📕 Asynchronous Programming in Rustを読んだ感想</title>
        <published>2024-03-14T00:00:00+00:00</published>
        <updated>2024-03-14T00:00:00+00:00</updated>
        <author>
          <name>ymgyt</name>
        </author>
        <link rel="alternate" href="https://blog.ymgyt.io/entry/asynchronous-programming-in-rust/" type="text/html"/>
        <id>https://blog.ymgyt.io/entry/asynchronous-programming-in-rust/</id>
        
        <summary type="html">CF Samson先生のFuture解説がついに本になった</summary>
        
    </entry>
    <entry xml:lang="ja">
        <title>📕 詳解 Rustアトミック操作とロックを読んだ感想</title>
        <published>2023-11-28T00:00:00+00:00</published>
        <updated>2023-11-28T00:00:00+00:00</updated>
        <author>
          <name>ymgyt</name>
        </author>
        <link rel="alternate" href="https://blog.ymgyt.io/entry/rust-atomics-and-locks-ja/" type="text/html"/>
        <id>https://blog.ymgyt.io/entry/rust-atomics-and-locks-ja/</id>
        
        <summary type="html">std::sync::atomic::{Ordering,fence}がわかる本</summary>
        
    </entry>
    <entry xml:lang="ja">
        <title>📙 The Purely Functional Software Deployment Modelを読んだ感想</title>
        <published>2023-11-06T00:00:00+00:00</published>
        <updated>2023-11-06T00:00:00+00:00</updated>
        <author>
          <name>ymgyt</name>
        </author>
        <link rel="alternate" href="https://blog.ymgyt.io/entry/the-purely-functional-software-deployment/" type="text/html"/>
        <id>https://blog.ymgyt.io/entry/the-purely-functional-software-deployment/</id>
        
        <summary type="html">Dolstra先生のNixの論文 The Purely Functional Software Deployment Modelを読んだ感想</summary>
        
    </entry>
    <entry xml:lang="ja">
        <title>📗 Terraform: Up and Running, 3rd Editionを読んだ感想</title>
        <published>2023-10-25T00:00:00+00:00</published>
        <updated>2023-10-25T00:00:00+00:00</updated>
        <author>
          <name>ymgyt</name>
        </author>
        <link rel="alternate" href="https://blog.ymgyt.io/entry/terraform-up-and-running/" type="text/html"/>
        <id>https://blog.ymgyt.io/entry/terraform-up-and-running/</id>
        
        <summary type="html">Terraform: Up and Runningを読んだ感想について</summary>
        
    </entry>
    <entry xml:lang="ja">
        <title>📗 Linux Service Management Made Easy with systemdを読んだ感想</title>
        <published>2023-10-15T00:00:00+00:00</published>
        <updated>2023-10-15T00:00:00+00:00</updated>
        <author>
          <name>ymgyt</name>
        </author>
        <link rel="alternate" href="https://blog.ymgyt.io/entry/linux-service-management-made-easy-with-systemd/" type="text/html"/>
        <id>https://blog.ymgyt.io/entry/linux-service-management-made-easy-with-systemd/</id>
        
        <summary type="html">Linux Service Management Made Easy with systemd本の概要だったり良かったところについて</summary>
        
    </entry>
    <entry xml:lang="ja">
        <title>🔧 Kustomizeで利用されるRFC6902 JSON Patchを読んでみる</title>
        <published>2023-07-14T00:00:00+00:00</published>
        <updated>2023-07-14T00:00:00+00:00</updated>
        <author>
          <name>ymgyt</name>
        </author>
        <link rel="alternate" href="https://blog.ymgyt.io/entry/json-patch-in-kustomize/" type="text/html"/>
        <id>https://blog.ymgyt.io/entry/json-patch-in-kustomize/</id>
        
        <summary type="html">Kustomizeのpatchで用いられるJSON PatchについてRFCを読んで理解する</summary>
        
    </entry>
    <entry xml:lang="ja">
        <title>📕 プログラマーのためのCPU入門を読んだ感想</title>
        <published>2023-03-15T00:00:00+00:00</published>
        <updated>2023-03-15T00:00:00+00:00</updated>
        <author>
          <name>ymgyt</name>
        </author>
        <link rel="alternate" href="https://blog.ymgyt.io/entry/what-a-programmer-should-know-about-the-cpu/" type="text/html"/>
        <id>https://blog.ymgyt.io/entry/what-a-programmer-should-know-about-the-cpu/</id>
        
        <summary type="html">プログラマーのためのCPU入門がとてもわかりやすかったです</summary>
        
    </entry>
    <entry xml:lang="ja">
        <title>📕 ハロー&quot;Hello, World&quot; OSと標準ライブラリのシゴトとしくみを読んだ感想</title>
        <published>2023-02-21T00:00:00+00:00</published>
        <updated>2023-02-21T00:00:00+00:00</updated>
        <author>
          <name>ymgyt</name>
        </author>
        <link rel="alternate" href="https://blog.ymgyt.io/entry/helloworld-book/" type="text/html"/>
        <id>https://blog.ymgyt.io/entry/helloworld-book/</id>
        
        <summary type="html">ハロー&quot;Hello, World&quot;OSと標準ライブラリのシゴトとしくみを読んだ感想について</summary>
        
    </entry>
    <entry xml:lang="ja">
        <title>📕 Rust Atomics and Locksを読んだ感想</title>
        <published>2022-12-31T00:00:00+00:00</published>
        <updated>2022-12-31T00:00:00+00:00</updated>
        <author>
          <name>ymgyt</name>
        </author>
        <link rel="alternate" href="https://blog.ymgyt.io/entry/rust_atomics_and_locks/" type="text/html"/>
        <id>https://blog.ymgyt.io/entry/rust_atomics_and_locks/</id>
        
        <summary type="html">Rust Atomics and Locksが非常によかったので感想を書いた</summary>
        
    </entry>
    <entry xml:lang="ja">
        <title>📗 もっとCPUの気持ちが知りたいですか？を読んだ感想</title>
        <published>2022-11-27T00:00:00+00:00</published>
        <updated>2022-11-27T00:00:00+00:00</updated>
        <author>
          <name>ymgyt</name>
        </author>
        <link rel="alternate" href="https://blog.ymgyt.io/entry/cpu_no_kimochi/" type="text/html"/>
        <id>https://blog.ymgyt.io/entry/cpu_no_kimochi/</id>
        
        <summary type="html">CPUの気持ち本を読んだ感想</summary>
        
    </entry>
    <entry xml:lang="ja">
        <title>🕸  GraphQL Specificationを読んでみる</title>
        <published>2022-11-04T00:00:00+00:00</published>
        <updated>2022-11-04T00:00:00+00:00</updated>
        <author>
          <name>ymgyt</name>
        </author>
        <link rel="alternate" href="https://blog.ymgyt.io/entry/graphql-specification-2021/" type="text/html"/>
        <id>https://blog.ymgyt.io/entry/graphql-specification-2021/</id>
        
        <summary type="html">GraphQLの仕様を読んでみた感想について</summary>
        
    </entry>
    <entry xml:lang="ja">
        <title>📗 RabbitMQ Essentials 2nd Editionを読んだ感想</title>
        <published>2022-08-17T00:00:00+00:00</published>
        <updated>2022-08-17T00:00:00+00:00</updated>
        <author>
          <name>ymgyt</name>
        </author>
        <link rel="alternate" href="https://blog.ymgyt.io/entry/rabbitmq_essentials_2nd_edition/" type="text/html"/>
        <id>https://blog.ymgyt.io/entry/rabbitmq_essentials_2nd_edition/</id>
        
        <content type="html">&lt;h2 id=&quot;du-ndaben-green-book&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#du-ndaben-green-book&quot; aria-label=&quot;Anchor link for: du-ndaben-green-book&quot;&gt;読んだ本📗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;div class=&quot;fig-images-row&quot;&gt;
    
    &lt;img 
      src=&quot;images&amp;#x2F;rabbitmq_essentials_book.png&quot; 
      alt=&quot;&quot;, 
       
      
    &gt;
    
  &lt;&#x2F;div&gt;
  &lt;figcaption&gt;By Lovisa Johansson , David Dossot&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.packtpub.com&#x2F;product&#x2F;rabbitmq-essentials-second-edition&#x2F;9781789131666&quot;&gt;RabbitMQ Essentials - Second Edition&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;2020出版でRabbitMQ関連の本で比較的新しめだったのと、Taxi ApplicationにRabbitMQを組み込んでいくという形がおもしろそうだったので読んでみました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1-a-rabbit-springs-to-life&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-a-rabbit-springs-to-life&quot; aria-label=&quot;Anchor link for: 1-a-rabbit-springs-to-life&quot;&gt;1 A Rabbit Springs to Life&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;概要やインストールについて。&lt;br &#x2F;&gt;
RabbitMQ&#x2F;AMQP 0-9-1のコンセプトについて紹介されています。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-creating-a-taxi-application&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-creating-a-taxi-application&quot; aria-label=&quot;Anchor link for: 2-creating-a-taxi-application&quot;&gt;2 Creating a Taxi Application&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Complete Car(CC)というタクシー予約システムを作りながらRabbitMQの使い方を学んでいきます。&lt;br &#x2F;&gt;
最初はDirect exchangeを利用しつつ、機能拡張という形でTopic exchangeを導入します。
その中で、Connection&#x2F;Channelの説明や、基本的なPublish&#x2F;Consumer APIの説明があります。&lt;br &#x2F;&gt;
RabbitMQ Serverのrestartをまたいでmessageを永続化させるには、queueのdurableとmessageのpersistentの両方が必要になります。&lt;br &#x2F;&gt;
messageの信頼性とパフォーマンスのトレードオフを見極めて利用する必要があるので、導入に際してはシステムに要求される信頼性を定義することが重要そうだなと考えました。&lt;br &#x2F;&gt;
サンプルコードはRubyでした。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-sending-messages-to-multiple-taxi-drivers&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-sending-messages-to-multiple-taxi-drivers&quot; aria-label=&quot;Anchor link for: 3-sending-messages-to-multiple-taxi-drivers&quot;&gt;3 Sending Messages to Multiple Taxi Drivers&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Consumerに一度に送られるmessage数を制御するためのprefetch countとacknowledgeについて説明されます。messageの性質にもよりますが、prefetch countを1にしてmanual acknowledgeにしておくのが一番安全そう。
prefetch countはdefault値にたよらず明示的に指定しておくことも大事だなと思いました。&lt;&#x2F;p&gt;
&lt;p&gt;また、全taxiにback officeからメッセージを送りたいという機能要望に答えるためにFanout exchangeがCCに導入されました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4-tweaking-message-delivery&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#4-tweaking-message-delivery&quot; aria-label=&quot;Anchor link for: 4-tweaking-message-delivery&quot;&gt;4 Tweaking Message Delivery&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;taxiのdriverにmessageを送るfanout exchangeをchapter3で導入した。&lt;br &#x2F;&gt;
ところが運用してみるとmessageをまったくconsumeしないdriverが存在しており、queueにmessageが溜まり続けてしまう。そこで一定期間経過後にmessageを削除し、その際messageが重要であればdriverにメール送る機能を実装したい。というシナリオでtime to live(TTL)やDead letter Queueについて学んでいきます。&lt;&#x2F;p&gt;
&lt;p&gt;messageのexpirationについては以下の3つの選択肢がある。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Standard AMQP message expiration property&lt;&#x2F;li&gt;
&lt;li&gt;QueueごとにmessageのTTLを定義できるRabbitMQ extension&lt;&#x2F;li&gt;
&lt;li&gt;Queue自体のTTLを定義できるRabbitMQ extension&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;1についてはAMQP標準ということで魅力的だが、落とし穴があり、messageがqueueの先頭にきてはじめてTTLがチェックされるという仕様でTTLが過ぎていてもqueue自体には残ってしまう。&lt;br &#x2F;&gt;
また、queue自体は削除したくないので3も除外。ということで選択肢2を採用することとなる。
TTLが過ぎたmessageはdead letterと判断される。RabbitMQはこうしたdead letterをDLXというexchangeにroutingする機能をもつ。&lt;&#x2F;p&gt;
&lt;p&gt;QueueにTTLやDLXを設定するには、queue declare時のargumentsに&lt;code&gt;x-message-ttl&lt;&#x2F;code&gt;や&lt;code&gt;x-dead-letter-{exchange,routing-key}&lt;&#x2F;code&gt;を指定するのですが、既存のqueueに対して宣言してしまうとargumentsが一致せずexceptionが発生してしまいます。&lt;br &#x2F;&gt;
そこで、RabbitMQにはpolicyという仕組みがあり、policyを通して既存のqueueやexchangeに変更を適用できます。&lt;&#x2F;p&gt;
&lt;p&gt;PolicyはAMQPの仕様ではないのでclientにAPIがありません。(あるlibもあるかもしれませんが)&lt;br &#x2F;&gt;
そこで、rabbitmqctlという専用のcliを利用します。&lt;br &#x2F;&gt;
dockerでRabbitMQをたちあげている場合は&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;docker&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; exec rabbitmq-rabbitmq-1&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;it&lt;&#x2F;span&gt; &#x2F;bin&#x2F;bash&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;rabbitmqctl&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; set_policy&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;p&lt;&#x2F;span&gt; &#x2F; Q_TTL_DLX &lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;.*&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;{&amp;quot;message-ttl&amp;quot;: 1000, &amp;quot;dead-letter-exchange&amp;quot;: &amp;quot;dlx&amp;quot;}&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;apply-to&lt;&#x2F;span&gt; queues&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;のようにします。&lt;br &#x2F;&gt;
&lt;code&gt;-p&lt;&#x2F;code&gt;はvirtual hostの指定(なぜp?), &lt;code&gt;Q_TTL_DLX&lt;&#x2F;code&gt;はpolicyの名前。&lt;code&gt;&#x27;.*&#x27;&lt;&#x2F;code&gt;は適用するリソースの正規表現。jsonはpolicyのbody, &lt;code&gt;--apply-to&lt;&#x2F;code&gt;で適用対象をqueueかexchangeか指定といった感じです。&lt;&#x2F;p&gt;
&lt;p&gt;続いての機能拡張は、backofficeからtaxi driverにメッセージを送る際に、driver用のqueueがセットアップされていなければemailを送るようにしたいというものです。ここで利用できるのが、publish時の&lt;code&gt;mandatory&lt;&#x2F;code&gt; flagです。これはexchangeに送られたmessageがどのqueueにも送られなかった場合にpublisherにmessageを送り返す機能を有効にします。&lt;br &#x2F;&gt;
lapinの&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;amqp-rs&#x2F;lapin&#x2F;blob&#x2F;lapin-1.x&#x2F;examples&#x2F;publisher_confirms.rs&quot;&gt;publisher_confirms example&lt;&#x2F;a&gt;で実際の利用例がみれます。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;5-message-routing&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#5-message-routing&quot; aria-label=&quot;Anchor link for: 5-message-routing&quot;&gt;5 Message Routing&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;ConsumerからPublisherにresponseを返すRPCを実装します。やり方はRabbitMQ TutorialsのRPCと同じで、messageのbasic propertiesにあるreply-toにresponse用のqueueを指定するだけです。request-response毎にqueueを生成するか事前に作成しておくかの方法があります。&lt;&#x2F;p&gt;
&lt;p&gt;また、Single Text-Oriented Message Protocol(STOMP)用のpluginを利用して、browserからRabbitMQ Serverにwebsocketで接続してqueueをsubscribeする例も紹介されています。&lt;&#x2F;p&gt;
&lt;p&gt;最後にheaders exchangeを導入します。topic exchangeではユースケースに対応できない場合にはheaders exchangeを利用する感じなのでしょうか。紹介されている事例は新しくqueueをたててbindingすれば対応できるように思えたのでいまいち使い所がわかっていません。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;6-taking-rabbitmq-to-production&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#6-taking-rabbitmq-to-production&quot; aria-label=&quot;Anchor link for: 6-taking-rabbitmq-to-production&quot;&gt;6 Taking RabbitMQ to Production&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;今まではRabbitMQをsingle nodeで動かしていましたがこの章ではclusterを導入します。RabbitMQはErlangで実装されているらしく、clusterもErlang clustering featureを利用して実装されているみたいです。&lt;&#x2F;p&gt;
&lt;p&gt;Client libraryの実装によるかとは思うのですがcluster化した際にclient側でclusterを構成するnodeを把握してそれぞれの接続情報を保持しておく必要がありそうでした。Rustの実装であるlapinでは複数の接続先を渡せるようになっていないように見えるので、どう対応するかが課題です。(deadpool_lapinでConnection生成処理が隠蔽されているので、自分でurlをrotateするとかもできないので困りました)&lt;&#x2F;p&gt;
&lt;p&gt;RabbitMQのclusterではexchangeやqueueはnode間でsyncされるが、queueのmessageに関してはいくつか選択肢があるようです。&lt;br &#x2F;&gt;
まず、Mirroring queuesという選択肢があります。これはmaster, replica構成でmessageを冗長化する方式のようです。&lt;&#x2F;p&gt;
&lt;p&gt;次に、quorum queuesという方式があります。これもmaster replicaベースですが、queueの内容についてleaderとreplication間で合意をとることで信頼性を高めているようです。過半数のnode間でqueueの内容がsyncできたらclientにconfirmを返すことで実現されています。&lt;&#x2F;p&gt;
&lt;p&gt;最後にLazy queuesが紹介されます。
この機能が有効かされたqueueではmessageはdistに保存され、queueにmessageが大量に溜まる場合でもRAMの使用量が抑えられるみたいです。durableを有効にするのと違ってそもそもメモリにmessageを保持しなくなる点が特徴という理解でよいのでしょうか。&lt;&#x2F;p&gt;
&lt;p&gt;Clusterに続いてはlogのaggregationを実現するためのfederationについても説明がありました。RabbitMQをfluentdのagentのように位置付けることもでき柔軟性が高いなと思いました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;7-best-practices-and-broker-monitoring&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#7-best-practices-and-broker-monitoring&quot; aria-label=&quot;Anchor link for: 7-best-practices-and-broker-monitoring&quot;&gt;7 Best Practices and Broker Monitoring&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;RabbitMQを運用していくにあたってのBest Practicesについての紹介です。&lt;br &#x2F;&gt;
まずは、messageを失わないためのBest practicesについて。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;最低3台以上でclusterを組む&lt;&#x2F;li&gt;
&lt;li&gt;quorum queueを使う&lt;&#x2F;li&gt;
&lt;li&gt;queueをdurableにしてmessage publish時にpersistent delivery modeを有効にする&lt;&#x2F;li&gt;
&lt;li&gt;transient messageを利用してもLazy queuesの場合にはperformance上のtrade-offが発生する。また、queueがdurableであってもmessageが失われる可能性があることを理解しておく&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;また、当然ではありますがdead letter exchangeを利用することも挙げられています。&lt;br &#x2F;&gt;
messageのTTLやqueueのmax length, nack等でmessageが処理されないケースがあるのでエラーハンドリングもプログラム的につくっておきましょうと言われています。&lt;&#x2F;p&gt;
&lt;p&gt;performance的な問題がない限りはpublisher&#x2F;consumerともにconfirmも有効にすることをまずは検討したほうがよさそうです。&lt;&#x2F;p&gt;
&lt;p&gt;Messageのhandlingに関しては以下の点が挙げられています。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;message sizeは大き過ぎても小さ過ぎても問題
&lt;ul&gt;
&lt;li&gt;小さすぎるiterableなdataはchunk化してみる&lt;&#x2F;li&gt;
&lt;li&gt;大きすぎる場合は別のcomponentにoffloadできるか試みる&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;consumerの処理時間に応じてprefetching valueを調整する&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;queueとbrokersをcleanに保とうという点について指摘されています。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;queueにはTTL(&lt;code&gt;x-message-ttl&lt;&#x2F;code&gt;)を設定する&lt;&#x2F;li&gt;
&lt;li&gt;queueにはmax-lengthを指定する&lt;&#x2F;li&gt;
&lt;li&gt;使われていないqueueを削除する
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x-expires&lt;&#x2F;code&gt;で利用されなくなってから削除されるまでの期間を指定しておく&lt;&#x2F;li&gt;
&lt;li&gt;queueのauto-delete propertyを有効にする&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;その他、messageのrouting keyに応じてqueueを分散させるためのpluginが紹介されています。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;monitoring&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#monitoring&quot; aria-label=&quot;Anchor link for: monitoring&quot;&gt;Monitoring&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;現在のRabbitMQ serverの情報を取得する方法としてはrabbitmqctlとREST APIの二つの手段がある。監視に有用なmetricsが紹介されています。&lt;br &#x2F;&gt;
node&#x2F;clusterの状態からqueueごとの処理状況、file descriptorやsocketの利用状況もAPIで取得できるのは助かりそうです。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;matome&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#matome&quot; aria-label=&quot;Anchor link for: matome&quot;&gt;まとめ&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;本書を読んだ感想を簡単に書いていきました。&lt;br &#x2F;&gt;
RabbitMQの各機能について具体例をふまえて紹介されており概要を把握するのに適していると思いました。&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.manning.com&#x2F;books&#x2F;rabbitmq-in-depth&quot;&gt;RabbitMQ in Depth&lt;&#x2F;a&gt;という本を見つけたので次はこちらを読んでみようかなと思ってます。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="ja">
        <title>📕 入門WebAssemblyを読んでWASMをはじめた</title>
        <published>2022-07-06T00:00:00+00:00</published>
        <updated>2022-07-06T00:00:00+00:00</updated>
        <author>
          <name>ymgyt</name>
        </author>
        <link rel="alternate" href="https://blog.ymgyt.io/entry/the_art_of_webassembly_jp/" type="text/html"/>
        <id>https://blog.ymgyt.io/entry/the_art_of_webassembly_jp/</id>
        
        <content type="html">&lt;h2 id=&quot;du-ndaben&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#du-ndaben&quot; aria-label=&quot;Anchor link for: du-ndaben&quot;&gt;読んだ本&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;div class=&quot;fig-images-row&quot;&gt;
    
    &lt;img 
      src=&quot;images&amp;#x2F;the_art_of_webassembly_book.png&quot; 
      alt=&quot;&quot;, 
       
      
    &gt;
    
  &lt;&#x2F;div&gt;
  &lt;figcaption&gt;Rick Battagline 著&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.shoeisha.co.jp&#x2F;book&#x2F;detail&#x2F;9784798173597&quot;&gt;入門WebAssembly&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;nostarch.com&#x2F;art-webassembly&quot;&gt;The Art Of WebAssembly&lt;&#x2F;a&gt;の翻訳書です。&lt;&#x2F;p&gt;
&lt;p&gt;本書を読みながらサンプルコードを写経したので感想を書いていきます。&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;wasmbook.com&#x2F;&quot;&gt;著者のWebサイト&lt;&#x2F;a&gt;には他にもWebAssemblyについてのトピックがあります。&lt;br &#x2F;&gt;
サンプルコードは&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;battlelinegames&#x2F;ArtOfWasm&quot;&gt;GitHub&lt;&#x2F;a&gt;から見れます。&lt;br &#x2F;&gt;
canvasに3000個のobjectの衝突判定をrenderingするサンプルを動かすところまでやりました。&lt;br &#x2F;&gt;
https:&#x2F;&#x2F;wasmbook.com&#x2F;collide.html&lt;&#x2F;p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;div class=&quot;fig-images-row&quot;&gt;
    
    &lt;img 
      src=&quot;images&amp;#x2F;wasm_object_collision.gif&quot; 
      alt=&quot;&quot;, 
       
      
    &gt;
    
  &lt;&#x2F;div&gt;
  &lt;figcaption&gt;collide.html&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h2 id=&quot;kitukake&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#kitukake&quot; aria-label=&quot;Anchor link for: kitukake&quot;&gt;きっかけ&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;RustでWASMのecosystemにふれていく前に素のWASMについてなんとなくでも理解したいと思っていました。(ある程度生成されたグルーコード読めないと落ち着かない)&lt;br &#x2F;&gt;
本書ではWATを書いてWASMに変換して動かしながらWASMの仕様を追っていくので、WASMだけを学べると思って読んでみました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;matome&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#matome&quot; aria-label=&quot;Anchor link for: matome&quot;&gt;まとめ&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;特にフレームワークを用いずにWATを書いてWASMに変換して、node&#x2F;browserから動かせるようになりました&lt;&#x2F;li&gt;
&lt;li&gt;WASMがスタックマシンとして動作していることがわかりました&lt;&#x2F;li&gt;
&lt;li&gt;現状のWASM(1.0)とJavascriptの役割分担がわかりました&lt;&#x2F;li&gt;
&lt;li&gt;パフォーマンスのチューニングや、デバッグ方法についても書いてあります&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;somosomowasmtoha&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#somosomowasmtoha&quot; aria-label=&quot;Anchor link for: somosomowasmtoha&quot;&gt;そもそもWASMとは&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;そもそもWebAssembly(WASM)とはなにかという話なのですが、以下のように定義されています。&lt;&#x2F;p&gt;
&lt;p&gt;WebAssemblyとは、スタックマシン用の仮想命令セットアーキテクチャ(Virtual ISA)。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;https:&#x2F;&#x2F;webassembly.org&#x2F;&lt;&#x2F;p&gt;
&lt;p&gt;スタックマシン用というのは、CPU命令にレジスターがでてこないという意味で、常に暗黙的に存在するグローバルなスタックを操作することでデータを処理していきます。&lt;&#x2F;p&gt;
&lt;p&gt;また、現時点のMVP(Minimum Viable Product) 1.0では、JavaScript(React,Vue)を置き換えるようなことはできないし、意図されてもいないそうです。&lt;br &#x2F;&gt;
このあたりもこれから見ていくのですが、WASMからDOMを操作できないのでjsを置き換えるというのはできなそうです。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wattoha&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#wattoha&quot; aria-label=&quot;Anchor link for: wattoha&quot;&gt;WATとは&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;WebAssembly Text(WAT)は、WASMのアセンブリ言語(のようなもの)です。&lt;br &#x2F;&gt;
WASM,WAT間で相互に変換できます。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zhun-bei&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#zhun-bei&quot; aria-label=&quot;Anchor link for: zhun-bei&quot;&gt;準備&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;以下を準備します。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;WASMの実行環境としてnode&lt;&#x2F;li&gt;
&lt;li&gt;WATをWASMに変換するcli(&lt;code&gt;wat2wasm&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;❯&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; node&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;v&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;v16.13.2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;nodeはv16を利用しました、本書では&lt;code&gt;12.14.0&lt;&#x2F;code&gt;が前提となっています。&lt;br &#x2F;&gt;
余談ですが、nodeのversion管理はnvmからRust製の&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Schniz&#x2F;fnm&quot;&gt;fnm&lt;&#x2F;a&gt;に切り替えました。&lt;br &#x2F;&gt;
nodeをinstallするとしたら以下のような感じです。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;❯&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; cargo install fnm&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;❯&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; fnm install v16.13.2&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;❯&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; fnm default v16.13.2&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;❯&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; eval &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-command z-parens z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;fnm&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; env&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;次にWATをWASMに変換するための&lt;code&gt;wat2wasm&lt;&#x2F;code&gt;をinstallします。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;❯&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; npm install&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;g&lt;&#x2F;span&gt; wat-wasm&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;❯&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; cat &lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; file.wat  &lt;span class=&quot;z-string z-unquoted z-heredoc z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-control z-heredoc-token z-shell&quot;&gt;EOF&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-heredoc z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-heredoc z-shell&quot;&gt;(module)
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-heredoc z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-control z-heredoc-token z-shell&quot;&gt;EOF&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;❯&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; wat2wasm file.wat&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;=======================================================&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;WAT2WASM&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;=======================================================&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Need&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; help&lt;span class=&quot;z-keyword z-operator z-regexp z-quantifier z-shell&quot;&gt;?&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Contact&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; Rick Battagline&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Twitter:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; @battagline&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;https:&#x2F;&#x2F;wasmbook.com&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;v1.0.43&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;no&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; memory&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Writing&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; to file.wasm&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;WASM&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; File Saved!&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これでカレントディレクトリに&lt;code&gt;file.wasm&lt;&#x2F;code&gt;が生成されるので中身を見てみます。&lt;br &#x2F;&gt;
toolはなんでもよいのですが自分は&lt;code&gt;hexyl&lt;&#x2F;code&gt;を利用しています。(&lt;code&gt;cargo install hexyl&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;❯&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; hexyl file.wasm&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;┌────────┬─────────────────────────┬─────────────────────────┬────────┬────────┐&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;│00000000│&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 00 61 73 6d 01 00 00 00 ┊                         │0asm•000┊        │&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;└────────┴─────────────────────────┴─────────────────────────┴────────┴────────┘&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;webassembly.github.io&#x2F;spec&#x2F;core&#x2F;binary&#x2F;modules.html#binary-module&quot;&gt;WASMのBinary Formatに関する仕様&lt;&#x2F;a&gt;でmoduleは以下のように定義されています。&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;magic   ::= 0x00 0x61 0x73 0x6D
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;version ::= 0x01 0x00 0x00 0x00
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;module  ::= magic
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            version
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (省略)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ということで、先頭が&lt;code&gt;0asm&lt;&#x2F;code&gt;のMAGIC NUMBERで次の4byteがBinary Formatのversion 1になっています。(61=a, 73=s, 6d=m)&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;webassembly.github.io&#x2F;spec&#x2F;core&#x2F;binary&#x2F;values.html#integers&quot;&gt;WASMはリトルエンディアン&lt;&#x2F;a&gt;なので、01が先頭にきていますね。&lt;br &#x2F;&gt;
WATをWASMに変換できていることが確認できれば準備完了です。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;watnomentarumoderu&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#watnomentarumoderu&quot; aria-label=&quot;Anchor link for: watnomentarumoderu&quot;&gt;WATのメンタルモデル&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;さっそくHello Worldに入りたいところなのですが、WASMにはString型のデータ構造がなかったり、組み込み環境(実行環境)とのimport&#x2F;exportが最初はわかりづらかったりしたので、WATの書き方から見ていきます。&lt;&#x2F;p&gt;
&lt;p&gt;WATでは暗黙的なグローパルのスタックを操作することで演算や関数とのやり取りを行います。&lt;br &#x2F;&gt;
例えば定数の10と20を加算するには&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;i32.const 10 ;; [ 10 ]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;i32.const 20 ;; [ 10 20 ]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;i32.add      ;; [ 30 ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;のように書きます。各業の命令が実行されたあとのスタックの状態をコメントで書いてあります。&lt;br &#x2F;&gt;
レジスターを指定する命令がないのがスタックマシーン用ということなんだろうと思います。&lt;br &#x2F;&gt;
WATではもうひとつ、S expression(S式)という書き方がサポートされており、上記の加算は以下のようにも書けます。&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(i32.add (i32.const 10) (i32.const 20))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;S式と通常の記法は混在させることができます。&lt;br &#x2F;&gt;
また、WASMの実行単位であるmoduleもひとつのS式として表現されます。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nodekaranodong-kasifang&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#nodekaranodong-kasifang&quot; aria-label=&quot;Anchor link for: nodekaranodong-kasifang&quot;&gt;Nodeからの動かし方&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;WATの書き方がなんとなくわかったのでnodeから動かしてみます。&lt;br &#x2F;&gt;
&lt;code&gt;node add.js 10 20&lt;&#x2F;code&gt;のように引数で与えられた数をWASMで加算して結果を表示する処理を作っていきます。&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;webassembly.github.io&#x2F;spec&#x2F;core&#x2F;text&#x2F;conventions.html#conventions&quot;&gt;WATの推奨拡張子は&lt;code&gt;wat&lt;&#x2F;code&gt;らしいです&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;addInt.wat&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(module
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (func (export &amp;quot;addInt&amp;quot;)                   ;; 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (param $value_1 i32) (param $value_2 i32) ;; 2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (result i32)                              ;; 3
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    local.get $value_1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    local.get $value_2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    i32.add                                   ;; 4
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;まず、加算を行うWASM moduleを作成します。&lt;br &#x2F;&gt;
&lt;code&gt;(module)&lt;&#x2F;code&gt;はお決まりで必ず書きます。moduleはWASMにおける、&lt;a href=&quot;https:&#x2F;&#x2F;webassembly.github.io&#x2F;spec&#x2F;core&#x2F;syntax&#x2F;modules.html#modules&quot;&gt;deploy,loading,compileの単位&lt;&#x2F;a&gt;です。
次にWASMでは関数単位で機能を定義していくので、jsから呼び出す関数を定義します。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;js側からこの関数を&lt;code&gt;addInt&lt;&#x2F;code&gt;として呼べるようになります。exportを変なところに定義するなと思うかもしれませんが、これは&lt;a href=&quot;https:&#x2F;&#x2F;webassembly.github.io&#x2F;spec&#x2F;core&#x2F;text&#x2F;modules.html#text-func-abbrev&quot;&gt;syntactic sugar&lt;&#x2F;a&gt;のようです&lt;&#x2F;li&gt;
&lt;li&gt;関数は二つのi32型の引数をとることを宣言しています。&lt;&#x2F;li&gt;
&lt;li&gt;関数はi32型の結果を戻り値として返すことを宣言しています。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;$value_1&lt;&#x2F;code&gt;と&lt;code&gt;$value_2&lt;&#x2F;code&gt;の加算結果をstackに残しておくことで結果を返します。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;code&gt;wat2wasm addInt.wat&lt;&#x2F;code&gt;で``addInt.wasm`が生成できれば完了です。&lt;br &#x2F;&gt;
次にこのWASMを呼び出すjsを書きます。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;addInt.js&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript z-code&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;fs&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-support z-function z-ts&quot;&gt;require&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;fs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;fs&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;readFileSync&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-variable z-object z-node z-ts&quot;&gt;__dirname&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&#x2F;addInt.wasm&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;           &lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-ts&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt; 1&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;value_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-support z-function z-ts&quot;&gt;parseInt&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-variable z-object z-process z-ts&quot;&gt;process&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-variable z-property z-process z-ts&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;value_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-support z-function z-ts&quot;&gt;parseInt&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-variable z-object z-process z-ts&quot;&gt;process&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-variable z-property z-process z-ts&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-async z-ts&quot;&gt;async&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-parameters z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-begin z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-end z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-ts&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;  &lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;obj&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-ts&quot;&gt;await&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;WebAssembly&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;instantiate&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-new z-expr z-ts&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-new z-ts&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-ts&quot;&gt;Uint8Array&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-ts&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt; 2&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;  &lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;add_value&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-object z-property z-ts&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-object z-property z-ts&quot;&gt;exports&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;addInt&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;value_1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;value_2&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;     &lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-ts&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt; 3&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-support z-class z-console z-ts&quot;&gt;console&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-console z-ts&quot;&gt;log&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-template z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-template z-begin z-ts&quot;&gt;`&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-template z-expression z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-template-expression z-begin z-ts&quot;&gt;${&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-template z-expression z-ts&quot;&gt;&lt;span class=&quot;z-meta z-embedded z-line z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;value_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-template-expression z-end z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; + &lt;span class=&quot;z-meta z-template z-expression z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-template-expression z-begin z-ts&quot;&gt;${&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-template z-expression z-ts&quot;&gt;&lt;span class=&quot;z-meta z-embedded z-line z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;value_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-template-expression z-end z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; = &lt;span class=&quot;z-meta z-template z-expression z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-template-expression z-begin z-ts&quot;&gt;${&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-template z-expression z-ts&quot;&gt;&lt;span class=&quot;z-meta z-embedded z-line z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;add_value&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-template-expression z-end z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-template z-end z-ts&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;WASMをfileから読み込みます。browserの場合はここがfetch(ネットワーク越し)になります。&lt;&#x2F;li&gt;
&lt;li&gt;WASMをinstance化します。メンタルモデル的にはここで、読み込んだwasmのmoduleの初期化処理が走ります。&lt;&#x2F;li&gt;
&lt;li&gt;WASMからexportした関数は&lt;code&gt;instance.exports&lt;&#x2F;code&gt;に格納されているので呼び出します。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;❯&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; node addInt.js 1 2&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; + 2 = 3&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;jsからWASMを呼び出すことができました🎉&lt;br &#x2F;&gt;
このようにWASM側でexportした関数をjs側から呼び出すことで利用します。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;browserkaranodong-kasifang&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#browserkaranodong-kasifang&quot; aria-label=&quot;Anchor link for: browserkaranodong-kasifang&quot;&gt;Browserからの動かし方&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;次にWASMをbrowserから実行してみます。&lt;br &#x2F;&gt;
WASMのbinaryを取得してinstantiateしたのちに、exportされた関数を呼び出すという基本的な流れは同じです。&lt;&#x2F;p&gt;
&lt;p&gt;まず、browserにWASMとhtmlをserveしたいので、http serverを建てられるようにします。(localのfileをserveできればなんでもよいです)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;❯&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; npm install&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;save-dev&lt;&#x2F;span&gt; connect serve-static&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;次に以下の内容の&lt;code&gt;index.html&lt;&#x2F;code&gt;を作ります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; class=&quot;language-html z-code&quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-sgml z-doctype z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-declaration z-doctype z-html&quot;&gt;DOCTYPE&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-doctype z-html&quot;&gt;html&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-structure z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-structure z-any z-html&quot;&gt;html&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-html&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;en&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-structure z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-structure z-any z-html&quot;&gt;head&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;    &lt;span class=&quot;z-meta z-tag z-inline z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-any z-html&quot;&gt;meta&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-html&quot;&gt;charset&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;UTF-8&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;    &lt;span class=&quot;z-meta z-tag z-inline z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-any z-html&quot;&gt;meta&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-html&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-html&quot;&gt;”viewport”&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-html&quot;&gt;content&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-html&quot;&gt;”width=device-width,initial-scale=1″&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;    &lt;span class=&quot;z-meta z-tag z-inline z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-any z-html&quot;&gt;title&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Add Int&lt;span class=&quot;z-meta z-tag z-inline z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-any z-html&quot;&gt;title&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;    &lt;span class=&quot;z-meta z-tag z-script z-begin z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-script z-html&quot;&gt;script&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-script z-begin z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;        &lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-storage z-type z-js&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;output&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-null z-js&quot;&gt;null&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;        &lt;span class=&quot;z-storage z-type z-js&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;addIntWasm&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;        &lt;span class=&quot;z-comment z-line z-double-slash z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-js&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; 1
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;        &lt;span class=&quot;z-storage z-type z-js&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-declaration z-js&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;logAddInt&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-declaration z-js&quot;&gt; &lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-function z-js&quot;&gt;a&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-parameter z-function z-js&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-function z-js&quot;&gt;b&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-parameter z-function z-js&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-function z-js&quot;&gt;sum&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-arrow z-js&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt; &lt;span class=&quot;z-meta z-block z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-js&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;            &lt;span class=&quot;z-meta z-conditional z-js&quot;&gt;&lt;span class=&quot;z-keyword z-control z-conditional z-if z-js&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;output&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-comparison z-js&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-null z-js&quot;&gt;null&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-js&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;&lt;span class=&quot;z-meta z-conditional z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;                &lt;span class=&quot;z-meta z-function-call z-method z-js&quot;&gt;&lt;span class=&quot;z-support z-type z-object z-console z-js&quot;&gt;console&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-console z-js&quot;&gt;log&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-js&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-js&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;page load not complete&lt;span class=&quot;z-punctuation z-definition z-string z-end z-js&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;&lt;span class=&quot;z-meta z-conditional z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;                &lt;span class=&quot;z-keyword z-control z-flow z-return z-js&quot;&gt;return&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;&lt;span class=&quot;z-meta z-conditional z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;            &lt;span class=&quot;z-punctuation z-section z-block z-end z-js&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;            &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;output&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-object z-js&quot;&gt;innerHTML&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-augmented z-js&quot;&gt;+=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-js&quot;&gt;&lt;span class=&quot;z-string z-quoted z-other z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-js&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-interpolation z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-interpolation z-begin z-js&quot;&gt;${&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-interpolation z-js&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;a&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-interpolation z-end z-js&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-other z-js&quot;&gt; + &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-interpolation z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-interpolation z-begin z-js&quot;&gt;${&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-interpolation z-js&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;b&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-interpolation z-end z-js&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-other z-js&quot;&gt; = &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-interpolation z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-interpolation z-begin z-js&quot;&gt;${&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-interpolation z-js&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;sum&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-interpolation z-end z-js&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-other z-js&quot;&gt;&amp;lt;br&amp;gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-js&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;        &lt;span class=&quot;z-punctuation z-section z-block z-end z-js&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;        &lt;span class=&quot;z-comment z-line z-double-slash z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-js&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; 2
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;        &lt;span class=&quot;z-storage z-type z-js&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;importObject&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-js&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;            &lt;span class=&quot;z-meta z-mapping z-key z-js&quot;&gt;env&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-js&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-js&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;                &lt;span class=&quot;z-meta z-mapping z-key z-js&quot;&gt;logAddInt&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-js&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;logAddInt&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;            &lt;span class=&quot;z-punctuation z-section z-block z-end z-js&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;        &lt;span class=&quot;z-punctuation z-section z-block z-end z-js&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;        &lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-declaration z-js&quot;&gt;&lt;span class=&quot;z-storage z-type z-js&quot;&gt;async&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-arrow z-js&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt; &lt;span class=&quot;z-meta z-block z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-js&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;            &lt;span class=&quot;z-storage z-type z-js&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;obj&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-await z-js&quot;&gt;await&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-method z-js&quot;&gt;&lt;span class=&quot;z-support z-class z-js&quot;&gt;WebAssembly&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-function z-js&quot;&gt;instantiateStreaming&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-js&quot;&gt;&lt;span class=&quot;z-variable z-function z-js&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-js&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-js&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;addInt.wasm&lt;span class=&quot;z-punctuation z-definition z-string z-end z-js&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;importObject&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-js&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; 3
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;            &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;addIntWasm&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-object z-js&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-object z-js&quot;&gt;exports&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-object z-js&quot;&gt;addInt&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;                                             &lt;span class=&quot;z-comment z-line z-double-slash z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-js&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; 4
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;            &lt;span class=&quot;z-storage z-type z-js&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;btn&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-method z-js&quot;&gt;&lt;span class=&quot;z-support z-type z-object z-dom z-js&quot;&gt;document&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-function z-js&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-js&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-js&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;addIntButton&lt;span class=&quot;z-punctuation z-definition z-string z-end z-js&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;            &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;btn&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-object z-js&quot;&gt;style&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-object z-js&quot;&gt;display&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-js&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-js&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;block&lt;span class=&quot;z-punctuation z-definition z-string z-end z-js&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;        &lt;span class=&quot;z-punctuation z-section z-block z-end z-js&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;        &lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-declaration z-js&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-js&quot;&gt;function&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-js&quot;&gt;onPageLoad&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt; &lt;span class=&quot;z-meta z-block z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-js&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;            &lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-declaration z-js&quot;&gt;&lt;span class=&quot;z-storage z-type z-js&quot;&gt;async&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-arrow z-js&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt; &lt;span class=&quot;z-meta z-block z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-js&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;                &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;output&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-method z-js&quot;&gt;&lt;span class=&quot;z-support z-type z-object z-dom z-js&quot;&gt;document&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-function z-js&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-js&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-js&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;output&lt;span class=&quot;z-punctuation z-definition z-string z-end z-js&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;            &lt;span class=&quot;z-punctuation z-section z-block z-end z-js&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;        &lt;span class=&quot;z-punctuation z-section z-block z-end z-js&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-script z-end z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-script z-html&quot;&gt;script&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-structure z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-structure z-any z-html&quot;&gt;head&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-structure z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-structure z-any z-html&quot;&gt;body&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-html&quot;&gt;onLoad&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;onPageLoad()&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-inline z-form z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-form z-html&quot;&gt;input&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-html&quot;&gt;type&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;number&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-id z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-id z-html&quot;&gt;id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-meta z-toc-list z-id z-html&quot;&gt;a_val&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-html&quot;&gt;value&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;0&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-inline z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-any z-html&quot;&gt;br&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-inline z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-any z-html&quot;&gt;br&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-inline z-form z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-form z-html&quot;&gt;input&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-html&quot;&gt;type&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;number&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-id z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-id z-html&quot;&gt;id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-meta z-toc-list z-id z-html&quot;&gt;b_val&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-html&quot;&gt;value&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;0&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-inline z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-any z-html&quot;&gt;br&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-inline z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-any z-html&quot;&gt;br&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-inline z-form z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-form z-html&quot;&gt;button&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-id z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-id z-html&quot;&gt;id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-meta z-toc-list z-id z-html&quot;&gt;addIntButton&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-html&quot;&gt;type&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;button&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-style z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-style z-html&quot;&gt;style&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-css&quot;&gt;&lt;span class=&quot;z-meta z-property-name z-css&quot;&gt;&lt;span class=&quot;z-support z-type z-property-name z-css&quot;&gt;display&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-css&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property-value z-css&quot;&gt;&lt;span class=&quot;z-support z-constant z-property-value z-css&quot;&gt;none&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-inline z-form z-html&quot;&gt;&lt;span class=&quot;z-meta z-attribute-with-value z-style z-html&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-attribute-with-value z-event z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-event z-html&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-attribute-with-value z-event z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-js&quot;&gt;&lt;span class=&quot;z-variable z-function z-js&quot;&gt;addIntWasm&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-inline z-form z-html&quot;&gt;&lt;span class=&quot;z-meta z-attribute-with-value z-event z-html&quot;&gt;&lt;span class=&quot;z-meta z-attribute-with-value z-event z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-js&quot;&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;                &lt;span class=&quot;z-meta z-function-call z-method z-js&quot;&gt;&lt;span class=&quot;z-support z-type z-object z-dom z-js&quot;&gt;document&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-function z-js&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-js&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-js&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;a_val&lt;span class=&quot;z-punctuation z-definition z-string z-end z-js&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-object z-js&quot;&gt;value&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-inline z-form z-html&quot;&gt;&lt;span class=&quot;z-meta z-attribute-with-value z-event z-html&quot;&gt;&lt;span class=&quot;z-meta z-attribute-with-value z-event z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-js&quot;&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;                &lt;span class=&quot;z-meta z-function-call z-method z-js&quot;&gt;&lt;span class=&quot;z-support z-type z-object z-dom z-js&quot;&gt;document&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-function z-js&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-js&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-js&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;b_val&lt;span class=&quot;z-punctuation z-definition z-string z-end z-js&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-object z-js&quot;&gt;value&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;    Add Values
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-inline z-form z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-form z-html&quot;&gt;button&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-inline z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-any z-html&quot;&gt;br&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-block z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-block z-any z-html&quot;&gt;p&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-id z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-id z-html&quot;&gt;id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-meta z-toc-list z-id z-html&quot;&gt;output&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-style z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-style z-html&quot;&gt;style&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-css&quot;&gt;&lt;span class=&quot;z-meta z-property-name z-css&quot;&gt;&lt;span class=&quot;z-support z-type z-property-name z-css&quot;&gt;float&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-css&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property-value z-css&quot;&gt;&lt;span class=&quot;z-support z-constant z-property-value z-css&quot;&gt;left&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rule z-css&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-property-name z-css&quot;&gt;&lt;span class=&quot;z-support z-type z-property-name z-css&quot;&gt;width&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-css&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property-value z-css&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-css&quot;&gt;200&lt;span class=&quot;z-keyword z-other z-unit z-css&quot;&gt;px&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rule z-css&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-property-name z-css&quot;&gt;&lt;span class=&quot;z-support z-type z-property-name z-css&quot;&gt;min-height&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-css&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property-value z-css&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-css&quot;&gt;300&lt;span class=&quot;z-keyword z-other z-unit z-css&quot;&gt;px&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rule z-css&quot;&gt;;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-block z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-block z-any z-html&quot;&gt;p&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-structure z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-structure z-any z-html&quot;&gt;body&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-structure z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-structure z-any z-html&quot;&gt;html&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;logAddInt&lt;&#x2F;code&gt;はjsからwasmに渡す関数です。wasmから呼ばれたら結果をDOMに追記していきます。&lt;&#x2F;li&gt;
&lt;li&gt;jsからwasmに渡すobjectです。&lt;code&gt;logAddInt&lt;&#x2F;code&gt;はwasm側と一致している必要があります。&lt;&#x2F;li&gt;
&lt;li&gt;wasmのinstance化です。binaryを&lt;code&gt;fetch()&lt;&#x2F;code&gt;で取得しています。第二引数でimport用のobjectを渡します。&lt;&#x2F;li&gt;
&lt;li&gt;jsからcallするwasmの関数です。buttonのonclickに設定します。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;code&gt;addInt.wat&lt;&#x2F;code&gt;を以下のように変更します。&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(module
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (import &amp;quot;env&amp;quot; &amp;quot;logAddInt&amp;quot; (func $logAddInt (param i32 i32 i32))) ;; 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (func (export &amp;quot;addInt&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (param $value_1 i32) (param $value_2 i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (local $sum i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    local.get $value_1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    local.get $value_2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    i32.add
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    local.set $sum
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (call $logAddInt (local.get $value_1) (local.get $value_2) (local.get $sum)) ;; 2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;wasmが組み込み環境(実行環境&#x2F;host環境)から取得する関数を宣言します。&lt;&#x2F;li&gt;
&lt;li&gt;importした関数の呼び出しです。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;変更したら、&lt;code&gt;wat2wasm addInt.wat&lt;&#x2F;code&gt;でwasmに変換します。&lt;&#x2F;p&gt;
&lt;p&gt;最後にhtmlとwasmをserveするための&lt;code&gt;server.js&lt;&#x2F;code&gt;を作成します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript z-code&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;connect&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-support z-function z-ts&quot;&gt;require&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;connect&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;serveStatic&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-support z-function z-ts&quot;&gt;require&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;serve-static&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;connect&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;use&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;serveStatic&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-variable z-object z-node z-ts&quot;&gt;__dirname&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;+&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&#x2F;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;listen&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;8080&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-expression z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-ts&quot;&gt;function&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-parameters z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-begin z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-end z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-function z-expression z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-support z-class z-console z-ts&quot;&gt;console&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-console z-ts&quot;&gt;log&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;localhost:8080&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-function z-expression z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで以下のようにserverを起動したのちbrowserで&lt;code&gt;localhost:8080&lt;&#x2F;code&gt;にアクセスします。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;node&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; server.js&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;[f:id:yamaguchi7073xtt:20220705044410p:plain]&lt;&#x2F;p&gt;
&lt;p&gt;このように組み込み環境(browser, node)とwasm間ではimport&#x2F;exportをお互いの関数を呼び合うことができることが確かめられました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hello-world&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hello-world&quot; aria-label=&quot;Anchor link for: hello-world&quot;&gt;Hello World&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;WATをWASMに変換して組み込み環境(node,browser)から実行することができたので、Hello Worldをやってみます。&lt;br &#x2F;&gt;
まず以下のWATを作成します。&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(module
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (import &amp;quot;env&amp;quot; &amp;quot;print_string&amp;quot; (func $print_string(param i32)))  ;; 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (import &amp;quot;env&amp;quot; &amp;quot;buffer&amp;quot; (memory 1))                             ;; 2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (global $start_string (import &amp;quot;env&amp;quot; &amp;quot;start_string&amp;quot;) i32)       ;; 3
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (global $string_len i32 (i32.const 12))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (data (global.get $start_string) &amp;quot;hello world!&amp;quot;)               ;; 4
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (func (export &amp;quot;helloworld&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (call $print_string (global.get $string_len))              ;; 5
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;WASMからI&#x2F;Oをすることができないので、組み込み環境からhello world出力用の関数をimportします。&lt;&#x2F;li&gt;
&lt;li&gt;線形メモリを利用することを宣言します。実際のメモリはjs側で確保してWASMに渡します。&lt;&#x2F;li&gt;
&lt;li&gt;線形メモリのどの位置にhello world文字列を生成するかをjs側から指定します。&lt;&#x2F;li&gt;
&lt;li&gt;指定された線形メモリ位置にUTF-8のbyte列を生成します。&lt;&#x2F;li&gt;
&lt;li&gt;importした文字列出力用関数に出力する文字列の長さを渡します。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;jsとWASMの役割分担がややこしいですが以下のようになっています。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;js側
&lt;ul&gt;
&lt;li&gt;メモリ確保&lt;&#x2F;li&gt;
&lt;li&gt;確保したメモリのどの位置にhello worldを出力するかを指定&lt;&#x2F;li&gt;
&lt;li&gt;出力する文字列の長さを引数にとる関数をWASMに渡す&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;WASM側
&lt;ul&gt;
&lt;li&gt;importしたメモリの指定された位置に&quot;hello world&quot; UTF-8 byte列を生成&lt;&#x2F;li&gt;
&lt;li&gt;出力用関数に&quot;hello world&quot;の長さを引数にして呼び出す&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;js側は以下のように作成します。(&lt;code&gt;helloworld.js&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript z-code&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;fs&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-support z-function z-ts&quot;&gt;require&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;fs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;fs&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;readFileSync&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-variable z-object z-node z-ts&quot;&gt;__dirname&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&#x2F;helloworld.wasm&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;hello_world&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-null z-ts&quot;&gt;null&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;start_string_index&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;200&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;                       &lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-ts&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt; 1&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;memory&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-new z-expr z-ts&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-new z-ts&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-module z-ts&quot;&gt;WebAssembly&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-type z-ts&quot;&gt;Memory&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object-literal z-key z-ts&quot;&gt;initial&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object-literal z-key z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-ts&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-ts&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt; 2&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;importObject&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;  &lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object-literal z-key z-ts&quot;&gt;env&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object-literal z-key z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-ts&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;    &lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object-literal z-key z-ts&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object-literal z-key z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-ts&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;memory&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;                                 &lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-ts&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt; 3&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;    &lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object-literal z-key z-ts&quot;&gt;start_string&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object-literal z-key z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-ts&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;start_string_index&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;    &lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object-literal z-key z-ts&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;print_string&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object-literal z-key z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-ts&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-expression z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-ts&quot;&gt;function&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-parameters z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-begin z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-ts&quot;&gt;str_len&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-end z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-function z-expression z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-whitespace z-comment z-leading z-ts&quot;&gt;      &lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-ts&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt; 4  &lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-function z-expression z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;      &lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-new z-expr z-ts&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-new z-ts&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-ts&quot;&gt;Uint8Array&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-property z-ts&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-function z-expression z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-new z-expr z-ts&quot;&gt;          &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;start_string_index&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-function z-expression z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-new z-expr z-ts&quot;&gt;          &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;str_len&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-function z-expression z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;      &lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;log_string&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-new z-expr z-ts&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-new z-ts&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-ts&quot;&gt;TextDecoder&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;utf8&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;decode&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-function z-expression z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;      &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-support z-class z-console z-ts&quot;&gt;console&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-console z-ts&quot;&gt;log&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;log_string&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-function z-expression z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;    &lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;  &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-async z-ts&quot;&gt;async&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-parameters z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-begin z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-end z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-ts&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;  &lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;obj&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-ts&quot;&gt;await&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;WebAssembly&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;instantiate&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-new z-expr z-ts&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-new z-ts&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-ts&quot;&gt;Uint8Array&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;importObject&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;  &lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object-literal z-key z-ts&quot;&gt;helloworld&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-meta z-object-literal z-key z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-ts&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;hello_world&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-object z-property z-ts&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-property z-ts&quot;&gt;exports&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;hello_world&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;開始200byte目にhello worldを出力することを指定&lt;&#x2F;li&gt;
&lt;li&gt;WASMに渡すメモリを確保します&lt;&#x2F;li&gt;
&lt;li&gt;確保したメモリをWASMに渡します&lt;&#x2F;li&gt;
&lt;li&gt;確保したメモリ位置をUTF8として解釈します&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;❯&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; node helloworld.js&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;hello&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; world!&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;無事、hello world!がWASMでできました🎉&lt;br &#x2F;&gt;
またここで登場した線形メモリ(&lt;code&gt;WebAssembly.Memory&lt;&#x2F;code&gt;)については6章で詳しく説明されています。&lt;br &#x2F;&gt;
自分の理解としてはWASMとjs間で共有できるBufferで、ページ(64KB)単位で確保するものと考えております。&lt;br &#x2F;&gt;
この線形メモリの実用的な利用例は最後のDOM操作でふれます。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;is-prime&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#is-prime&quot; aria-label=&quot;Anchor link for: is-prime&quot;&gt;&lt;code&gt;is_prime&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Hello Worldが済んだので、WATの制御フロー(loop,if)を見ていきます。加算から一歩進んで、素数を判定するmoduleを作っていきます。&lt;br &#x2F;&gt;
まずWATからですが長くなるので少しつづみていきます。&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(module
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    ;; 偶数の判定
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (func $even_check (param $n i32) (result i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.get $n          ;; [ n ]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.const 2           ;; [ n 2 ]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.rem_u             ;; [ 0 ]   | [ 1 ] 
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.const 0           ;; [ 0 0 ] | [ 1 0 ]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.eq ;; $n % 2 == 0 ;; [ 1 ] | [ 0 ] 
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;helper関数として偶数を判定する&lt;code&gt;even_check&lt;&#x2F;code&gt;を定義します。&lt;br &#x2F;&gt;
コメントで命令実行後のスタックの様子を書いてあります。(&lt;code&gt;|&lt;&#x2F;code&gt;はまたはの意味です)&lt;br &#x2F;&gt;
WASMにはデータ型としてbooleanがなく0以外がtrue, 0がfalseとして扱われます。&lt;br &#x2F;&gt;
&lt;code&gt;rem_u&lt;&#x2F;code&gt;は除算の余りを出力します。&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    ;; 2と等しいかの判定
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (func $eq_2 (param $n i32) (result i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.get $n
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.const 2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.eq
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    ;; n = m * q. nがmの倍数かの判定。
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (func $multiple_check (param $n i32) (param $m i32) (result i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.get $n
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.get $m
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.rem_u ;; $n % $m
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.const 0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.eq
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;次に2と等しいか判定する&lt;code&gt;eq_2&lt;&#x2F;code&gt;と第一引数が第二引数の倍数かを判定する&lt;code&gt;multiple_check&lt;&#x2F;code&gt;を定義します。&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    ;; 素数の判定
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (func (export &amp;quot;is_prime&amp;quot;) (param $n i32) (result i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $i i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        ;; 1と等しいかの判定
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (if (i32.eq (local.get $n) (i32.const 1))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (then
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                i32.const 0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                return
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        ;; 2と等しいかの判定
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (if (call $eq_2 (local.get $n))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (then
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                i32.const 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                return
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (block $not_prime 
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (call $even_check (local.get $n))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            br_if $not_prime ;; 偶数なので素数ではない
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (local.set $i (i32.const 1))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (loop $prime_test_loop
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                ;; $i += 2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                ;; teeはsetと同じだがstackをpopしない
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (local.tee $i
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    (i32.add (local.get $i) (i32.const 2)))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.get $n ;; stack = [ $i $n ]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                i32.ge_u ;; $i &amp;gt;= $n
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                if
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    ;; $nを調べきったので素数と判定
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    i32.const 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    return
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                end
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                ;; stack = [];
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                ;; $nが$iの倍数なら素数ではない
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (call $multiple_check (local.get $n) (local.get $i))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                br_if $not_prime
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                ;; loopを繰り返す
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                br $prime_test_loop
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            ) ;; $prime_test_loop end
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        ;; br $not_prime jump here
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.const 0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ここで、条件分岐(&lt;code&gt;if&lt;&#x2F;code&gt;)とloopについて簡単に解説します。&lt;br &#x2F;&gt;
&lt;code&gt;if&lt;&#x2F;code&gt;は実行時のスタックの先頭を評価してtrue(0以外)なら&lt;code&gt;end&lt;&#x2F;code&gt;までの命令を実行します。ここでは利用していませんが&lt;code&gt;else&lt;&#x2F;code&gt;も書けます。&lt;br &#x2F;&gt;
blockは少々わかりづらいのですが、&lt;code&gt;br&lt;&#x2F;code&gt;(branch)命令でblockを抜け出すことができます。&lt;code&gt;br_if&lt;&#x2F;code&gt;はスタックの先頭を評価してtrueなら&lt;code&gt;br&lt;&#x2F;code&gt;する命令です。上の例では&lt;code&gt;br $not_prime&lt;&#x2F;code&gt;でblock分を抜け出すので結果的にfalse(0)が戻り値となります。&lt;&#x2F;p&gt;
&lt;p&gt;loopも直感に反して自動ではloopしてくれません。明示的にloopの先頭にjumpする&lt;code&gt;br&lt;&#x2F;code&gt;命令を利用してはじめてloopできます。&lt;br &#x2F;&gt;
上の例では&lt;code&gt;br $prime_test_loop&lt;&#x2F;code&gt;でloopの先頭に戻ります。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;local.tee $i&lt;&#x2F;code&gt;は、スタックの先頭を&lt;code&gt;$i&lt;&#x2F;code&gt;に代入しつつ、その値をスタックに残します(出力します)&lt;br &#x2F;&gt;
loop制御用のindex変数をインクリメントしつつ、終了判定する場合によく使われていました。&lt;&#x2F;p&gt;
&lt;p&gt;このWATをWASMに変換して、呼び出すjsを作成します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript z-code&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;fs&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-support z-function z-ts&quot;&gt;require&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;fs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;fs&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;readFileSync&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-variable z-object z-node z-ts&quot;&gt;__dirname&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&#x2F;is_prime.wasm&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;value&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-support z-function z-ts&quot;&gt;parseInt&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-variable z-object z-process z-ts&quot;&gt;process&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-variable z-property z-process z-ts&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-decimal z-ts&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-async z-ts&quot;&gt;async&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-parameters z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-begin z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-end z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-ts&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;  &lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;obj&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-ts&quot;&gt;await&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;WebAssembly&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;instantiate&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-new z-expr z-ts&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-new z-ts&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-ts&quot;&gt;Uint8Array&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;  &lt;span class=&quot;z-keyword z-control z-conditional z-ts&quot;&gt;if&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-ts&quot;&gt;!&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-ts&quot;&gt;!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-object z-property z-ts&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-object z-property z-ts&quot;&gt;exports&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;is_prime&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;value&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;    &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-support z-class z-console z-ts&quot;&gt;console&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-console z-ts&quot;&gt;log&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-template z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-template z-begin z-ts&quot;&gt;`&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-template z-expression z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-template-expression z-begin z-ts&quot;&gt;${&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-template z-expression z-ts&quot;&gt;&lt;span class=&quot;z-meta z-embedded z-line z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;value&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-template-expression z-end z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; is prime!&lt;span class=&quot;z-punctuation z-definition z-string z-template z-end z-ts&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;  &lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-conditional z-ts&quot;&gt;else&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;    &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-support z-class z-console z-ts&quot;&gt;console&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-console z-ts&quot;&gt;log&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-template z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-template z-begin z-ts&quot;&gt;`&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-template z-expression z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-template-expression z-begin z-ts&quot;&gt;${&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-template z-expression z-ts&quot;&gt;&lt;span class=&quot;z-meta z-embedded z-line z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;value&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-template-expression z-end z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; is NOT prime&lt;span class=&quot;z-punctuation z-definition z-string z-template z-end z-ts&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;  &lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;❯&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; node is_prime.js 57&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;57&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; is NOT prime&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;無事判定できました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;domcao-zuo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#domcao-zuo&quot; aria-label=&quot;Anchor link for: domcao-zuo&quot;&gt;DOM操作&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;最後にcanvasを操作する例を見ていきます。&lt;br &#x2F;&gt;
WASMからcanvasは操作できないので、canvasに描画するメモリをWASM側で操作してそれをjs側でレンダリングすることで実現します。&lt;br &#x2F;&gt;
ここで作るのは、ある移動する複数のオブジェクトをレンダリングし、オブジェクド同士が衝突しているかを判定するWASMです。&lt;br &#x2F;&gt;
オブジェクトはx,y座標とx,yそれぞれの速度を保持します。&lt;br &#x2F;&gt;
WASMはcanvasに描画されるメモリ領域とオブジェクトの状態を管理する領域を管理します。&lt;&#x2F;p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;div class=&quot;fig-images-row&quot;&gt;
    
    &lt;img 
      src=&quot;images&amp;#x2F;wasm_memory_overview.png&quot; 
      alt=&quot;&quot;, 
       
      
    &gt;
    
  &lt;&#x2F;div&gt;
  &lt;figcaption&gt;メモリ領域の概要&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;まず、htmlは以下のようになります。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;collide.html&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; class=&quot;language-html z-code&quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-sgml z-doctype z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-declaration z-doctype z-html&quot;&gt;DOCTYPE&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-doctype z-html&quot;&gt;html&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-structure z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-structure z-any z-html&quot;&gt;html&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-structure z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-structure z-any z-html&quot;&gt;head&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;  &lt;span class=&quot;z-meta z-tag z-inline z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-any z-html&quot;&gt;meta&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-html&quot;&gt;charset&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;UTF-8&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;  &lt;span class=&quot;z-meta z-tag z-inline z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-any z-html&quot;&gt;meta&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-html&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;viewport&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-html&quot;&gt;content&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;widh=device-width,initial-scale=1.0&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;  &lt;span class=&quot;z-meta z-tag z-inline z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-any z-html&quot;&gt;title&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Collision Detection&lt;span class=&quot;z-meta z-tag z-inline z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-any z-html&quot;&gt;title&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-structure z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-structure z-any z-html&quot;&gt;head&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-structure z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-structure z-any z-html&quot;&gt;body&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;  &lt;span class=&quot;z-meta z-tag z-inline z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-any z-html&quot;&gt;canvas&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-id z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-id z-html&quot;&gt;id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-meta z-toc-list z-id z-html&quot;&gt;cnvs&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-html&quot;&gt;width&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;512&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-html&quot;&gt;height&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;512&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-inline z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-any z-html&quot;&gt;canvas&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;  &lt;span class=&quot;z-meta z-tag z-script z-begin z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-script z-html&quot;&gt;script&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-script z-begin z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;    &lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;cnvs_size&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;512&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;no_hit_color&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-hexadecimal z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-numeric z-base z-js&quot;&gt;0x&lt;&#x2F;span&gt;ff_00_ff_00&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-js&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; green
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;hit_color&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-hexadecimal z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-numeric z-base z-js&quot;&gt;0x&lt;&#x2F;span&gt;ff_00_00_ff&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-js&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; red
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;pixel_count&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;cnvs_size&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-js&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;cnvs_size&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;canvas&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-method z-js&quot;&gt;&lt;span class=&quot;z-support z-type z-object z-dom z-js&quot;&gt;document&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-function z-js&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-js&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-js&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;cnvs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-js&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-method z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;canvas&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-function z-js&quot;&gt;getContext&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-js&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-js&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;2d&lt;span class=&quot;z-punctuation z-definition z-string z-end z-js&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-meta z-function-call z-method z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-function z-js&quot;&gt;clearRect&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;512&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;512&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;obj_start&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;pixel_count&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-js&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;obj_start_32&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;pixel_count&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;obj_size&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;obj_cnt&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;3000&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;stride_bytes&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;16&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;x_offset&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;y_offset&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;xv_offset&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;8&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;yv_offset&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;12&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;memory&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-word z-new z-js&quot;&gt;new&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-constructor z-js&quot;&gt; &lt;span class=&quot;z-meta z-function-call z-method z-js&quot;&gt;&lt;span class=&quot;z-support z-class z-js&quot;&gt;WebAssembly&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-function z-js&quot;&gt;Memory&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-js&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-mapping z-key z-js&quot;&gt;initial&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-js&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;80&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-block z-end z-js&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;mem_i8&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-word z-new z-js&quot;&gt;new&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-constructor z-js&quot;&gt; &lt;span class=&quot;z-support z-class z-builtin z-js&quot;&gt;Uint8Array&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-object z-js&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;mem_i32&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-word z-new z-js&quot;&gt;new&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-constructor z-js&quot;&gt; &lt;span class=&quot;z-support z-class z-builtin z-js&quot;&gt;Uint32Array&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-object z-js&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;importObject&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-js&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;      &lt;span class=&quot;z-meta z-mapping z-key z-js&quot;&gt;env&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-js&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-js&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;        &lt;span class=&quot;z-meta z-mapping z-key z-js&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-js&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;        &lt;span class=&quot;z-meta z-mapping z-key z-js&quot;&gt;cnvs_size&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-js&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;cnvs_size&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;        &lt;span class=&quot;z-meta z-mapping z-key z-js&quot;&gt;no_hit_color&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-js&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;no_hit_color&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;        &lt;span class=&quot;z-meta z-mapping z-key z-js&quot;&gt;hit_color&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-js&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;hit_color&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;        &lt;span class=&quot;z-meta z-mapping z-key z-js&quot;&gt;obj_start&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-js&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;obj_start&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;        &lt;span class=&quot;z-meta z-mapping z-key z-js&quot;&gt;obj_cnt&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-js&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;obj_cnt&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;        &lt;span class=&quot;z-meta z-mapping z-key z-js&quot;&gt;obj_size&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-js&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;obj_size&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;        &lt;span class=&quot;z-meta z-mapping z-key z-js&quot;&gt;x_offset&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-js&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;x_offset&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;        &lt;span class=&quot;z-meta z-mapping z-key z-js&quot;&gt;y_offset&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-js&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;y_offset&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;        &lt;span class=&quot;z-meta z-mapping z-key z-js&quot;&gt;xv_offset&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-js&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;xv_offset&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;        &lt;span class=&quot;z-meta z-mapping z-key z-js&quot;&gt;yv_offset&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-js&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;yv_offset&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;      &lt;span class=&quot;z-punctuation z-section z-block z-end z-js&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-js&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-js&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;image_data&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-word z-new z-js&quot;&gt;new&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-constructor z-js&quot;&gt; &lt;span class=&quot;z-variable z-type z-js&quot;&gt;ImageData&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-constructor z-js&quot;&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;        &lt;span class=&quot;z-keyword z-operator z-word z-new z-js&quot;&gt;new&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-constructor z-js&quot;&gt; &lt;span class=&quot;z-variable z-type z-js&quot;&gt;Uint8ClampedArray&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-object z-js&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;obj_start&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;cnvs_size&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;cnvs_size&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-constructor z-js&quot;&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;stride_i32&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;stride_bytes&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-js&quot;&gt;&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-meta z-for z-js&quot;&gt;&lt;span class=&quot;z-keyword z-control z-loop z-for z-js&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-js&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;i&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-expression z-js&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;i&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-relational z-js&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;obj_cnt&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-js&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;stride_i32&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-expression z-js&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;i&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-augmented z-js&quot;&gt;+=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;stride_i32&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-js&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-for z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;      &lt;span class=&quot;z-storage z-type z-js&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;temp&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-method z-js&quot;&gt;&lt;span class=&quot;z-support z-constant z-builtin z-js&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-builtin z-js&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-method z-js&quot;&gt;&lt;span class=&quot;z-support z-constant z-builtin z-js&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-builtin z-js&quot;&gt;random&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-js&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;cnvs_size&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-for z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;      &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;mem_i32&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-js&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;obj_start_32&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-js&quot;&gt;+&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;i&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-js&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;temp&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-for z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-for z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;      &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;temp&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-method z-js&quot;&gt;&lt;span class=&quot;z-support z-constant z-builtin z-js&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-builtin z-js&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-method z-js&quot;&gt;&lt;span class=&quot;z-support z-constant z-builtin z-js&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-builtin z-js&quot;&gt;random&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-js&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;cnvs_size&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-for z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;      &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;mem_i32&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-js&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;obj_start_32&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-js&quot;&gt;+&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;i&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-js&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-js&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;temp&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-for z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-for z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;      &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;temp&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-method z-js&quot;&gt;&lt;span class=&quot;z-support z-constant z-builtin z-js&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-builtin z-js&quot;&gt;round&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-method z-js&quot;&gt;&lt;span class=&quot;z-support z-constant z-builtin z-js&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-builtin z-js&quot;&gt;random&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-js&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-js&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;2&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-for z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;      &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;mem_i32&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-js&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;obj_start_32&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-js&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;i&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-js&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-js&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;temp&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-for z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-for z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;      &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;temp&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-method z-js&quot;&gt;&lt;span class=&quot;z-support z-constant z-builtin z-js&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-builtin z-js&quot;&gt;round&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-method z-js&quot;&gt;&lt;span class=&quot;z-support z-constant z-builtin z-js&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-builtin z-js&quot;&gt;random&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-js&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-js&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;2&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-for z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;      &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;mem_i32&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-js&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;obj_start_32&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-js&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;i&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-js&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-js&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;temp&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-for z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-js&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-storage z-type z-js&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;animation_wasm&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-declaration z-js&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-js&quot;&gt;function&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-js&quot;&gt;animate&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt; &lt;span class=&quot;z-meta z-block z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-js&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;      &lt;span class=&quot;z-meta z-function-call z-js&quot;&gt;&lt;span class=&quot;z-variable z-function z-js&quot;&gt;animation_wasm&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;      &lt;span class=&quot;z-meta z-function-call z-method z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-function z-js&quot;&gt;putImageData&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;image_data&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-js&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;      &lt;span class=&quot;z-meta z-function-call z-js&quot;&gt;&lt;span class=&quot;z-variable z-function z-js&quot;&gt;requestAnimationFrame&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;animate&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-js&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;    &lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-declaration z-js&quot;&gt;&lt;span class=&quot;z-storage z-type z-js&quot;&gt;async&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-arrow z-js&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt; &lt;span class=&quot;z-meta z-block z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-js&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;      &lt;span class=&quot;z-storage z-type z-js&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-binding z-name z-js&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;obj&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-await z-js&quot;&gt;await&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-method z-js&quot;&gt;&lt;span class=&quot;z-support z-class z-js&quot;&gt;WebAssembly&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-function z-js&quot;&gt;instantiateStreaming&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-js&quot;&gt;&lt;span class=&quot;z-variable z-function z-js&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-js&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-js&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;collide.wasm&lt;span class=&quot;z-punctuation z-definition z-string z-end z-js&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-js&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;importObject&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;      &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;animation_wasm&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-js&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-object z-js&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-object z-js&quot;&gt;exports&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-js&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-object z-js&quot;&gt;main&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;      &lt;span class=&quot;z-meta z-function-call z-js&quot;&gt;&lt;span class=&quot;z-variable z-function z-js&quot;&gt;requestAnimationFrame&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-js&quot;&gt;animate&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-meta z-function z-js&quot;&gt;&lt;span class=&quot;z-meta z-block z-js&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-js&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-js&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-js&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-js&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-js&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-source z-js z-embedded z-html&quot;&gt;&lt;span class=&quot;z-source z-js&quot;&gt;  &lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-script z-end z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-script z-html&quot;&gt;script&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-structure z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-structure z-any z-html&quot;&gt;body&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-structure z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-structure z-any z-html&quot;&gt;html&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;canvasのframeを描画するたびに、WASM側の&lt;code&gt;main&lt;&#x2F;code&gt;を呼び出します。&lt;br &#x2F;&gt;
WASM側は&lt;code&gt;main&lt;&#x2F;code&gt;の中で二つのことを行います。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;objectの状態変更&lt;&#x2F;li&gt;
&lt;li&gt;canvasの描画領域の更新&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;WATは以下のようになります。&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(module
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (global $cnvs_size (import &amp;quot;env&amp;quot; &amp;quot;cnvs_size&amp;quot;) i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (global $no_hit_color (import &amp;quot;env&amp;quot; &amp;quot;no_hit_color&amp;quot;) i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (global $hit_color (import &amp;quot;env&amp;quot; &amp;quot;hit_color&amp;quot;) i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (global $obj_start (import &amp;quot;env&amp;quot; &amp;quot;obj_start&amp;quot;) i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (global $obj_size (import &amp;quot;env&amp;quot; &amp;quot;obj_size&amp;quot;) i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (global $obj_cnt (import &amp;quot;env&amp;quot; &amp;quot;obj_cnt&amp;quot;) i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (global $x_offset (import &amp;quot;env&amp;quot; &amp;quot;x_offset&amp;quot;) i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (global $y_offset (import &amp;quot;env&amp;quot; &amp;quot;y_offset&amp;quot;) i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (global $xv_offset (import &amp;quot;env&amp;quot; &amp;quot;xv_offset&amp;quot;) i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (global $yv_offset (import &amp;quot;env&amp;quot; &amp;quot;yv_offset&amp;quot;) i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (import &amp;quot;env&amp;quot; &amp;quot;buffer&amp;quot; (memory 80))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (func $clear_canvas
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $i i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $pixel_bytes i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        global.get $cnvs_size
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        global.get $cnvs_size
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.mul
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.const 4
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.mul
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.set $pixel_bytes;; $pixel_bytes = $width * $height * 4
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (loop $pixel_loop
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (i32.store (local.get $i) (i32.const 0xff_00_00_00))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (i32.add (local.get $i) (i32.const 4))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.set $i ;; $i += 4
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (i32.lt_u (local.get $i) (local.get $pixel_bytes))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            br_if $pixel_loop
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (func $abs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (param $value i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (result i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (i32.lt_s (local.get $value) (i32.const 0))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        if
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.const 0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.get $value
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.sub
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            return
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        end
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.get $value
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (func $set_pixel
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (param $x i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (param $y i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (param $c i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (i32.ge_u (local.get $x) (global.get $cnvs_size))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        if
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            return
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        end
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (i32.ge_u (local.get $y) (global.get $cnvs_size))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        if
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            return
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        end
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.get $y
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        global.get $cnvs_size
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.mul
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.get $x
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.add
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.const 4
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.mul
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.get $c
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.store
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (func $draw_obj
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (param $x i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (param $y i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (param $c i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $max_x i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $max_y i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $xi i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $yi i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.get $x
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.tee $xi
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        global.get $obj_size
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.add
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.set $max_x
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.get $y
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.tee $yi
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        global.get $obj_size
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.add
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.set $max_y
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (block $break (loop $draw_loop
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.get $xi
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.get $yi
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.get $c
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            call $set_pixel
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.get $xi
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.const 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.add
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.tee $xi
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.get $max_x
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.ge_u
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            if
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.get $x
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.set $xi
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.get $yi
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                i32.const 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                i32.add
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.tee $yi
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.get $max_y
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                i32.ge_u
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                br_if $break
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            end
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            br $draw_loop
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        ))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (func $set_obj_attr
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (param $obj_number i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (param $attr_offset i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (param $value i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.get $obj_number
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.const 16
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.mul
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        global.get $obj_start
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.add
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.get $attr_offset
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.add
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.get $value
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.store
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (func $get_obj_attr
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (param $obj_number i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (param $attr_offset i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (result i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.get $obj_number
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.const 16
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.mul
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        global.get $obj_start
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.add
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.get $attr_offset
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.add
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.load
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (func $main (export &amp;quot;main&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $i i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $j i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $outer_ptr i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $inner_ptr i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $x1 i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $x2 i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $y1 i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $y2 i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $xdist i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $ydist i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $i_hit i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $xv i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $yv i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (call $clear_canvas)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (loop $move_loop
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (call $get_obj_attr (local.get $i) (global.get $x_offset))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.set $x1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (call $get_obj_attr (local.get $i) (global.get $y_offset))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.set $y1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (call $get_obj_attr (local.get $i) (global.get $xv_offset))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.set $xv
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (call $get_obj_attr (local.get $i) (global.get $yv_offset))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.set $yv
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (i32.add (local.get $xv) (local.get $x1))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.const 0x1ff ;; 511
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.and
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.set $x1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (i32.add (local.get $yv) (local.get $y1))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.const 0x1ff ;; 511
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.and
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.set $y1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (call $set_obj_attr
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (local.get $i)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (global.get $x_offset)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (local.get $x1)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (call $set_obj_attr
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (local.get $i)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (global.get $y_offset)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (local.get $y1)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.get $i
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.const 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.add
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.tee $i
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            global.get $obj_cnt
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.lt_u
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            if
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                br $move_loop
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            end
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.const 0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.set $i
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (loop $outer_loop (block $outer_break
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.const 0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.tee $j
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.set $i_hit
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (call $get_obj_attr (local.get $i) (global.get $x_offset))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.set $x1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (call $get_obj_attr (local.get $i) (global.get $y_offset))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.set $y1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (loop $inner_loop (block $inner_break
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.get $i
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.get $j
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                i32.eq
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                if
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    local.get $j
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    i32.const 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    i32.add
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    local.set $j
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                end
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.get $j
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                global.get $obj_cnt
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                i32.ge_u
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                if
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    br $inner_break
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                end
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (call $get_obj_attr (local.get $j) (global.get $x_offset))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.set $x2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (i32.sub (local.get $x1) (local.get $x2))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                call $abs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.tee $xdist
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                global.get $obj_size
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                i32.ge_u
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                ;; 衝突していない
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                if
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    local.get $j
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    i32.const 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    i32.add
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    local.set $j
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    br $inner_loop
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                end
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (call $get_obj_attr (local.get $j) (global.get $y_offset))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.set $y2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (i32.sub (local.get $y1) (local.get $y2))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                call $abs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.tee $ydist
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                global.get $obj_size
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                i32.ge_u
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                ;; 衝突していない
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                if
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    local.get $j
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    i32.const 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    i32.add
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    local.set $j
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    br $inner_loop
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                end
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                i32.const 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.set $i_hit
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            ))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.get $i_hit
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.const 0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.eq
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            if
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (call $draw_obj
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    (local.get $x1) (local.get $y1) (global.get $no_hit_color))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            else
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (call $draw_obj
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    (local.get $x1) (local.get $y1) (global.get $hit_color))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            end
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.get $i
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.const 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.add
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.tee $i
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            global.get $obj_cnt
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.lt_u
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            if
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                br $outer_loop
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            end
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        ))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;長いですが、最後の&lt;code&gt;main&lt;&#x2F;code&gt;から見ていくととても単純な処理をしているだけなのがわかります。&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (func $main (export &amp;quot;main&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $i i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $j i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $x1 i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $x2 i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $y1 i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $y2 i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $xdist i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $ydist i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $i_hit i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $xv i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $yv i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (call $clear_canvas)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;まず、必要なlocal変数を宣言します。&lt;br &#x2F;&gt;
Frame毎に各オブジェクトの状態を更新するので、&lt;code&gt;$i&lt;&#x2F;code&gt;は現在の処理対象のオブジェクトのindexです。&lt;code&gt;$j&lt;&#x2F;code&gt;は各オブジェクトとの衝突判定をするためのinner loopのindexです。&lt;br &#x2F;&gt;
最初に&lt;code&gt;$clear_canvas&lt;&#x2F;code&gt;を呼び出してレンダリング領域をリセットします。&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    (func $clear_canvas
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $i i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (local $pixel_bytes i32)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        global.get $cnvs_size
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        global.get $cnvs_size
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.mul
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.const 4
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.mul
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.set $pixel_bytes;; $pixel_bytes = $width * $height * 4
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (loop $pixel_loop
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (i32.store (local.get $i) (i32.const 0xff_00_00_00))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (i32.add (local.get $i) (i32.const 4))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.set $i ;; $i += 4
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (i32.lt_u (local.get $i) (local.get $pixel_bytes))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            br_if $pixel_loop
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;1pixel 4byteなので4byteずつインクリメントしながら、黒色(&lt;code&gt;0xff_00_00_00&lt;&#x2F;code&gt;)にしていきます。&lt;br &#x2F;&gt;
次に&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (loop $move_loop
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (call $get_obj_attr (local.get $i) (global.get $x_offset))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.set $x1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (call $get_obj_attr (local.get $i) (global.get $y_offset))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.set $y1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (call $get_obj_attr (local.get $i) (global.get $xv_offset))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.set $xv
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (call $get_obj_attr (local.get $i) (global.get $yv_offset))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.set $yv
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (i32.add (local.get $xv) (local.get $x1))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.const 0x1ff ;; 511
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.and
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.set $x1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (i32.add (local.get $yv) (local.get $y1))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.const 0x1ff ;; 511
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.and
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.set $y1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (call $set_obj_attr
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (local.get $i)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (global.get $x_offset)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (local.get $x1)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (call $set_obj_attr
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (local.get $i)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (global.get $y_offset)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (local.get $y1)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.get $i
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.const 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.add
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.tee $i
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            global.get $obj_cnt
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.lt_u
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            if
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                br $move_loop
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            end
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;処理対象のオブジェクトの&lt;code&gt;x,y,xv,xy&lt;&#x2F;code&gt;を取得して、それぞれの速度を加算したのち、メモリを更新します。&lt;br &#x2F;&gt;
&lt;code&gt;0x1ff&lt;&#x2F;code&gt;とandをとることで、描画領域をはみでたオブジェクトの位置がリセットされるようになっています。&lt;br &#x2F;&gt;
ビット演算でこんなことができるのかと思いました。本書ではビット演算についても丁寧に解説されております。&lt;br &#x2F;&gt;
ここまでで、frameの描画毎にオブジェクトの位置情報が更新されることがわかりました。&lt;br &#x2F;&gt;
最後に、オブジェクトの衝突判定を行い、描画領域を更新します。&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        i32.const 0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        local.set $i
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        (loop $outer_loop (block $outer_break
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.const 0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.tee $j
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.set $i_hit
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (call $get_obj_attr (local.get $i) (global.get $x_offset))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.set $x1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (call $get_obj_attr (local.get $i) (global.get $y_offset))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.set $y1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            (loop $inner_loop (block $inner_break
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.get $i
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.get $j
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                i32.eq
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                if
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    local.get $j
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    i32.const 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    i32.add
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    local.set $j
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                end
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.get $j
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                global.get $obj_cnt
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                i32.ge_u
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                if
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    br $inner_break
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                end
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (call $get_obj_attr (local.get $j) (global.get $x_offset))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.set $x2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (i32.sub (local.get $x1) (local.get $x2))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                call $abs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.tee $xdist
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                global.get $obj_size
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                i32.ge_u
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                ;; 衝突していない
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                if
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    local.get $j
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    i32.const 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    i32.add
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    local.set $j
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    br $inner_loop
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                end
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (call $get_obj_attr (local.get $j) (global.get $y_offset))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.set $y2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (i32.sub (local.get $y1) (local.get $y2))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                call $abs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.tee $ydist
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                global.get $obj_size
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                i32.ge_u
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                ;; 衝突していない
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                if
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    local.get $j
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    i32.const 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    i32.add
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    local.set $j
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    br $inner_loop
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                end
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                i32.const 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                local.set $i_hit
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            ))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.get $i_hit
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.const 0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.eq
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            if
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (call $draw_obj
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    (local.get $x1) (local.get $y1) (global.get $no_hit_color))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            else
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                (call $draw_obj
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                    (local.get $x1) (local.get $y1) (global.get $hit_color))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            end
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.get $i
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.const 1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.add
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            local.tee $i
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            global.get $obj_cnt
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            i32.lt_u
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            if
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                br $outer_loop
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            end
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        ))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;オブジェクトの衝突判定は&lt;code&gt;|x1 - x2|&lt;&#x2F;code&gt; &amp;lt; &lt;code&gt;object_size&lt;&#x2F;code&gt; かつ &lt;code&gt;|y1 - y2| &amp;lt; object_size&lt;&#x2F;code&gt;で判定します。
WATをWASMに変換して&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;node&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; server.js&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;を実行して、&lt;code&gt;localhost:8080&#x2F;collide.html&lt;&#x2F;code&gt;にアクセスしてみると以下のように描画されました🎉&lt;&#x2F;p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;div class=&quot;fig-images-row&quot;&gt;
    
    &lt;img 
      src=&quot;images&amp;#x2F;wasm_object_collision.gif&quot; 
      alt=&quot;&quot;, 
       
      
    &gt;
    
  &lt;&#x2F;div&gt;
  &lt;figcaption&gt;完成&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h2 id=&quot;hurerarenakatutakoto&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hurerarenakatutakoto&quot; aria-label=&quot;Anchor link for: hurerarenakatutakoto&quot;&gt;ふれられなかったこと&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;本記事ではふれられませんでしたが、本書ではさらにここからWASMのパフォーマンスチューニングやデバッグをおこなうための実用的な知識が述べられております。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="ja">
        <title>📗 ソフトウェアアーキテクチャの基礎を読んだ感想</title>
        <published>2022-06-18T00:00:00+00:00</published>
        <updated>2022-06-18T00:00:00+00:00</updated>
        <author>
          <name>ymgyt</name>
        </author>
        <link rel="alternate" href="https://blog.ymgyt.io/entry/fundamentals-of-software-architecture/" type="text/html"/>
        <id>https://blog.ymgyt.io/entry/fundamentals-of-software-architecture/</id>
        
        <content type="html">&lt;h2 id=&quot;du-ndaben&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#du-ndaben&quot; aria-label=&quot;Anchor link for: du-ndaben&quot;&gt;読んだ本&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;div class=&quot;fig-images-row&quot;&gt;
    
    &lt;img 
      src=&quot;images&amp;#x2F;fundamentals_of_software_architecture_book.jpeg&quot; 
      alt=&quot;&quot;, 
       
      
    &gt;
    
  &lt;&#x2F;div&gt;
  &lt;figcaption&gt;Mark Richards, Neal Ford 著, 島田 浩二 訳&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.oreilly.co.jp&#x2F;books&#x2F;9784873119823&#x2F;&quot;&gt;ソフトウェアアーキテクチャの基礎&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.co.jp&#x2F;dp&#x2F;B0849MPK73&#x2F;&quot;&gt;Fundamentals of Software Architecture&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;日本語版は紙、英語版はKindleで読みました。Kindle版は図がカラーで見れます。&lt;br &#x2F;&gt;
本書を読んだ感想を書いていきます。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chapter-1-introduction&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-1-introduction&quot; aria-label=&quot;Anchor link for: chapter-1-introduction&quot;&gt;Chapter 1. Introduction&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;software-architecturetoha&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#software-architecturetoha&quot; aria-label=&quot;Anchor link for: software-architecturetoha&quot;&gt;Software Architectureとは&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Software Architectureの定義が業界でよく定まっているわけではないところから話が始まります。
その理由として、Microserviceような新しいArchitectの台頭によってsoftware architectの役割が拡大していることが挙げられています。 また、本書はsoftware architectを一度作ればその後は変更の対象にならない静的なものではなく常に漸進的に変化していく動的なものと位置付けています。&lt;&#x2F;p&gt;
&lt;p&gt;本書ではsoftware architectureとは以下の四つからなるものと定義します。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;structure of the system&lt;&#x2F;li&gt;
&lt;li&gt;architecture characteristics(&quot;-ilities&quot;)&lt;&#x2F;li&gt;
&lt;li&gt;architecture decisions&lt;&#x2F;li&gt;
&lt;li&gt;design principles&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;structure of the systemとは実装されているarchitecture styleの種類を指します。microserviceだったりlayered architecture。system architectureについて説明する際にmicroserviceですというだけでは不十分で、system architectureはより広範な概念。自分はarchitectureとは要するにAWS(Cloud)構成図 +CI&#x2F;CD + Applicationのmodule構成くらいの理解でしたのでこの後に続くarchitecture characteristics, architecture decisions, design principlesについては非常にわくわくしました。&lt;&#x2F;p&gt;
&lt;p&gt;まずarchitecture characteristicsについてですが具体的にはsystemが備えなければならない以下の特性からなります。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Availability(可用性)&lt;&#x2F;li&gt;
&lt;li&gt;Reliability(信頼性)&lt;&#x2F;li&gt;
&lt;li&gt;Testability(テスト容易性)&lt;&#x2F;li&gt;
&lt;li&gt;Scalability&lt;&#x2F;li&gt;
&lt;li&gt;Security&lt;&#x2F;li&gt;
&lt;li&gt;Agility&lt;&#x2F;li&gt;
&lt;li&gt;Fault Tolerance(耐障害性)&lt;&#x2F;li&gt;
&lt;li&gt;Elasticity(弾力性)&lt;&#x2F;li&gt;
&lt;li&gt;Recoverability(回復性)&lt;&#x2F;li&gt;
&lt;li&gt;Performance&lt;&#x2F;li&gt;
&lt;li&gt;Deployability(デプロイ容易性)&lt;&#x2F;li&gt;
&lt;li&gt;Learnability(学習容易性)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;-ility&lt;&#x2F;code&gt;で終わることが多いので単にilityとも呼ぶそうです(どうにかしてPerformancityとかを作りたいですね)。 Architecture characteristicについてはchapter 4,5,6,7で説明されます。&lt;&#x2F;p&gt;
&lt;p&gt;次にarchitecture decisionsですが&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Architecture decisions define the rules for how a system should be constructed&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Richards, Mark; Ford, Neal. Fundamentals of Software Architecture . O&#x27;Reilly Media. Kindle Edition.&lt;&#x2F;p&gt;
&lt;p&gt;とされており、具体的にはlayered architectureの場合にDB層にアクセスできるのはこの層といったルールが挙げられています。開発チームに対するなんらかの指針を提供するものという理解しました。&lt;&#x2F;p&gt;
&lt;p&gt;最後のdesign principlesは、ガイドラインのこと。強制力の点でarchitect decisionsよりより緩やかで、prefer xxxくらいの意味でしょうか。具体例としてはmicroservices間では非同期通信をservice間の基本通信方式として採用する例が挙げられております(RESTやgRPCを禁止するわけではない)。&lt;&#x2F;p&gt;
&lt;p&gt;ここまで自分なりにまとめると
Software architecture = structure of system + ilities + rule and guideline of implementation
という理解に至りました。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;software-architectniqi-dai-sarerukoto&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#software-architectniqi-dai-sarerukoto&quot; aria-label=&quot;Anchor link for: software-architectniqi-dai-sarerukoto&quot;&gt;Software Architectに期待されること&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Software architectには以下の8つが期待されるので、理解し実践することがarchitectとしての役割を果たす第一歩になる。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Make architecture decisions(アーキテクチャ決定を下す)&lt;&#x2F;li&gt;
&lt;li&gt;Continually analyze the architecture(アーキテクチャを継続的に分析する)&lt;&#x2F;li&gt;
&lt;li&gt;Keep current with latest trends(最新のトレンドを把握し続ける)&lt;&#x2F;li&gt;
&lt;li&gt;Ensure compliance with decisions(決定の順守を徹底する)&lt;&#x2F;li&gt;
&lt;li&gt;Diverse exposure and experience(多様なものに触れ、経験している)&lt;&#x2F;li&gt;
&lt;li&gt;Have business domain knowledge(事業ドメインの知識を持っている)&lt;&#x2F;li&gt;
&lt;li&gt;Possess interpersonal skills(対人スキルを持っている)&lt;&#x2F;li&gt;
&lt;li&gt;Understand and navigate politics(政治を理解し、かじ取りする)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;これらの期待に答え続けている人がいたら会社は離さないだろうなと思います。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;make-architecture-decisions-akitekutiyajue-ding-woxia-su&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#make-architecture-decisions-akitekutiyajue-ding-woxia-su&quot; aria-label=&quot;Anchor link for: make-architecture-decisions-akitekutiyajue-ding-woxia-su&quot;&gt;Make Architecture Decisions(アーキテクチャ決定を下す)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Software architectureの構成要素であるarchitecture decisionsとdesign principlesを定義することが期待される。これはsoftware architectureの定義から当然期待されることに思えます。&lt;br &#x2F;&gt;
&quot;guide&quot;であることが重要らしく、具体例としてReact.jsまで特定するのではなく、AngularやVue.jsといった選択肢を残すようにreactive-bases frameworkの使用という粒度で指示することがあげられていました。&lt;br &#x2F;&gt;
ただこの線引きはility(scalability,performance,...)の観点から特定の技術を指定せざるを得ない場面もあり難しいとされています。&lt;br &#x2F;&gt;
個人的にはReactかVueの選択は採用やその後のメンテナンス性につながる大きい話だと思いましたが、あくまで開発チームに裁量を残すことが大事なのかもしれません。
Architecture decisionsについては19章で詳しくふれられています。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;continually-analyze-the-architecture-akitekutiyawoji-sok-de-nifen-xi-suru&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#continually-analyze-the-architecture-akitekutiyawoji-sok-de-nifen-xi-suru&quot; aria-label=&quot;Anchor link for: continually-analyze-the-architecture-akitekutiyawoji-sok-de-nifen-xi-suru&quot;&gt;Continually Analyze the Architecture(アーキテクチャを継続的に分析する)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;architectにはarchitectとcurrent technology environmentを継続的に分析して改善案を提案することが期待される。
大胆に訳すと、今のarchitectがどれだけイケてるかについて継続的に評価することが期待されている。&lt;br &#x2F;&gt;
コードや設計が変化していく中でリリースまでのアジリティが落ちないようにする。
この意識の必要性は求人票に掲載されることはないという表現がおもしろかったです。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;keep-current-with-latest-trends-zui-xin-notorendowoba-wo-sisok-keru&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#keep-current-with-latest-trends-zui-xin-notorendowoba-wo-sisok-keru&quot; aria-label=&quot;Anchor link for: keep-current-with-latest-trends-zui-xin-notorendowoba-wo-sisok-keru&quot;&gt;Keep Current with Latest Trends(最新のトレンドを把握し続ける)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;どの職業でも多かれ少なかれ必要なことだと思いますがarchitectが下す判断は変更が難しく影響が長期的になりがちなので特に重要でになってくる。
できる方々は自然とされていると思われますが本書はこの点の重要性をきちんと明言し、24章でさまざまな方法を紹介してくれております。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ensure-compliance-with-decisions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ensure-compliance-with-decisions&quot; aria-label=&quot;Anchor link for: ensure-compliance-with-decisions&quot;&gt;Ensure Compliance with Decisions&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;これはarchitecture decisions,design principlesとして決まった実装の制約と方針が実際の開発で守られているかを確認することを意味します。&lt;br &#x2F;&gt;
一度決めて、ドキュメントに書いたから終わりでなく実際に決定がどの程度有効になっているかまで継続的に確認するプロセスは重要だと思うので決まったことが守られているかを判断する方法まで決めることは自分も取り入れていきたいです。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;diverse-exposure-and-experience&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#diverse-exposure-and-experience&quot; aria-label=&quot;Anchor link for: diverse-exposure-and-experience&quot;&gt;Diverse Exposure and Experience&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Architectは、様々なframework,platform,environmentに触れていることが期待される。&lt;br &#x2F;&gt;
Expertであることまでは要求されませんが、少なくとも様々な技術に慣れ親しんでいるという期待です。自分のcomport zone意外の技術に触れていくことを推奨しています。&lt;br &#x2F;&gt;
これは急にできるようになるものでもないので日々意識的に取り組んでいきたいです。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;have-business-domain-knowledge&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#have-business-domain-knowledge&quot; aria-label=&quot;Anchor link for: have-business-domain-knowledge&quot;&gt;Have Business Domain Knowledge&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;事業ドメインも理解できているという期待。
この点はDDDの文脈でも強調されているのでわりと皆さんの総意なのではと思います。事業ドメインを理解できていないとステークホルダー達とうまく連携できず信頼をえられない。
結局はいいarchitectはビジネス要件を効果的に満たすもの。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;possess-interpersonal-skills&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#possess-interpersonal-skills&quot; aria-label=&quot;Anchor link for: possess-interpersonal-skills&quot;&gt;Possess Interpersonal Skills&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;困難な期待であることは認めつつも、architectには卓越したリーダーシップと対人スキルが期待される。経験則的に技術的な問題に見えても実は人の問題であることが多く、またarchitectにはarchitectureの実装を通じて開発チームをリードすることが期待されているからだとします。&lt;br &#x2F;&gt;
当たり前かもしれませんがarchitectに期待されることはどれもすぐに身につけられるようなものでないなと思います。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;understand-and-navigate-politics&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#understand-and-navigate-politics&quot; aria-label=&quot;Anchor link for: understand-and-navigate-politics&quot;&gt;Understand and Navigate Politics&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Architectには企業の政治的風土(political climate of the enterprise)を理解し、政治をnavigateすることが求められる。
開発者が下すcodeの構造に関する決定と違ってarchitectが下す決定はコストや作業量の増加といった面から反発をよぶ(be challenged)。なのでarchitectはproduct owners, project managers, business stakeholders, developersを説得する必要がある。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, an architect, now able to finally be able to make broad and important decisions, must justify and fight for almost every one of those decisions.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Richards, Mark; Ford, Neal. Fundamentals of Software Architecture . O&#x27;Reilly Media. Kindle Edition.&lt;&#x2F;p&gt;
&lt;p&gt;自分がarchitectureを決めたら今度は交渉して実現しきるまでが必要なので&quot;fight&quot;する覚悟までもつ必要がある。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;architecttonoguan-lian-ling-yu&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#architecttonoguan-lian-ling-yu&quot; aria-label=&quot;Anchor link for: architecttonoguan-lian-ling-yu&quot;&gt;Architectとの関連領域&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;開発と運用が一体化していく流れによってarchitectの関連領域が拡大していっている。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;engineering-practices&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#engineering-practices&quot; aria-label=&quot;Anchor link for: engineering-practices&quot;&gt;Engineering Practices&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Microservicesは自動テスト、デプロイを前提にしているのでこれをテストがない状態であったり手動で行えば成功しない。問題領域に適したarchitectがあるようにarchitectに適したengineering practiceがある。なのでtech leadでもあることが多いarchitectはengineering practiceについても慎重に検討する必要がある。&lt;&#x2F;p&gt;
&lt;p&gt;このほか著者がソフトウェア開発が他の工学分野ほどに成熟していないという問題意識がおもしろかったです。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;operations-devops&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#operations-devops&quot; aria-label=&quot;Anchor link for: operations-devops&quot;&gt;Operations&#x2F;DevOps&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;DevOpsの登場によりコスト削減のために外部に委託されがちだった運用形態が見直され、microservicesにみられるようなarchitectと運用がチームを組む体制が生まれてきた。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;process&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#process&quot; aria-label=&quot;Anchor link for: process&quot;&gt;Process&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;ソフトウェア開発プロセスはarchitectと直接関係がないとする考えもあるが、開発プロセスはarchitectに多くの影響を与える。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;data&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#data&quot; aria-label=&quot;Anchor link for: data&quot;&gt;Data&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Codeとdataは共生関係(symbiotic relationship)にあるので外部ストレージへの依存を無視することはできない。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;laws-of-software-architecture&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#laws-of-software-architecture&quot; aria-label=&quot;Anchor link for: laws-of-software-architecture&quot;&gt;Laws of Software Architecture&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Everything in software architecture is a trade-off.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Richards, Mark; Ford, Neal. Fundamentals of Software Architecture . O&#x27;Reilly Media. Kindle Edition.&lt;&#x2F;p&gt;
&lt;p&gt;設計を変更したり作成したりする際にまず思い出せるようになりたいと思います。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions&quot; aria-label=&quot;Anchor link for: self-assessment-questions&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;What are the four dimensions that define software architecture?(ソフトウェアアーキテクチャを定義する4つの側面とは何か)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;structure of the system&lt;&#x2F;li&gt;
&lt;li&gt;architecture characteristics(&quot;-ilities&quot;)&lt;&#x2F;li&gt;
&lt;li&gt;architecture decisions&lt;&#x2F;li&gt;
&lt;li&gt;design principles&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;what-is-the-difference-between-an-architecture-decision-and-a-design-principle-akitekutiyajue-ding-toshe-ji-zhi-zhen-nowei-iwoshuo-ming-seyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-difference-between-an-architecture-decision-and-a-design-principle-akitekutiyajue-ding-toshe-ji-zhi-zhen-nowei-iwoshuo-ming-seyo&quot; aria-label=&quot;Anchor link for: what-is-the-difference-between-an-architecture-decision-and-a-design-principle-akitekutiyajue-ding-toshe-ji-zhi-zhen-nowei-iwoshuo-ming-seyo&quot;&gt;What is the difference between an architecture decision and a design principle?(アーキテクチャ決定と設計指針の違いを説明せよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;開発チームに対する強制力。architecture decisionはルール(強制)でdesign principleはガイドライン(適切な理由があれば従わなくて良い)。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;list-the-eight-core-expectations-of-a-software-architect-sohutoueaakitekutoheno8tunoqi-dai-woju-geyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#list-the-eight-core-expectations-of-a-software-architect-sohutoueaakitekutoheno8tunoqi-dai-woju-geyo&quot; aria-label=&quot;Anchor link for: list-the-eight-core-expectations-of-a-software-architect-sohutoueaakitekutoheno8tunoqi-dai-woju-geyo&quot;&gt;List the eight core expectations of a software architect.(ソフトウェアアーキテクトへの8つの期待を挙げよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;Make architecture decisions(アーキテクチャ決定を下す)&lt;&#x2F;li&gt;
&lt;li&gt;Continually analyze the architecture(アーキテクチャを継続的に分析する)&lt;&#x2F;li&gt;
&lt;li&gt;Keep current with latest trends(最新のトレンドを把握し続ける)&lt;&#x2F;li&gt;
&lt;li&gt;Ensure compliance with decisions(決定の順守を徹底する)&lt;&#x2F;li&gt;
&lt;li&gt;Diverse exposure and experience(多様なものに触れ、経験している)&lt;&#x2F;li&gt;
&lt;li&gt;Have business domain knowledge(事業ドメインの知識を持っている)&lt;&#x2F;li&gt;
&lt;li&gt;Possess interpersonal skills(対人スキルを持っている)&lt;&#x2F;li&gt;
&lt;li&gt;Understand and navigate politics(政治を理解し、かじ取りする)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;what-is-the-first-law-of-software-architecture-sohutoueaakitekutiyanodi-yi-fa-ze-tohahe-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-first-law-of-software-architecture-sohutoueaakitekutiyanodi-yi-fa-ze-tohahe-ka&quot; aria-label=&quot;Anchor link for: what-is-the-first-law-of-software-architecture-sohutoueaakitekutiyanodi-yi-fa-ze-tohahe-ka&quot;&gt;What is the First Law of Software Architecture?(ソフトウェアアーキテクチャの第一法則とは何か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;Everything is a trade-off.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;part-i-foundations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-i-foundations&quot; aria-label=&quot;Anchor link for: part-i-foundations&quot;&gt;Part Ⅰ. Foundations&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Architectureにおけるトレードオフを理解するために、component, modularity, coupling, connascenceといった概念を理解する必要がある。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chapter-2-architectural-thinking&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-2-architectural-thinking&quot; aria-label=&quot;Anchor link for: chapter-2-architectural-thinking&quot;&gt;Chapter 2. Architectural Thinking&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Architectらしく考えるためには4つの視点がある。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Architectと設計の違いを理解し、開発チームとの協働の仕方を知ること&lt;&#x2F;li&gt;
&lt;li&gt;技術的な深さを維持しながらも解決策をみいだせるような技術的な幅をもつこと&lt;&#x2F;li&gt;
&lt;li&gt;ソリューションや技術のトレードオフを理解し、分析し、調停(reconciling)できること&lt;&#x2F;li&gt;
&lt;li&gt;Business driver(ビジネスを伸ばすための要素)をarchitecture concernsに反映すること&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;architecture-versus-design&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#architecture-versus-design&quot; aria-label=&quot;Anchor link for: architecture-versus-design&quot;&gt;Architecture Versus Design&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Architectがarchitecture characteristic,component構造を決めて、開発者がclass,UI設計、codeを担当する。というような境界は存在しないという主張です。結局はどちらもsoftware projectを構成するもので常に同期されている必要がある。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;technical-breadth&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#technical-breadth&quot; aria-label=&quot;Anchor link for: technical-breadth&quot;&gt;Technical Breadth&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;まず技術的な知識を以下の3つに分類します。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;わかっていること&lt;&#x2F;li&gt;
&lt;li&gt;わかっていないとわかっていること&lt;&#x2F;li&gt;
&lt;li&gt;わかっていないとわかっていないこと&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;わかっていること=専門性であり常に変化していくので時間を投資して維持する必要があります。またわかっていることは技術的な深さになります。開発者に求められるものです。
一方でわかっていること+わかっていないとわかっていることは技術的な幅となります。Architectにはこの幅が求められる。Architectに求められる技術的な知識の質の違いを理解することにつまづくことで、専門性を維持しようとする幅を広げすぎて疲弊したり、専門性を陳腐化させてしまったりしてしまうことがある。
Architectへと役割を移そうとする開発者は知識の獲得方法を変える必要があると提言されています。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;analyzing-trade-offs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#analyzing-trade-offs&quot; aria-label=&quot;Anchor link for: analyzing-trade-offs&quot;&gt;Analyzing Trade-Offs&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;トレードオフを知ることの具体例として、オークションシステムを一つのtopicを用いるPub&#x2F;Sub形式か、Consumerごとにqueueを用意する方式どちらで実装するかを検討します。&lt;br &#x2F;&gt;
挙げられているプラス&#x2F;マイナス面とても参考になりました。ただ、topic方式では誰でもデータにアクセスできてしまうとしてセキュリティ面のマイナス面が指摘されておりましたが、ここはちょっと納得できませんでした(queueがconsumerを指定できるならtopicもできると仮定しないとフェアではないように思いました)。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;understanding-business-drivers&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#understanding-business-drivers&quot; aria-label=&quot;Anchor link for: understanding-business-drivers&quot;&gt;Understanding Business Drivers&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Business driversを理解して、それらをarchitecture characteristicsに落とし込む。
このためには、ビジネスドメインの知識をもちステークホルダー達と健全で協力的な関係を保つ必要がある。
開発チームのリーダがマネジメントの方々から信頼をきちんと得ていることが重要というのは本当に大切だと思います。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;balancing-architecture-and-hands-on-coding&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#balancing-architecture-and-hands-on-coding&quot; aria-label=&quot;Anchor link for: balancing-architecture-and-hands-on-coding&quot;&gt;Balancing Architecture and Hands-On Coding&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;We firmly believe that every architect should code and be able to maintain a certain level of technical depth&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Richards, Mark; Ford, Neal. Fundamentals of Software Architecture . O&#x27;Reilly Media. Kindle Edition.&lt;&#x2F;p&gt;
&lt;p&gt;とあるように、architectであってもcodeは書くべきで、問題はバランスをどうとっていくかだとしております。
その方法の一つとして、クリティカルパス(フレームワークの基礎になるコード)のコードは開発メンバーに委ね、1~3回のイテレーションで実現できそうな機能開発に集中する方法が提案されています。
この方法のメリットとして以下の点が挙げられています。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Architectがチームのボトルネックとならずにproduction codeを書くhands-on experience(実地経験)が積める&lt;&#x2F;li&gt;
&lt;li&gt;開発チームのownership向上&lt;&#x2F;li&gt;
&lt;li&gt;Architectが開発チームのpainや開発環境をよりよく理解できる&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Architectが開発チームと一緒にcodeを書けない場合に技術的な深みを維持する方法として以下の様々な方法が提案されています。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Proof-of-concept work.&lt;&#x2F;li&gt;
&lt;li&gt;Technical debt stories or architecture storiesに取り組む&lt;&#x2F;li&gt;
&lt;li&gt;Bug fixes&lt;&#x2F;li&gt;
&lt;li&gt;Leveraging automation by creating simple command-line tool&lt;&#x2F;li&gt;
&lt;li&gt;Frequent code review&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Proof-of-conceptでcodeを書く際はできるだけproduction-quality codeを書くことがアドバイスされています。それが自身の練習にもなるし、しばしばPoCのcodeがそのまま実装されたりするからです。
Architectのように意思決定する立場になられた方がどの程度codeを書く時間に当てるかはどの組織でも試行錯誤されている印象を受けます。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-1&quot; aria-label=&quot;Anchor link for: self-assessment-questions-1&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;describe-the-traditional-approach-of-architecture-versus-development-and-explain-why-that-approach-no-longer-works-akitekutiyatokai-fa-nocong-lai-xing-noapurotiwoshuo-ming-si-sonoapurotigamohayaji-neng-sinaili-you-woshuo-ming-seyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#describe-the-traditional-approach-of-architecture-versus-development-and-explain-why-that-approach-no-longer-works-akitekutiyatokai-fa-nocong-lai-xing-noapurotiwoshuo-ming-si-sonoapurotigamohayaji-neng-sinaili-you-woshuo-ming-seyo&quot; aria-label=&quot;Anchor link for: describe-the-traditional-approach-of-architecture-versus-development-and-explain-why-that-approach-no-longer-works-akitekutiyatokai-fa-nocong-lai-xing-noapurotiwoshuo-ming-si-sonoapurotigamohayaji-neng-sinaili-you-woshuo-ming-seyo&quot;&gt;Describe the traditional approach of architecture versus development and explain why that approach no longer works.(アーキテクチャと開発の従来型のアプローチを説明し、そのアプローチがもはや機能しない理由を説明せよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;Architectがビジネス要件を分析して作成した成果物(architecture, component)を開発チームが引き継ぎcodeを書くという役割分担を一方向で行うこと。
このアプローチには双方向性が欠如しているので機能しない。双方向性はarchitectがもつiterativeな性質から必要とされる。なぜiterativeな性質をもつかというとシステムには知らないことを知らない分野がどうしても存在するから。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;list-the-three-levels-of-knowledge-in-the-knowledge-triangle-and-provide-an-example-of-each-zhi-shi-nosan-jiao-xing-niokeruzhi-shi-no3tunoreberuwolie-ju-si-sorezorenoli-woju-geyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#list-the-three-levels-of-knowledge-in-the-knowledge-triangle-and-provide-an-example-of-each-zhi-shi-nosan-jiao-xing-niokeruzhi-shi-no3tunoreberuwolie-ju-si-sorezorenoli-woju-geyo&quot; aria-label=&quot;Anchor link for: list-the-three-levels-of-knowledge-in-the-knowledge-triangle-and-provide-an-example-of-each-zhi-shi-nosan-jiao-xing-niokeruzhi-shi-no3tunoreberuwolie-ju-si-sorezorenoli-woju-geyo&quot;&gt;List the three levels of knowledge in the knowledge triangle and provide an example of each.(知識の三角形における知識の3つのレベルを列挙し、それぞれの例を挙げよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;Stuff you know
&lt;ul&gt;
&lt;li&gt;自分が書ける言語や慣れているフレームワーク(の一部)。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Stuff you know you don&#x27;t know
&lt;ul&gt;
&lt;li&gt;モナド。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Stuff you don&#x27;t know you don&#x27;t know
&lt;ul&gt;
&lt;li&gt;(具体的に書くと矛盾する!)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;why-is-it-more-important-for-an-architect-to-focus-on-technical-breadth-rather-than-technical-depth-akitekutonitotuteji-shu-de-nashen-sayorimoji-shu-de-nafu-nijiao-dian-wodang-terukotogazhong-yao-nanohanazeka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-is-it-more-important-for-an-architect-to-focus-on-technical-breadth-rather-than-technical-depth-akitekutonitotuteji-shu-de-nashen-sayorimoji-shu-de-nafu-nijiao-dian-wodang-terukotogazhong-yao-nanohanazeka&quot; aria-label=&quot;Anchor link for: why-is-it-more-important-for-an-architect-to-focus-on-technical-breadth-rather-than-technical-depth-akitekutonitotuteji-shu-de-nashen-sayorimoji-shu-de-nafu-nijiao-dian-wodang-terukotogazhong-yao-nanohanazeka&quot;&gt;Why is it more important for an architect to focus on technical breadth rather than technical depth?(アーキテクトにとって技術的な深さよりも技術的な幅に焦点を当てることが重要なのはなぜか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;blockquote&gt;
&lt;p&gt;As an architect, breadth is more important than depth. Because architects must make decisions that match capabilities to technical constraints, a broad understanding of a wide variety of solutions is valuable.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Richards, Mark; Ford, Neal. Fundamentals of Software Architecture . O&#x27;Reilly Media. Kindle Edition.&lt;&#x2F;p&gt;
&lt;p&gt;日本語版では&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;アーキテクトは、技術的な制約に能力を適合させる決定を行わなければならない。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;の箇所が技術的な幅が深さよりarchitectには求められる理由ですがいまいちうまく理解できませんでした。ここでいうcapabilities(能力)は何を指しているのでしょうか。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-are-some-of-the-ways-of-maintaining-your-technical-depth-and-remaining-hands-on-as-an-architect-akitekutotositeji-shu-de-nashen-sawowei-chi-si-xian-chang-gan-wochi-tisok-kerutamenogong-fu-nihadonoyounamonogaaruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-some-of-the-ways-of-maintaining-your-technical-depth-and-remaining-hands-on-as-an-architect-akitekutotositeji-shu-de-nashen-sawowei-chi-si-xian-chang-gan-wochi-tisok-kerutamenogong-fu-nihadonoyounamonogaaruka&quot; aria-label=&quot;Anchor link for: what-are-some-of-the-ways-of-maintaining-your-technical-depth-and-remaining-hands-on-as-an-architect-akitekutotositeji-shu-de-nashen-sawowei-chi-si-xian-chang-gan-wochi-tisok-kerutamenogong-fu-nihadonoyounamonogaaruka&quot;&gt;What are some of the ways of maintaining your technical depth and remaining hands-on as an architect?(アーキテクトとして技術的な深さを維持し、現場感を持ち続けるための工夫にはどのようなものがあるか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;ボトネネックにならない範囲での開発チームへの参画&lt;&#x2F;li&gt;
&lt;li&gt;コードを書く機会を逃さないこと(Poc, buf fix, 負債解消, cli tool, review)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;chapter-3-modularity&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-3-modularity&quot; aria-label=&quot;Anchor link for: chapter-3-modularity&quot;&gt;Chapter 3. Modularity&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;definition&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#definition&quot; aria-label=&quot;Anchor link for: definition&quot;&gt;Definition&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;ModuleをA logical grouping of related code(関連するコードを論理的にグループ化すること)と定義します。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;measuring-modularity-moziyuruxing-noji-ce&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#measuring-modularity-moziyuruxing-noji-ce&quot; aria-label=&quot;Anchor link for: measuring-modularity-moziyuruxing-noji-ce&quot;&gt;Measuring Modularity(モジュール性の計測)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;以下の3つのメトリクスからモジュール性を把握する。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Cohesion(凝集度)&lt;&#x2F;li&gt;
&lt;li&gt;Coupling(結合度)&lt;&#x2F;li&gt;
&lt;li&gt;Connascence(コナーセンス)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;cohesion-ning-ji-du&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#cohesion-ning-ji-du&quot; aria-label=&quot;Anchor link for: cohesion-ning-ji-du&quot;&gt;Cohesion(凝集度)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;モジュール内の要素間の関連度(how related)の指標。全ての関連する要素が一箇所にまとまっている状態が理想。
細かくしすぎてしまうと今度は有益な結果を得るためにモジュール同士の結合度が高まってしまい、結果的に可読性が下がってしまう。
凝集度の様々な尺度(Functional Cohesion, Sequential Cohesion,...)や機械的に計測するメトリクス(LCOM)が紹介されています。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;coupling-jie-he-du&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#coupling-jie-he-du&quot; aria-label=&quot;Anchor link for: coupling-jie-he-du&quot;&gt;Coupling(結合度)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;メソッドの呼び出しからグラフを作りコードベースの結合度を分析する手法が紹介されています。
参考文献の「ソフトウェアの構造化設計法」は絶版らしく図書館等でないと読めなそうでした。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;connascence-konasensu&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#connascence-konasensu&quot; aria-label=&quot;Anchor link for: connascence-konasensu&quot;&gt;Connascence(コナーセンス)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Connascenceは以下のように定義されています。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Two components are connascent if a change in one would require the other to be modified in order to maintain the overall correctness of the system.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Richards, Mark; Ford, Neal. Fundamentals of Software Architecture . O&#x27;Reilly Media. Kindle Edition.&lt;&#x2F;p&gt;
&lt;p&gt;つまり、コンポーネントの関係についてconnascentか否かを考えるものと理解できます。
connascentを動的(実行時)と静的(compile時)に分類し、さらにいろいろな種類のconnascenceが紹介されています。&lt;br &#x2F;&gt;
結合を分類して、結合している&#x2F;していないではなく強弱(グラデーション)としてとらえるという風には考えたことがなかったのでコードを書くうえで意識していきたいです。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions-2&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-2&quot; aria-label=&quot;Anchor link for: self-assessment-questions-2&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;what-is-meant-by-the-term-connascence-konasensutoiuyong-yu-woshuo-ming-seyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-meant-by-the-term-connascence-konasensutoiuyong-yu-woshuo-ming-seyo&quot; aria-label=&quot;Anchor link for: what-is-meant-by-the-term-connascence-konasensutoiuyong-yu-woshuo-ming-seyo&quot;&gt;What is meant by the term connascence?(コナーセンスという用語を説明せよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;コンポーネント間の関係であり、あるコンポーネントの変更が他方のコンポーネントの変更を必要とする場合にあると判断されるもの。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-is-the-difference-between-static-and-dynamic-connascence-jing-de-nakonasensutodong-de-nakonasensunowei-ihahe-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-difference-between-static-and-dynamic-connascence-jing-de-nakonasensutodong-de-nakonasensunowei-ihahe-ka&quot; aria-label=&quot;Anchor link for: what-is-the-difference-between-static-and-dynamic-connascence-jing-de-nakonasensutodong-de-nakonasensunowei-ihahe-ka&quot;&gt;What is the difference between static and dynamic connascence?(静的なコナーセンスと動的なコナーセンスの違いは何か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;compile時に検出できるかruntime時に検出されるか。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-does-connascence-of-type-mean-is-it-static-or-dynamic-connascence-xing-nokonasensuhahe-woyi-wei-suruka-sorehajing-de-nakonasensutodong-de-nakonasensunodotirakanihan-mareruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-does-connascence-of-type-mean-is-it-static-or-dynamic-connascence-xing-nokonasensuhahe-woyi-wei-suruka-sorehajing-de-nakonasensutodong-de-nakonasensunodotirakanihan-mareruka&quot; aria-label=&quot;Anchor link for: what-does-connascence-of-type-mean-is-it-static-or-dynamic-connascence-xing-nokonasensuhahe-woyi-wei-suruka-sorehajing-de-nakonasensutodong-de-nakonasensunodotirakanihan-mareruka&quot;&gt;What does connascence of type mean? Is it static or dynamic connascence?(型のコナーセンスは何を意味するか。それは静的なコナーセンスと動的なコナーセンスのどちらかに含まれるか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;プログラミング言語の型に関するconnascence. compile時に検出できるのでstatic。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-is-the-strongest-form-of-connascence-konasensunozui-moqiang-ixing-hahe-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-strongest-form-of-connascence-konasensunozui-moqiang-ixing-hahe-ka&quot; aria-label=&quot;Anchor link for: what-is-the-strongest-form-of-connascence-konasensunozui-moqiang-ixing-hahe-ka&quot;&gt;What is the strongest form of connascence?(コナーセンスの最も強い形は何か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;Connascence of Identity。なぜこれがもっとも強いものとされるかはわかっておらず。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-is-the-weakest-form-of-connascence-konasensunozui-moruo-ixing-hahe-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-weakest-form-of-connascence-konasensunozui-moruo-ixing-hahe-ka&quot; aria-label=&quot;Anchor link for: what-is-the-weakest-form-of-connascence-konasensunozui-moruo-ixing-hahe-ka&quot;&gt;What is the weakest form of connascence?(コナーセンスの最も弱い形は何か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;Connascence of Name。もっとも弱い理由はrenameだけで動作をまったく変えずに変更できるからだろうか(変なことしていなければ)。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;which-is-preferred-within-a-code-base-static-of-dynamic-connascence-kodobesunozhong-dehao-masiinoha-jing-de-nakonasensutodong-de-nakonasensunodotiraka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#which-is-preferred-within-a-code-base-static-of-dynamic-connascence-kodobesunozhong-dehao-masiinoha-jing-de-nakonasensutodong-de-nakonasensunodotiraka&quot; aria-label=&quot;Anchor link for: which-is-preferred-within-a-code-base-static-of-dynamic-connascence-kodobesunozhong-dehao-masiinoha-jing-de-nakonasensutodong-de-nakonasensunodotiraka&quot;&gt;Which is preferred within a code base - static of dynamic connascence?(コードベースの中で好ましいのは、静的なコナーセンスと動的なコナーセンスのどちらか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;Static connascence. 静的な方が分析しやすいから。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chapter-4-architecture-characteristics-defined&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-4-architecture-characteristics-defined&quot; aria-label=&quot;Anchor link for: chapter-4-architecture-characteristics-defined&quot;&gt;Chapter 4. Architecture Characteristics Defined&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;問題をソフトウェアで解決しようとする時、まずシステムの要件を定めることから始める。
しかし、architectにはシステム要件の他にも考慮しなくてはならない要素が存在する。
具体的には、以下の要素。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Auditability(監査容易性)&lt;&#x2F;li&gt;
&lt;li&gt;Performance&lt;&#x2F;li&gt;
&lt;li&gt;Security&lt;&#x2F;li&gt;
&lt;li&gt;Data&lt;&#x2F;li&gt;
&lt;li&gt;Legality(合法性)&lt;&#x2F;li&gt;
&lt;li&gt;Scalability&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;これらの特性をarchitectural characteristicsと呼ぶ。domainの機能には直接関係しないが、ソフトウェアが満たさなければいけない全てのことを意味する。
しばしば、nonfunctional requirements(非機能要件)やquality attributes(品質特性)とよばれたりもするが、前者は否定証言で、後者は設計よりも事後に行う品質評価の印象が強いため本書では用いない。&lt;&#x2F;p&gt;
&lt;p&gt;Architecture characteristicは以下の三つの基準を満たすものを指す。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Specifies a nondomain design consideration&lt;&#x2F;li&gt;
&lt;li&gt;Influences some structural aspect of the design&lt;&#x2F;li&gt;
&lt;li&gt;Is critical of important to application success&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;specifies-a-nondomain-design-consideration&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#specifies-a-nondomain-design-consideration&quot; aria-label=&quot;Anchor link for: specifies-a-nondomain-design-consideration&quot;&gt;Specifies a nondomain design consideration&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;アプリケーションがすべきことを明らかにするのが要件。
Architecture characteristicsはその要件をどうように実装するか、なぜある決定がなされたかに関心をもち、運用と設計の基準を明らかにする。
パフォーマンスや技術的負債を防ぐこと等は要件とは明記されないがarchitectや開発者にとっては一般的な考慮事項。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;influences-some-structural-aspect-of-the-design&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#influences-some-structural-aspect-of-the-design&quot; aria-label=&quot;Anchor link for: influences-some-structural-aspect-of-the-design&quot;&gt;Influences some structural aspect of the design&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;しばしばarchitecture characteristicを満たすために特別な構造上の配慮が必要になる。
例えばシステムの決済に関して単にサードパーティモジュールによる決済か、アプリケーション内で決済を行うかどうかでSecurityがarchitecture characteristicに引き上げられるかどうか変わってくる。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;critical-or-important-to-application-success&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#critical-or-important-to-application-success&quot; aria-label=&quot;Anchor link for: critical-or-important-to-application-success&quot;&gt;Critical or important to application success&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Architecture characteristicを備えることは設計の複雑性とトレードオフなので、architectの仕事はサポートするべきcharacteristicsを見極めるところにある。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;architectural-characteristics-partially-listed&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#architectural-characteristics-partially-listed&quot; aria-label=&quot;Anchor link for: architectural-characteristics-partially-listed&quot;&gt;Architectural Characteristics (Partially) Listed&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Architecture characteristicsはモジュール性といったcodeレベルの話からscalabilityといった運用面に関する領域に及ぶ。
以下ではarchitecture characteristicsの大まかな分類を試みる。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;operational-architecture-characteristics&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#operational-architecture-characteristics&quot; aria-label=&quot;Anchor link for: operational-architecture-characteristics&quot;&gt;Operational Architecture Characteristics&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Availability(可用性)
&lt;ul&gt;
&lt;li&gt;How long the system will need to be available(システムがどれくらいの期間利用できるか)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Continuity(継続性)
&lt;ul&gt;
&lt;li&gt;障害復旧能力&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Performance
&lt;ul&gt;
&lt;li&gt;stress testing, peak analysis, capacity required, response timesなどの分析が含まれる&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Recoverability(回復性)
&lt;ul&gt;
&lt;li&gt;Business continuity requirements. 災害発生時にどれだけ早くオンラインに戻す必要があるか&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Reliability&#x2F;safety(信頼性&#x2F;安全性)
&lt;ul&gt;
&lt;li&gt;システムがフェイルセーフである必要があるか、人命に影響するか、障害が会社の多額の費用負担につながるか&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Robustness(堅牢性)
&lt;ul&gt;
&lt;li&gt;Ability to handle error and boundary conditions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Scalability
&lt;ul&gt;
&lt;li&gt;ユーザやリクエスト数が増えてもシステムが動作する能力&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Operational architecture characteristicsは運用やDevOpsの関心事と重なる面が大きい。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;structural-architecture-characteristics&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#structural-architecture-characteristics&quot; aria-label=&quot;Anchor link for: structural-architecture-characteristics&quot;&gt;Structural Architecture Characteristics&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Architectは単独または共同でコード品質に責任を負う。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Configurability(構成用意性)
&lt;ul&gt;
&lt;li&gt;Softwareの設定をend userが簡単に変更できる&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Extensibility(拡張容易性)
&lt;ul&gt;
&lt;li&gt;新機能をプラグインで追加できること&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Installability(インストール容易性)
&lt;ul&gt;
&lt;li&gt;インストールの容易さ&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Leverageability&#x2F;Reuse(活用性&#x2F;再利用性)
&lt;ul&gt;
&lt;li&gt;共通コンポーネントを複数プロダクトで再利用できること&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Localization
&lt;ul&gt;
&lt;li&gt;多言語対応&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Maintainability(メンテナンス容易性)
&lt;ul&gt;
&lt;li&gt;システムの変更や拡張を簡単に行えるか&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Portability(可搬性)
&lt;ul&gt;
&lt;li&gt;一つ以上のプラットフォームで動作するか&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Upgradeability(アップグレード容易性)
&lt;ul&gt;
&lt;li&gt;新versionへの移行を簡単に行えるか&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;cross-cutting-architectural-characteristics&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#cross-cutting-architectural-characteristics&quot; aria-label=&quot;Anchor link for: cross-cutting-architectural-characteristics&quot;&gt;Cross-Cutting Architectural Characteristics&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;上記に分類されない特性。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Accessibility
&lt;ul&gt;
&lt;li&gt;色覚障害や難聴等のユーザを含めたすべてのユーザの使いやすさ&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Archivability(長期保存性)
&lt;ul&gt;
&lt;li&gt;データの保持&#x2F;削除要件。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Authentication(認証)
&lt;ul&gt;
&lt;li&gt;ユーザがユーザが主張する者であることに自信をもつこと&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Authorization(認可)
&lt;ul&gt;
&lt;li&gt;ユーザが許可されたリソースにだけアクセスできること&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Legal(合法性)
&lt;ul&gt;
&lt;li&gt;法的制約(データ保護、GDPR等)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Privacy
&lt;ul&gt;
&lt;li&gt;従業員からも情報を秘匿できているか&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Security
&lt;ul&gt;
&lt;li&gt;暗号化、社内システムの認証等&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Supportability(サポート容易性)
&lt;ul&gt;
&lt;li&gt;エラー対応時に必要になる情報をロギングできているか&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Usability&#x2F;archievability(ユーザビリティ&#x2F;達成容易性)
&lt;ul&gt;
&lt;li&gt;ユーザが目標を達成するのにどれだけのトレーニングが必要か。&lt;&#x2F;li&gt;
&lt;li&gt;他のarchitecture上の課題と同様に真剣に扱われる必要がある&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;これらのリストは完全になることはない。また、前述の各architecture characteristicsにおいても不明確で曖昧であることは否めない。また組織ごとに独自の特性を作り出すことを否定するものでもない。&lt;&#x2F;p&gt;
&lt;p&gt;自分は可用性と信頼性の違いがいつもピントきておりませんでした(ある出力が信頼できなければそれは可用しているといえないので、両者を分ける実益がないのでは)。本書ではTCP&#x2F;IPを例にIPは可用性は高いが信頼性は高くないという例を紹介しております。この例から考えるに、可用性における可用とは後続の処理でカバー可能な程度に機能を実現しているといえるでしょうか。
また、architectに関する用語にもDDDのユビキタス言語の整備を適用することがアドバイスされています。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;trade-offs-and-least-worst-architecture&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#trade-offs-and-least-worst-architecture&quot; aria-label=&quot;Anchor link for: trade-offs-and-least-worst-architecture&quot;&gt;Trade-Offs and Least Worst Architecture&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Architecture characteristicsのサポートはtrade offの関係にある。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Never shoot for the best architecture, but rather the least worst architecture.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Richards, Mark; Ford, Neal. Fundamentals of Software Architecture . O&#x27;Reilly Media. Kindle Edition.&lt;&#x2F;p&gt;
&lt;p&gt;として、最初から最善を狙わずに最悪を避けることがアドバイスされています。
また、architectを変更しやすいように保てればiterativeなアプローチが可能になり、Agile software developmentの重要な教えの一つであるイテレーションの価値はarchitectureにもあてはまるとされています。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions-3&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-3&quot; aria-label=&quot;Anchor link for: self-assessment-questions-3&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;what-three-criteria-must-an-attribute-meet-to-be-considered-an-architecture-characteristic-akitekutiyate-xing-tominasareruji-zhun-wo3tuju-geyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-three-criteria-must-an-attribute-meet-to-be-considered-an-architecture-characteristic-akitekutiyate-xing-tominasareruji-zhun-wo3tuju-geyo&quot; aria-label=&quot;Anchor link for: what-three-criteria-must-an-attribute-meet-to-be-considered-an-architecture-characteristic-akitekutiyate-xing-tominasareruji-zhun-wo3tuju-geyo&quot;&gt;What three criteria must an attribute meet to be considered an architecture characteristic?(アーキテクチャ特性とみなされる基準を3つ挙げよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;Specifies a nondomain design consideration&lt;&#x2F;li&gt;
&lt;li&gt;Influences some structural aspect of the design&lt;&#x2F;li&gt;
&lt;li&gt;Is critical of important to application success&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;what-is-the-difference-between-an-implicit-characteristic-and-an-explicit-one-provide-an-example-of-each-ming-shi-de-nate-xing-toan-mo-de-nate-xing-tonowei-ihahe-ka-sorezorenoli-woju-geyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-difference-between-an-implicit-characteristic-and-an-explicit-one-provide-an-example-of-each-ming-shi-de-nate-xing-toan-mo-de-nate-xing-tonowei-ihahe-ka-sorezorenoli-woju-geyo&quot; aria-label=&quot;Anchor link for: what-is-the-difference-between-an-implicit-characteristic-and-an-explicit-one-provide-an-example-of-each-ming-shi-de-nate-xing-toan-mo-de-nate-xing-tonowei-ihahe-ka-sorezorenoli-woju-geyo&quot;&gt;What is the difference between an implicit characteristic and an explicit one? Provide an example of each.(明示的な特性と暗黙的な特性との違いは何か。それぞれの例を挙げよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;要件に記載されているか否か。
implicit: Reliability, Security
explicit: 明示されたScalability.&lt;&#x2F;p&gt;
&lt;h6 id=&quot;provide-an-example-of-an-operational-characteristic-yun-yong-te-xing-noli-woju-geyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#provide-an-example-of-an-operational-characteristic-yun-yong-te-xing-noli-woju-geyo&quot; aria-label=&quot;Anchor link for: provide-an-example-of-an-operational-characteristic-yun-yong-te-xing-noli-woju-geyo&quot;&gt;Provide an example of an operational characteristic.(運用特性の例を挙げよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;RobustnessやScalability&lt;&#x2F;p&gt;
&lt;h6 id=&quot;provide-an-example-of-a-structural-characteristic-gou-zao-te-xing-noli-woju-geyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#provide-an-example-of-a-structural-characteristic-gou-zao-te-xing-noli-woju-geyo&quot; aria-label=&quot;Anchor link for: provide-an-example-of-a-structural-characteristic-gou-zao-te-xing-noli-woju-geyo&quot;&gt;Provide an example of a structural characteristic.(構造特性の例を挙げよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;MaintainabilityやLocalization&lt;&#x2F;p&gt;
&lt;h6 id=&quot;provide-an-example-of-a-cross-cutting-characteristic-heng-duan-de-te-xing-noli-woju-geyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#provide-an-example-of-a-cross-cutting-characteristic-heng-duan-de-te-xing-noli-woju-geyo&quot; aria-label=&quot;Anchor link for: provide-an-example-of-a-cross-cutting-characteristic-heng-duan-de-te-xing-noli-woju-geyo&quot;&gt;Provide an example of a cross-cutting characteristic.(横断的特性の例を挙げよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;AccessibilityやArchivability&lt;&#x2F;p&gt;
&lt;h6 id=&quot;which-architecture-characteristic-is-more-important-to-strive-for-availability-or-performance-ke-yong-xing-topahuomansu-dotiranoakitekutiyate-xing-womu-zhi-sukotogayorizhong-yao-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#which-architecture-characteristic-is-more-important-to-strive-for-availability-or-performance-ke-yong-xing-topahuomansu-dotiranoakitekutiyate-xing-womu-zhi-sukotogayorizhong-yao-ka&quot; aria-label=&quot;Anchor link for: which-architecture-characteristic-is-more-important-to-strive-for-availability-or-performance-ke-yong-xing-topahuomansu-dotiranoakitekutiyate-xing-womu-zhi-sukotogayorizhong-yao-ka&quot;&gt;Which architecture characteristic is more important to strive for - availability or performance?(可用性とパフォーマンス、どちらのアーキテクチャ特性を目指すことがより重要か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;It depends!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chapter-5-identifying-architectural-characteristics&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-5-identifying-architectural-characteristics&quot; aria-label=&quot;Anchor link for: chapter-5-identifying-architectural-characteristics&quot;&gt;Chapter 5. Identifying Architectural Characteristics&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;与えられた問題のarchitecture characteristicsを明らかにすることはarchitecture作成における最初のステップ。
このステップには少なくても、domain concerns, requirements, implicit domain knowledgeという三つの視点がある。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;extracting-architecture-characteristics-from-domain-concerns&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#extracting-architecture-characteristics-from-domain-concerns&quot; aria-label=&quot;Anchor link for: extracting-architecture-characteristics-from-domain-concerns&quot;&gt;Extracting Architecture Characteristics from Domain Concerns&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;ドメインの関心事を適切なarchitecture characteristicsに変換する必要がある。ドメインのゴールや状況を理解しておくことは適切な決定の基礎になる。
すべてのarchitecture characteristicsを最初からサポートしようとするのはアンチパターン。なぜならドメインの問題に取り組む前にシステムが複雑になりすぎてしまうから。&lt;&#x2F;p&gt;
&lt;p&gt;また、サポートするべきarchitecture characteristicsの優先リストを作る試みも失敗に終わることがおおいとされています。関係者全員が優先順に同意することは滅多にないからです。そこで、順位をつけずに優先するトップ3を決めてもらう程度の粒度のほうがうまくいくとされています。&lt;&#x2F;p&gt;
&lt;p&gt;ドメインの関心事からarchitecture characteristicsを抽出することは簡単に思えるかもしれませんが、architectとステークホルダーが異なる言語を話すために話が噛み合わなくなることがあります。
具体例として、市場までの投入時間が、agility, testability, deployabilityに対応するといった対応表が紹介されています。
ここで重要なのは、市場までの投入時間とagilityが1:1で対応するわけでなく、さらにtestability, deployabilityまで必要ということです。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;extracting-architecture-characteristics-from-requirements&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#extracting-architecture-characteristics-from-requirements&quot; aria-label=&quot;Anchor link for: extracting-architecture-characteristics-from-requirements&quot;&gt;Extracting Architecture Characteristics from Requirements&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;ユーザ数やスケールの期待は要件に明示されることもある。またドメイン知識に由来することもある。
具体例として、大学の履修登録システムにおいては締切直前にリクエストが集中する等。&lt;&#x2F;p&gt;
&lt;p&gt;また、Architectural Katasというサイトが紹介されています。(本ではhttpですがhttps)
https:&#x2F;&#x2F;nealford.com&#x2F;katas&#x2F;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;case-study-silicon-sandwiches&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#case-study-silicon-sandwiches&quot; aria-label=&quot;Anchor link for: case-study-silicon-sandwiches&quot;&gt;Case Study: Silicon Sandwiches&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;あるサンドイッチ店でのオンライン注文を例に実際にarchitecture characteristicsを判断していきます。
本書は具体例を要所で乗せてくれているので非常に参考になります。&lt;&#x2F;p&gt;
&lt;p&gt;There are no wrong answers in architecture, only expensive ones.&lt;&#x2F;p&gt;
&lt;p&gt;Richards, Mark; Ford, Neal. Fundamentals of Software Architecture . O&#x27;Reilly Media. Kindle Edition.&lt;&#x2F;p&gt;
&lt;p&gt;これはいわゆる札束で解決というのもこういうことなのかもと思いました。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions-4&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-4&quot; aria-label=&quot;Anchor link for: self-assessment-questions-4&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;give-a-reason-why-it-is-a-good-practice-to-limit-the-number-of-characteristics-ilities-an-architecture-should-support-akitekutiyagasapotosubekite-xing-iritei-noshu-wozhi-xian-surukotogaliang-ixi-guan-dearuli-you-woshu-beyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#give-a-reason-why-it-is-a-good-practice-to-limit-the-number-of-characteristics-ilities-an-architecture-should-support-akitekutiyagasapotosubekite-xing-iritei-noshu-wozhi-xian-surukotogaliang-ixi-guan-dearuli-you-woshu-beyo&quot; aria-label=&quot;Anchor link for: give-a-reason-why-it-is-a-good-practice-to-limit-the-number-of-characteristics-ilities-an-architecture-should-support-akitekutiyagasapotosubekite-xing-iritei-noshu-wozhi-xian-surukotogaliang-ixi-guan-dearuli-you-woshu-beyo&quot;&gt;Give a reason why it is a good practice to limit the number of characteristics(&quot;-ilities&quot;) an architecture should support.(アーキテクチャがサポートすべき特性(イリティ)の数を制限することが良い習慣である理由を述べよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;ドメインの問題に取り組む際にシステムが複雑になり過ぎてしまうから。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;true-of-false-most-architecture-characteristics-come-from-business-requirements-and-user-stories-hotondonoakitekutiyate-xing-gabizinesuyao-jian-toyuzasutoriniyou-lai-surutoiunohazheng-siika&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#true-of-false-most-architecture-characteristics-come-from-business-requirements-and-user-stories-hotondonoakitekutiyate-xing-gabizinesuyao-jian-toyuzasutoriniyou-lai-surutoiunohazheng-siika&quot; aria-label=&quot;Anchor link for: true-of-false-most-architecture-characteristics-come-from-business-requirements-and-user-stories-hotondonoakitekutiyate-xing-gabizinesuyao-jian-toyuzasutoriniyou-lai-surutoiunohazheng-siika&quot;&gt;True of false: most architecture characteristics come from business requirements and user stories.(ほとんどのアーキテクチャ特性がビジネス要件とユーザーストーリーに由来するというのは正しいか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;false. ドメインの関心事や暗黙的な特性からも導かれる。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;if-a-business-stakeholder-states-that-time-to-makret-i-e-getting-new-features-and-bug-fixes-pushed-out-to-users-as-fast-as-possible-is-the-most-important-business-concern-which-architecture-characteristics-would-the-architecture-need-to-support-bizinesunosutekuhorudaga-shi-chang-tou-ru-madenoshi-jian-sunawati-xin-ji-neng-yabaguxiu-zheng-wodekirudakezao-kuyuzaniti-gong-surukoto-gazui-mozhong-yao-nabizinesushang-noguan-xin-shi-datoshu-betachang-he-akitekutiyahadonoakitekutiyate-xing-wosapotosurubi-yao-gaaruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#if-a-business-stakeholder-states-that-time-to-makret-i-e-getting-new-features-and-bug-fixes-pushed-out-to-users-as-fast-as-possible-is-the-most-important-business-concern-which-architecture-characteristics-would-the-architecture-need-to-support-bizinesunosutekuhorudaga-shi-chang-tou-ru-madenoshi-jian-sunawati-xin-ji-neng-yabaguxiu-zheng-wodekirudakezao-kuyuzaniti-gong-surukoto-gazui-mozhong-yao-nabizinesushang-noguan-xin-shi-datoshu-betachang-he-akitekutiyahadonoakitekutiyate-xing-wosapotosurubi-yao-gaaruka&quot; aria-label=&quot;Anchor link for: if-a-business-stakeholder-states-that-time-to-makret-i-e-getting-new-features-and-bug-fixes-pushed-out-to-users-as-fast-as-possible-is-the-most-important-business-concern-which-architecture-characteristics-would-the-architecture-need-to-support-bizinesunosutekuhorudaga-shi-chang-tou-ru-madenoshi-jian-sunawati-xin-ji-neng-yabaguxiu-zheng-wodekirudakezao-kuyuzaniti-gong-surukoto-gazui-mozhong-yao-nabizinesushang-noguan-xin-shi-datoshu-betachang-he-akitekutiyahadonoakitekutiyate-xing-wosapotosurubi-yao-gaaruka&quot;&gt;If a business stakeholder states that time to-makret(i.e, getting new features and bug fixes pushed out to users as fast as possible) is the most important business concern, which architecture characteristics would the architecture need to support?(ビジネスのステークホルダーが、市場投入までの時間(すなわち、新機能やバグ修正をできるだけ早くユーザーに提供すること)が最も重要なビジネス上の関心事だと述べた場合、アーキテクチャはどのアーキテクチャ特性をサポートする必要があるか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;Agility, testability, deployability.&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-is-the-difference-between-scalability-and-elasticity-sukerabiriteitodan-li-xing-nowei-iwoshu-beyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-difference-between-scalability-and-elasticity-sukerabiriteitodan-li-xing-nowei-iwoshu-beyo&quot; aria-label=&quot;Anchor link for: what-is-the-difference-between-scalability-and-elasticity-sukerabiriteitodan-li-xing-nowei-iwoshu-beyo&quot;&gt;What is the difference between scalability and elasticity?(スケーラビリティと弾力性の違いを述べよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;どちらもユーザやリクエスト数の上昇に対してシステムの処理能力を維持できるかに関する特性だが、elasticity(弾力性)はバーストに耐えられるかという観点で評価される。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;you-find-out-that-your-company-is-about-to-undergo-several-major-acquisitions-to-significantly-increase-its-customer-base-which-architectural-characteristics-should-you-be-worried-about-gu-ke-ji-pan-woda-fu-nizeng-yasutameni-anatanohui-she-gaikutukanoda-gui-mo-namai-shou-woxing-outositeirukotogawakatutatosuru-donoyounaakitekutiyate-xing-woxin-pei-surubi-yao-gaaruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#you-find-out-that-your-company-is-about-to-undergo-several-major-acquisitions-to-significantly-increase-its-customer-base-which-architectural-characteristics-should-you-be-worried-about-gu-ke-ji-pan-woda-fu-nizeng-yasutameni-anatanohui-she-gaikutukanoda-gui-mo-namai-shou-woxing-outositeirukotogawakatutatosuru-donoyounaakitekutiyate-xing-woxin-pei-surubi-yao-gaaruka&quot; aria-label=&quot;Anchor link for: you-find-out-that-your-company-is-about-to-undergo-several-major-acquisitions-to-significantly-increase-its-customer-base-which-architectural-characteristics-should-you-be-worried-about-gu-ke-ji-pan-woda-fu-nizeng-yasutameni-anatanohui-she-gaikutukanoda-gui-mo-namai-shou-woxing-outositeirukotogawakatutatosuru-donoyounaakitekutiyate-xing-woxin-pei-surubi-yao-gaaruka&quot;&gt;You find out that your company is about to undergo several major acquisitions to significantly increase its customer base. Which architectural characteristics should you be worried about?(顧客基盤を大幅に増やすために、あなたの会社がいくつかの大規模な買収を行おうとしていることがわかったとする。どのようなアーキテクチャ特性を心配する必要があるか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;相互運用性、スケーラビリティ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chapter-6-measuring-and-governing-architecture-characteristics&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-6-measuring-and-governing-architecture-characteristics&quot; aria-label=&quot;Anchor link for: chapter-6-measuring-and-governing-architecture-characteristics&quot;&gt;Chapter 6. Measuring and Governing Architecture Characteristics&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;measuring-architecture-characteristics&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#measuring-architecture-characteristics&quot; aria-label=&quot;Anchor link for: measuring-architecture-characteristics&quot;&gt;Measuring Architecture Characteristics&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;組織内で共通のArchitecture characteristicsの定義をもつにあたり以下が問題になる。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;意味が曖昧なまま用いられている。(例 agility, deployability)&lt;&#x2F;li&gt;
&lt;li&gt;定義が様々。(例 performance)&lt;&#x2F;li&gt;
&lt;li&gt;複合的。(例 agilityはmodularity, deployability, testabilityに分解できる)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;計測可能な特性を見つけるためにチームは客観的な定義を定めて合意する必要がある。&lt;&#x2F;p&gt;
&lt;p&gt;パフォーマンスの計測にしても、平均から統計モデルを用いたリアルタイム監視まで様々なレベルがある。&lt;br &#x2F;&gt;
またFirst Contentful Paint(コンテンツが描画されユーザにページが読み込み中であると示されるまでの時間)やFirst CPU Idle(メインスレッドが停止し、入力を受け付けるまでの時間)といった様々なメトリクスがある。&lt;&#x2F;p&gt;
&lt;p&gt;コードに関する計測としては循環的複雑度(Cyclomatic Complexity)が紹介されています。
閾値として設定する値を定めるにあたって、機能が複雑なのは問題領域のせいなのか、コードの質のせいなのかを見極める必要があります。&lt;&#x2F;p&gt;
&lt;p&gt;開発プロセスに関する指標としては、テストのカバレッジ率やデプロイに関する指標(成功率、時間)が紹介されています。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;governance-and-fitness-functions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#governance-and-fitness-functions&quot; aria-label=&quot;Anchor link for: governance-and-fitness-functions&quot;&gt;Governance and Fitness Functions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Architectが優先すべきarchitecture characteristicsを見極めたとして、それを開発者にrespectしてもらうためにはどうすればよいか。モジュール性のように重要だが速度のために犠牲にされがちなものを守っていくための統制の仕組みが必要になってくる。
ここではfitness functions(適応度関数)という考え方を応用したarchitecture fitness functionが紹介されています。
これはarchitectureに対するobjective integrity assessment(客観的な整合性評価)を提供するなんらかの仕組みと定義されています。
具体的には、モジュールの循環依存や3章で紹介された主系列からの距離、レイヤードにおける制約違反を検出するツールをCIで適用します。
自分の現在の関心はRustにあるのですが、具体例として挙げられているJavaのエコシステムは本当に成熟しているなと思わされます。&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;layeredArchitecture()
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        .layer(&amp;quot;Domain&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        .layer(&amp;quot;Persistence&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        .whereLayer(&amp;quot;Persistence&amp;quot;).mayOnlyBeAccessedByLayers(&amp;quot;Domain&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;のようなAPIでtestが書けるのはすごいと思います。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions-5&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-5&quot; aria-label=&quot;Anchor link for: self-assessment-questions-5&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;why-is-cyclomatic-complexity-such-an-important-metric-to-analyze-for-architecture-xun-huan-de-fu-za-du-gaakitekutiyawofen-xi-surushang-dezhong-yao-nazhi-biao-nanohanazeka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-is-cyclomatic-complexity-such-an-important-metric-to-analyze-for-architecture-xun-huan-de-fu-za-du-gaakitekutiyawofen-xi-surushang-dezhong-yao-nazhi-biao-nanohanazeka&quot; aria-label=&quot;Anchor link for: why-is-cyclomatic-complexity-such-an-important-metric-to-analyze-for-architecture-xun-huan-de-fu-za-du-gaakitekutiyawofen-xi-surushang-dezhong-yao-nazhi-biao-nanohanazeka&quot;&gt;Why is cyclomatic complexity such an important metric to analyze for architecture?(循環的複雑度がアーキテクチャを分析する上で重要な指標なのはなぜか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;複雑すぎるコードはモジュール性、テスト容易性等の事実上すべてのコード特性に悪影響を与えるから。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-is-an-architecture-fitness-function-how-can-they-be-used-to-analyze-an-architecture-akitekutiyashi-ying-du-guan-shu-tohahe-ka-akitekutiyawofen-xi-surutamenidonoyounishi-yong-dekiruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-an-architecture-fitness-function-how-can-they-be-used-to-analyze-an-architecture-akitekutiyashi-ying-du-guan-shu-tohahe-ka-akitekutiyawofen-xi-surutamenidonoyounishi-yong-dekiruka&quot; aria-label=&quot;Anchor link for: what-is-an-architecture-fitness-function-how-can-they-be-used-to-analyze-an-architecture-akitekutiyashi-ying-du-guan-shu-tohahe-ka-akitekutiyawofen-xi-surutamenidonoyounishi-yong-dekiruka&quot;&gt;What is an architecture fitness function? How can they be used to analyze an architecture?(アーキテクチャ適応度関数とは何か。アーキテクチャを分析するためにどのように使用できるか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;Architectureを評価するための客観的指標を提供してくれるもの。CI等で適用を自動化して統制を仕組みにして統制を実現する。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;provide-an-example-of-an-architecture-fitness-function-to-measure-the-scalability-of-an-architecture-akitekutiyanosukerabiriteiwoji-ce-surutamenoakitekutiyashi-ying-du-guan-shu-noli-woshi-se&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#provide-an-example-of-an-architecture-fitness-function-to-measure-the-scalability-of-an-architecture-akitekutiyanosukerabiriteiwoji-ce-surutamenoakitekutiyashi-ying-du-guan-shu-noli-woshi-se&quot; aria-label=&quot;Anchor link for: provide-an-example-of-an-architecture-fitness-function-to-measure-the-scalability-of-an-architecture-akitekutiyanosukerabiriteiwoji-ce-surutamenoakitekutiyashi-ying-du-guan-shu-noli-woshi-se&quot;&gt;Provide an example of an architecture fitness function to measure the scalability of an architecture.(アーキテクチャのスケーラビリティを計測するためのアーキテクチャ適応度関数の例を示せ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;単位時間あたりのリクエスト数とデプロイ単位の比率が一定の範囲内に収まっているかのメトリクスとその監視ルール。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-is-the-most-important-criteria-for-an-architecture-characteristic-to-allow-architects-and-developers-to-create-fitness-functions-akitekutoyakai-fa-zhe-gashi-ying-du-guan-shu-wozuo-cheng-dekiruyounisurutamenino-akitekutiyate-xing-nozui-mozhong-yao-naji-zhun-hahe-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-most-important-criteria-for-an-architecture-characteristic-to-allow-architects-and-developers-to-create-fitness-functions-akitekutoyakai-fa-zhe-gashi-ying-du-guan-shu-wozuo-cheng-dekiruyounisurutamenino-akitekutiyate-xing-nozui-mozhong-yao-naji-zhun-hahe-ka&quot; aria-label=&quot;Anchor link for: what-is-the-most-important-criteria-for-an-architecture-characteristic-to-allow-architects-and-developers-to-create-fitness-functions-akitekutoyakai-fa-zhe-gashi-ying-du-guan-shu-wozuo-cheng-dekiruyounisurutamenino-akitekutiyate-xing-nozui-mozhong-yao-naji-zhun-hahe-ka&quot;&gt;What is the most important criteria for an architecture characteristic to allow architects and developers to create fitness functions?(アーキテクトや開発者が適応度関数を作成できるようにするためにの、アーキテクチャ特性の最も重要な基準は何か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;計測可能な程度に具体的であること。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chapter-7-scope-of-architecture-characteristics&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-7-scope-of-architecture-characteristics&quot; aria-label=&quot;Anchor link for: chapter-7-scope-of-architecture-characteristics&quot;&gt;Chapter 7. Scope of Architecture Characteristics&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;現代においては、architecture characteristicsはシステム全体ではなく分割された単位(スコープ)ごとに適用される。
この単位をArchitecture quantum(アーキテクチャ量子)として定義する。&lt;&#x2F;p&gt;
&lt;p&gt;個人的にはarchitecture quantumを定義してそこから演繹的にシステムを分割していくというより、architecture characteristicsの適用範囲という観点からarchitecture quantumをとらえていくのがよいと思った。
Architecture quantumの定義は&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;An independently deployable artifact with high functional cohesion and synchronous connascence&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Richards, Mark; Ford, Neal. Fundamentals of Software Architecture . O&#x27;Reilly Media. Kindle Edition.&lt;&#x2F;p&gt;
&lt;p&gt;とされており、independently deployableは依存するデータベースも量子の一部であることにつながる。
また、high functional cohesionは機能的凝集を意味し、DDDの境界づけられたコンテキストに対応する。
そして、synchronous connascenceはあるアプリケーションが同期呼び出ししているアプリケーションも量子の一部になることを意味する。なぜ同期呼び出しが量子の範囲を広げる方向に働くかというと呼び出しもとと呼び出し先にはおなじ運用特性(architecture characteristics)が求められることになるから。&lt;&#x2F;p&gt;
&lt;p&gt;まとめると、architectural characteristicsはある範囲の機能を実現するための同期呼び出ししているアプリケーション群 + 依存データストアに対して定義される。
ので、DDDの文脈では境界づけられたコンテキストごとにarchitecture characteristicsを定義するということになりとても自然な主張に思えました。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions-6&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-6&quot; aria-label=&quot;Anchor link for: self-assessment-questions-6&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;what-is-an-architectural-quantum-and-why-is-it-important-to-architecture-akitekutiyaliang-zi-tohahe-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-an-architectural-quantum-and-why-is-it-important-to-architecture-akitekutiyaliang-zi-tohahe-ka&quot; aria-label=&quot;Anchor link for: what-is-an-architectural-quantum-and-why-is-it-important-to-architecture-akitekutiyaliang-zi-tohahe-ka&quot;&gt;What is an architectural quantum, and why is it important to architecture?(アーキテクチャ量子とは何か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;An independently deployable artifact with high functional cohesion and synchronous connascence.
境界づけられたコンテキスト内のマイクロサービス群 + 依存データストアという理解。1マイクロサービスより広い。
これがarchitectureにとって重要なのはarchitectural quantumごとにarchitectural characteristicsが定義されるから。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;assume-a-system-consisting-of-a-single-user-interface-with-four-independently-deployed-services-each-containing-its-own-separate-database-would-this-system-have-a-single-quantum-or-four-quanta-why-1tunoyuzaintahueisuto4tunodu-li-sitedepuroisaretasabisugaari-ge-sabisugadu-li-sitadetabesuwochi-tusisutemugaarutosuru-konosisutemunoakitekutiyaliang-zi-ha1tudarouka-soretomo4tudarouka-li-you-moda-eyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#assume-a-system-consisting-of-a-single-user-interface-with-four-independently-deployed-services-each-containing-its-own-separate-database-would-this-system-have-a-single-quantum-or-four-quanta-why-1tunoyuzaintahueisuto4tunodu-li-sitedepuroisaretasabisugaari-ge-sabisugadu-li-sitadetabesuwochi-tusisutemugaarutosuru-konosisutemunoakitekutiyaliang-zi-ha1tudarouka-soretomo4tudarouka-li-you-moda-eyo&quot; aria-label=&quot;Anchor link for: assume-a-system-consisting-of-a-single-user-interface-with-four-independently-deployed-services-each-containing-its-own-separate-database-would-this-system-have-a-single-quantum-or-four-quanta-why-1tunoyuzaintahueisuto4tunodu-li-sitedepuroisaretasabisugaari-ge-sabisugadu-li-sitadetabesuwochi-tusisutemugaarutosuru-konosisutemunoakitekutiyaliang-zi-ha1tudarouka-soretomo4tudarouka-li-you-moda-eyo&quot;&gt;Assume a system consisting of a single user interface with four independently deployed services, each containing its own separate database. Would this system have a single quantum or four quanta? Why?(1つのユーザーインターフェイスと4つの独立してデプロイされたサービスがあり、各サービスが独立したデータベースを持つシステムがあるとする。このシステムのアーキテクチャ量子は1つだろうか、それとも4つだろうか。理由も答えよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;Service間に同期的呼び出しがないと仮定すると、4 quanta. architectural quantumをarchitecture characteristicsのscopeの観点から評価すると、各serviceごとにもとめられる特性はことなる可能性があるから。例えばService1にはPerformanceやScalabilityが重視される一方で、Service2ではそれらの優先度よりSecurityがより重視されるといった状況が考えられるから。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;assume-a-system-with-an-administration-portion-managing-static-reference-data-such-as-the-product-catalog-and-warehouse-information-and-a-customer-facing-portion-managing-the-placement-of-orders-how-many-quanta-should-this-system-be-and-why-if-you-envision-multiple-quanta-could-the-admin-quantum-and-customer-facing-quantum-share-a-database-if-so-in-which-quantum-would-the-database-need-to-reside-jing-de-nacan-zhao-deta-zhi-pin-kataroguyacang-ku-qing-bao-woguan-li-suruguan-li-bu-men-to-fa-zhu-woguan-li-surugu-ke-dui-ying-bu-men-womotusisutemugaarutosuru-konosisutemunoakitekutiyaliang-zi-haikutunisubekidarouka-mata-sonoli-you-hahe-ka-fu-shu-noliang-zi-woxiang-ding-siteiruchang-he-guan-li-yong-noliang-zi-togu-ke-dui-ying-noliang-zi-hadetabesuwogong-you-dekiruka-sonochang-he-detabesuhadonoliang-zi-nizhi-kubi-yao-gaaruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#assume-a-system-with-an-administration-portion-managing-static-reference-data-such-as-the-product-catalog-and-warehouse-information-and-a-customer-facing-portion-managing-the-placement-of-orders-how-many-quanta-should-this-system-be-and-why-if-you-envision-multiple-quanta-could-the-admin-quantum-and-customer-facing-quantum-share-a-database-if-so-in-which-quantum-would-the-database-need-to-reside-jing-de-nacan-zhao-deta-zhi-pin-kataroguyacang-ku-qing-bao-woguan-li-suruguan-li-bu-men-to-fa-zhu-woguan-li-surugu-ke-dui-ying-bu-men-womotusisutemugaarutosuru-konosisutemunoakitekutiyaliang-zi-haikutunisubekidarouka-mata-sonoli-you-hahe-ka-fu-shu-noliang-zi-woxiang-ding-siteiruchang-he-guan-li-yong-noliang-zi-togu-ke-dui-ying-noliang-zi-hadetabesuwogong-you-dekiruka-sonochang-he-detabesuhadonoliang-zi-nizhi-kubi-yao-gaaruka&quot; aria-label=&quot;Anchor link for: assume-a-system-with-an-administration-portion-managing-static-reference-data-such-as-the-product-catalog-and-warehouse-information-and-a-customer-facing-portion-managing-the-placement-of-orders-how-many-quanta-should-this-system-be-and-why-if-you-envision-multiple-quanta-could-the-admin-quantum-and-customer-facing-quantum-share-a-database-if-so-in-which-quantum-would-the-database-need-to-reside-jing-de-nacan-zhao-deta-zhi-pin-kataroguyacang-ku-qing-bao-woguan-li-suruguan-li-bu-men-to-fa-zhu-woguan-li-surugu-ke-dui-ying-bu-men-womotusisutemugaarutosuru-konosisutemunoakitekutiyaliang-zi-haikutunisubekidarouka-mata-sonoli-you-hahe-ka-fu-shu-noliang-zi-woxiang-ding-siteiruchang-he-guan-li-yong-noliang-zi-togu-ke-dui-ying-noliang-zi-hadetabesuwogong-you-dekiruka-sonochang-he-detabesuhadonoliang-zi-nizhi-kubi-yao-gaaruka&quot;&gt;Assume a system with an administration portion managing static reference data(such as the product catalog, and warehouse information) and a customer facing portion managing the placement of orders. How many quanta should this system be and why? If you envision multiple quanta, could the admin quantum and customer-facing quantum share a database? If so, in which quantum would the database need to reside?(静的な参照データ(製品カタログや倉庫情報)を管理する管理部門と、発注を管理する顧客対応部門をもつシステムがあるとする。このシステムのアーキテクチャ量子はいくつにすべきだろうか。また、その理由は何か。複数の量子を想定している場合、管理用の量子と顧客対応の量子はデータベースを共有できるか。その場合、データベースはどの量子に置く必要があるか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;場合による(与えられた情報だけだと判断できない)。
仮に量子を1にする場合はDBを共有することも可能。量子を2とする場合はDBは共有できない。なぜなら共有するとDBのスキーマ変更時に同時にデプロイが必要になる場合があり独立したデプロイ可能性を侵害するから。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chapter-8-component-based-thinking&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-8-component-based-thinking&quot; aria-label=&quot;Anchor link for: chapter-8-component-based-thinking&quot;&gt;Chapter 8. Component-Based Thinking&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;コンポーネントは&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;the physical manifestation of a module.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Richards, Mark; Ford, Neal. Fundamentals of Software Architecture . O&#x27;Reilly Media. Kindle Edition.&lt;&#x2F;p&gt;
&lt;p&gt;と定義されています。moduleが物理的にパッケージ化されたもので、具体例としてはrubyのgem。
Rustではモジュールはモジュール(&lt;code&gt;std::io&lt;&#x2F;code&gt;)、パッケージはパッケージ(&lt;code&gt;tokio&lt;&#x2F;code&gt;)と1:1対応していると考えて良いでしょうか。
(packageは最大で1つのlib crateと複数のbin crateからなるので、依存性の文脈ではpackage = crateと考えてよいという理解です)&lt;&#x2F;p&gt;
&lt;p&gt;ただ、用語を定義しながら話を進めてきた本書では珍しく8章のコンポーネントは多義的です。このあとにコンポーネントの分類の話が続くのですが、コンポーネントにはアプリケーションと同じアドレス空間で実行されるライブラリから、マイクロサービスのデプロイ単位、レイヤードアーキテクチャにおける1レイヤ等さまざまな種類があるとしています。&lt;&#x2F;p&gt;
&lt;p&gt;コンポーネントの粒度を決めていくアプローチとしてレイヤードアーキテクチャのような技術による分割とドメインによる分割の説明があります。各アーキテクチャの詳細は2部で解説されます。
大切なのは採用したアーキテクチャスタイルに関わらず適切なコンポーネントの粒度を見つけるのはイテレーティブなアプローチがもっとも効果的と理解しました。
自分の今のスタンスとしては、あまり用語の定義から演繹的に考えずに、各モジュール&#x2F;コンポーネントの責務がチームで合意されていて、testabilityが保たれている(テストが書きやすい)状態になっていればいいのかなと考えております。&lt;&#x2F;p&gt;
&lt;p&gt;Entity Trap(DBのテーブルとドメインのエンティティが1:1)についても言及されています。
Entity Trapのなにがよくないかというと、ソースコードのパッケージ化や全体的な構造化という点で、開発チームに何のガイダンスも与えないと説明されており、これは本当にその通りだと思います。(なにも抽象化してないが詰め替えだけは必要な処理はつらい。最低でもなんらかの機械的な変換機能が欲しい)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions-7&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-7&quot; aria-label=&quot;Anchor link for: self-assessment-questions-7&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;we-define-the-term-component-as-a-building-block-of-an-application-something-the-application-does-a-component-usually-consist-of-a-group-of-classes-or-source-files-how-are-components-typically-manifested-within-an-application-or-service-ben-shu-deha-konponentowo-apurikesiyonnogou-cheng-yao-su-tumariapurikesiyongaxing-ukotowoding-yi-siteiru-konponentohatong-chang-kurasuyasosuhuairunogurupudegou-cheng-sareru-apurikesiyonyasabisunozhong-de-konponentohatong-chang-donoyounibiao-xian-sareruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#we-define-the-term-component-as-a-building-block-of-an-application-something-the-application-does-a-component-usually-consist-of-a-group-of-classes-or-source-files-how-are-components-typically-manifested-within-an-application-or-service-ben-shu-deha-konponentowo-apurikesiyonnogou-cheng-yao-su-tumariapurikesiyongaxing-ukotowoding-yi-siteiru-konponentohatong-chang-kurasuyasosuhuairunogurupudegou-cheng-sareru-apurikesiyonyasabisunozhong-de-konponentohatong-chang-donoyounibiao-xian-sareruka&quot; aria-label=&quot;Anchor link for: we-define-the-term-component-as-a-building-block-of-an-application-something-the-application-does-a-component-usually-consist-of-a-group-of-classes-or-source-files-how-are-components-typically-manifested-within-an-application-or-service-ben-shu-deha-konponentowo-apurikesiyonnogou-cheng-yao-su-tumariapurikesiyongaxing-ukotowoding-yi-siteiru-konponentohatong-chang-kurasuyasosuhuairunogurupudegou-cheng-sareru-apurikesiyonyasabisunozhong-de-konponentohatong-chang-donoyounibiao-xian-sareruka&quot;&gt;We define the term component as a building block of an application - something the application does. A component usually consist of a group of classes or source files. How are components typically manifested within an application or service?(本書では、コンポーネントを、アプリケーションの構成要素、つまりアプリケーションが行うことを定義している。コンポーネントは通常、クラスやソースファイルのグループで構成される。アプリケーションやサービスの中で、コンポーネントは通常どのように表現されるか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;質問のsomething the application does(アプリケーションが行うこと)の箇所の意味が理解できませんでした。
マイクロサービスの文脈では、独立してデプロイ可能なサービスを指すこともあるし、アプリケーションにおいてはレイヤードの1レイヤーをさすこともある。
用語をできるだけ定義しながら話を進めてきた本書にしては珍しく、コンポーネントは多義的だなと思いました。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-is-the-difference-between-technical-partitioning-and-domain-partitioning-provide-an-example-of-each-ji-shu-niyorufen-ge-todomeinniyorufen-ge-nowei-ihahe-ka-sorezorenoli-woshi-se&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-difference-between-technical-partitioning-and-domain-partitioning-provide-an-example-of-each-ji-shu-niyorufen-ge-todomeinniyorufen-ge-nowei-ihahe-ka-sorezorenoli-woshi-se&quot; aria-label=&quot;Anchor link for: what-is-the-difference-between-technical-partitioning-and-domain-partitioning-provide-an-example-of-each-ji-shu-niyorufen-ge-todomeinniyorufen-ge-nowei-ihahe-ka-sorezorenoli-woshi-se&quot;&gt;What is the difference between technical partitioning and domain partitioning? provide an example of each.(技術による分割とドメインによる分割の違いは何か。それぞれの例を示せ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;技術による分割は、プログラミング言語のライブラリ依存性による分割。結果的にリクエスト、レスポンスを制御する層やデータの永続層といった分割がなされる。
ドメインによる分割は業務フローを中心にした分割。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-is-the-advantage-of-domain-partitioning-domeinniyorufen-ge-noli-dian-hahe-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-advantage-of-domain-partitioning-domeinniyorufen-ge-noli-dian-hahe-ka&quot; aria-label=&quot;Anchor link for: what-is-the-advantage-of-domain-partitioning-domeinniyorufen-ge-noli-dian-hahe-ka&quot;&gt;What is the advantage of domain partitioning?(ドメインによる分割の利点は何か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;自分が特にメリットだと思う点は、コードがビジネス機能により近い形でモデル化されること、メッセージフローが問題領域と一致していることだと思います。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;under-what-circumstances-would-technical-partitioning-be-a-better-choice-over-domain-partitioning-domeinniyorufen-ge-yorimoji-shu-niyorufen-ge-gashi-qie-naxuan-ze-nanoha-donoyounazhuang-kuang-notokika&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#under-what-circumstances-would-technical-partitioning-be-a-better-choice-over-domain-partitioning-domeinniyorufen-ge-yorimoji-shu-niyorufen-ge-gashi-qie-naxuan-ze-nanoha-donoyounazhuang-kuang-notokika&quot; aria-label=&quot;Anchor link for: under-what-circumstances-would-technical-partitioning-be-a-better-choice-over-domain-partitioning-domeinniyorufen-ge-yorimoji-shu-niyorufen-ge-gashi-qie-naxuan-ze-nanoha-donoyounazhuang-kuang-notokika&quot;&gt;Under what circumstances would technical partitioning be a better choice over domain partitioning?(ドメインによる分割よりも技術による分割が適切な選択なのは、どのような状況のときか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;ドメインが複雑でなかったり、ドメインの分析が不十分な状態でアプリケーションを書き始めなければいけない場合。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-is-the-entity-trap-why-is-it-not-a-good-approach-for-component-identification-enteiteinomin-tohahe-ka-enteiteinomin-gakonponentowopan-bie-suruji-niyokunainohanazeka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-entity-trap-why-is-it-not-a-good-approach-for-component-identification-enteiteinomin-tohahe-ka-enteiteinomin-gakonponentowopan-bie-suruji-niyokunainohanazeka&quot; aria-label=&quot;Anchor link for: what-is-the-entity-trap-why-is-it-not-a-good-approach-for-component-identification-enteiteinomin-tohahe-ka-enteiteinomin-gakonponentowopan-bie-suruji-niyokunainohanazeka&quot;&gt;What is the entity trap? Why is it not a good approach for component identification?(エンティティの罠とは何か。エンティティの罠がコンポーネントを判別する際によくないのはなぜか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;DBのテーブル構成をそのまま、ドメインのエンティティと1:1に対応させてしまうこと。
こうしたエンティティはモジュールやコンポーネントを作り上げていくプロセスに対してガイダンスとならないから。
(これは実体験として納得できます)&lt;&#x2F;p&gt;
&lt;h6 id=&quot;when-might-you-choose-the-workflow-approach-over-the-actor-actions-approach-when-identifying-core-components-koakonponentowopan-bie-suruji-ni-akuta-akusiyonapurotiyorimowakuhuroapurotiwoxuan-ze-surunohadonoyounachang-he-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#when-might-you-choose-the-workflow-approach-over-the-actor-actions-approach-when-identifying-core-components-koakonponentowopan-bie-suruji-ni-akuta-akusiyonapurotiyorimowakuhuroapurotiwoxuan-ze-surunohadonoyounachang-he-ka&quot; aria-label=&quot;Anchor link for: when-might-you-choose-the-workflow-approach-over-the-actor-actions-approach-when-identifying-core-components-koakonponentowopan-bie-suruji-ni-akuta-akusiyonapurotiyorimowakuhuroapurotiwoxuan-ze-surunohadonoyounachang-he-ka&quot;&gt;When might you choose the workflow approach over the Actor&#x2F;Actions approach when identifying core components?(コアコンポーネントを判別する際に、アクター&#x2F;アクションアプローチよりもワークフローアプローチを選択するのはどのような場合か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;DDDを利用せず、かつアクターが明確でない場合。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;part-ii-architecture-styles&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-ii-architecture-styles&quot; aria-label=&quot;Anchor link for: part-ii-architecture-styles&quot;&gt;Part II. Architecture Styles&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Architecture styleは、フロントエンドやバックエンドのソースコードがどのように編成されているか、そしてそのソースコードがどのようにデータストアと相互作用するかについての包括的な構造と定義されています。
これはarchitecture styleの中で特定の解決策を形作る低レベルの設計構造であるarchitecture patternと異なるものとしています。
これだけ聞いてもまだarchitecture styleについてはよくわからないので9章の基礎を読んでいきます。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chapter-9-foundations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-9-foundations&quot; aria-label=&quot;Anchor link for: chapter-9-foundations&quot;&gt;Chapter 9. Foundations&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Part IIでarchitecture styleとarchitecture patternの違いは時に混乱を招くとされていたので両者は違うものと考えたのですが、ここではarchitecture styleはarchitecture patternと呼ばれることもあると説明されていています。
今のところ両者は違うものとして考えた方が良いのか判断がついていません。
ので、architecture patternはいったん気にせず、architecture styleについてみていきます。
まず定義ですが、様々なarchitecture characteristicsをカバーするコンポーネント同士の名付けられた関係を説明するものとされています。
また、後の記述で、architecture stylesはmonolithicとdistributedの二つに分類できるされています。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Monolithic
&lt;ul&gt;
&lt;li&gt;Layered architecture&lt;&#x2F;li&gt;
&lt;li&gt;Pipeline architecture&lt;&#x2F;li&gt;
&lt;li&gt;Microkernel architecture&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Distributed
&lt;ul&gt;
&lt;li&gt;Service-based architecture&lt;&#x2F;li&gt;
&lt;li&gt;Event-driven architecture&lt;&#x2F;li&gt;
&lt;li&gt;Space-based architecture&lt;&#x2F;li&gt;
&lt;li&gt;Service-oriented architecture&lt;&#x2F;li&gt;
&lt;li&gt;Microservices architecture&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;上記のように各分類はさらに分類できます。なので結局はlayeredだったりmicroservicesだったりについての話なので、architecture styleとpatternの定義についてはこだわらなくてよいのかもしれません。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;big-ball-of-mud-ju-da-nani-tuan-zi&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#big-ball-of-mud-ju-da-nani-tuan-zi&quot; aria-label=&quot;Anchor link for: big-ball-of-mud-ju-da-nani-tuan-zi&quot;&gt;Big Ball of Mud(巨大な泥団子)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;認識できるarchitecture structureが不在の状態をBig Ball of Mud(巨大な泥団子)と呼ぶ。
現代的には、内部構造を持たずにevent handlersが直接databaseを操作するようなapplicationのこと。
みんな避けたいとわかっているが、多くのプロジェクトで統制不足により誕生してしまう。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-fallacies-of-distributed-computing-fen-san-konpiyuteingunowu-xin&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-fallacies-of-distributed-computing-fen-san-konpiyuteingunowu-xin&quot; aria-label=&quot;Anchor link for: the-fallacies-of-distributed-computing-fen-san-konpiyuteingunowu-xin&quot;&gt;The Fallacies Of Distributed Computing(分散コンピューティングの誤信)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Distributed architecture stylesはperformance, scalability, availabilityの点でmonolithic architectureよりもはるかに強力とされているが、そこにもトレードオフがある。
以下では&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fallacies_of_distributed_computing&quot;&gt;the fallacies of distributed computing&lt;&#x2F;a&gt;で述べられている8つの過信についてみていきます。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fallacy-1-the-network-is-reliable-netutowakuhaxin-lai-dekiru&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fallacy-1-the-network-is-reliable-netutowakuhaxin-lai-dekiru&quot; aria-label=&quot;Anchor link for: fallacy-1-the-network-is-reliable-netutowakuhaxin-lai-dekiru&quot;&gt;Fallacy 1: The Network is Reliable(ネットワークは信頼できる)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;networkは信頼できない。なのでservice間の通信はすべて失敗する可能性がある。
たしかRelease It!で述べられていたかと思うのですがnetwork越しの通信にはすべてtimeoutを設定せよという教えがあったかと思います。同一service内であれば、シンプルなメソッド呼び出しになるところが、serviceを跨ぐとtimeoutの設定とretry policy(exponential&#x2F;jitter, retryableか否かの判定ロジック)が絡んできてひとつ複雑度がますと考えてます。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fallacy-2-latency-is-zero-reitensigazero&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fallacy-2-latency-is-zero-reitensigazero&quot; aria-label=&quot;Anchor link for: fallacy-2-latency-is-zero-reitensigazero&quot;&gt;Fallacy 2: Latency Is Zero(レイテンシーがゼロ)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Component間のlocal method callに比べてservice間の通信は常に遅くなる。したがって、latency averageと95~99 percentile latencyを把握しておかなければならない。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fallacy-3-bandwidth-is-infinite-dai-yu-fu-hawu-xian&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fallacy-3-bandwidth-is-infinite-dai-yu-fu-hawu-xian&quot; aria-label=&quot;Anchor link for: fallacy-3-bandwidth-is-infinite-dai-yu-fu-hawu-xian&quot;&gt;Fallacy 3: Bandwidth Is Infinite(帯域幅は無限)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;帯域幅はmonolithic architectureでは通常問題にならないが、分散システムではそうとは限らない。
latencyとの問題にもなってきますが、自分もloopの中で実はnetwork callが行われていたみたいなことを経験したことがあります。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fallacy-4-the-network-is-secure-netutowakuhaan-quan&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fallacy-4-the-network-is-secure-netutowakuhaan-quan&quot; aria-label=&quot;Anchor link for: fallacy-4-the-network-is-secure-netutowakuhaan-quan&quot;&gt;Fallacy 4: The Network Is Secure(ネットワークは安全)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The network is not secure.
Distributed systemになることで、the surface area for threats and attacksは増加してしまう。
service間通信であってもendpointを保護する必要があることもdistributed systemでperformanceが低下しがちな要因になっている。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fallacy-5-the-topology-never-changes-toporozihajue-sitebian-hua-sinai&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fallacy-5-the-topology-never-changes-toporozihajue-sitebian-hua-sinai&quot; aria-label=&quot;Anchor link for: fallacy-5-the-topology-never-changes-toporozihajue-sitebian-hua-sinai&quot;&gt;Fallacy 5: The Topology Never Changes(トポロジーは決して変化しない)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;network topology(routers, hubs, switches, firewalls, networks)は変化する。
従って、architectsは運用担当者やネットワーク管理者と常にコミュニケーションをとる必要がある。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fallacy-6-there-is-only-one-administrator-guan-li-zhe-hayi-ren-dake&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fallacy-6-there-is-only-one-administrator-guan-li-zhe-hayi-ren-dake&quot; aria-label=&quot;Anchor link for: fallacy-6-there-is-only-one-administrator-guan-li-zhe-hayi-ren-dake&quot;&gt;Fallacy 6: There Is Only One Administrator(管理者は一人だけ)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;distributed architectureは複雑なので維持するためには管理者が複数人必要になり、それにともなって調整コストも増える。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fallacy-7-transport-cost-is-zero-zhuan-song-kosutohazero&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fallacy-7-transport-cost-is-zero-zhuan-song-kosutohazero&quot; aria-label=&quot;Anchor link for: fallacy-7-transport-cost-is-zero-zhuan-song-kosutohazero&quot;&gt;Fallacy 7: Transport Cost Is Zero(転送コストはゼロ)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;fallacy 2のlatencyとは違い、REST呼び出し自体タダではなくコストがかかる。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fallacy-8-the-network-is-homogeneous-netutowakuhajun-yi&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fallacy-8-the-network-is-homogeneous-netutowakuhajun-yi&quot; aria-label=&quot;Anchor link for: fallacy-8-the-network-is-homogeneous-netutowakuhajun-yi&quot;&gt;Fallacy 8: The Network Is Homogeneous(ネットワークは均一)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;networkが単一vendorのhardwareから形成されるとは限らない。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;other-distributed-considerations-sonota-nokao-lu-shi-xiang&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#other-distributed-considerations-sonota-nokao-lu-shi-xiang&quot; aria-label=&quot;Anchor link for: other-distributed-considerations-sonota-nokao-lu-shi-xiang&quot;&gt;Other Distributed Considerations(その他の考慮事項)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Distributed logging(分散ロギング)
&lt;ul&gt;
&lt;li&gt;特定のワークフローにおけるログが複数箇所にあらわれるので調査が難しくなる&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Distributed transactions(分散トランザクション)
&lt;ul&gt;
&lt;li&gt;datastoreが提供してくれるACIDに頼れないので、eventual consistency(結果整合性)をうけいれる必要がある&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;microservices.io&#x2F;patterns&#x2F;data&#x2F;saga.html&quot;&gt;transactional sagas&lt;&#x2F;a&gt;のような分散トランザクションを管理する手法が必要になる&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Contract maintenance and versioning
&lt;ul&gt;
&lt;li&gt;endpointのAPIの変更コストがあがる。特に後方互換性をもたない破壊的変更の場合。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;self-assessment-questions-8&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-8&quot; aria-label=&quot;Anchor link for: self-assessment-questions-8&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;list-the-eight-fallacies-of-distributed-computing-fen-san-konpiyuteingunowu-xin-wo8tuju-geyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#list-the-eight-fallacies-of-distributed-computing-fen-san-konpiyuteingunowu-xin-wo8tuju-geyo&quot; aria-label=&quot;Anchor link for: list-the-eight-fallacies-of-distributed-computing-fen-san-konpiyuteingunowu-xin-wo8tuju-geyo&quot;&gt;List the eight fallacies of distributed computing(分散コンピューティングの誤信を8つ挙げよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;The Network is Reliable(ネットワークは信頼できる)&lt;&#x2F;li&gt;
&lt;li&gt;Latency Is Zero(レイテンシーがゼロ)&lt;&#x2F;li&gt;
&lt;li&gt;Bandwidth Is Infinite(帯域幅は無限)&lt;&#x2F;li&gt;
&lt;li&gt;The Network Is Secure(ネットワークは安全)&lt;&#x2F;li&gt;
&lt;li&gt;The Topology Never Changes(トポロジーは決して変化しない)&lt;&#x2F;li&gt;
&lt;li&gt;There Is Only One Administrator(管理者は一人だけ)&lt;&#x2F;li&gt;
&lt;li&gt;Transport Cost Is Zero(転送コストはゼロ)&lt;&#x2F;li&gt;
&lt;li&gt;The Network Is Homogeneous(ネットワークは均一)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;name-three-challenges-that-distributed-architectures-have-that-monolithic-architectures-don-t-monorisitukuakitekutiyanihanai-fen-san-akitekutiyanoke-ti-wo3tuju-geyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#name-three-challenges-that-distributed-architectures-have-that-monolithic-architectures-don-t-monorisitukuakitekutiyanihanai-fen-san-akitekutiyanoke-ti-wo3tuju-geyo&quot; aria-label=&quot;Anchor link for: name-three-challenges-that-distributed-architectures-have-that-monolithic-architectures-don-t-monorisitukuakitekutiyanihanai-fen-san-akitekutiyanoke-ti-wo3tuju-geyo&quot;&gt;Name three challenges that distributed architectures have that monolithic architectures don&#x27;t(モノリシックアーキテクチャにはない、分散アーキテクチャの課題を3つ挙げよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;Distributed logging(分散ロギング)&lt;&#x2F;li&gt;
&lt;li&gt;Distributed transactions(分散トランザクション)&lt;&#x2F;li&gt;
&lt;li&gt;Contract maintenance and versioning(API管理)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;what-is-stamp-coupling-sutanpujie-he-tohananika&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-stamp-coupling-sutanpujie-he-tohananika&quot; aria-label=&quot;Anchor link for: what-is-stamp-coupling-sutanpujie-he-tohananika&quot;&gt;What is stamp coupling?(スタンプ結合とはなにか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;処理に必要のないデータにまで依存してしまうこと。引数の構造体の一部のfieldしか必要ない場合等。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-are-some-ways-of-addressing-stamp-coupling-sutanpujie-he-nidui-chu-surufang-fa-nihadonoyounamonogaaruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-some-ways-of-addressing-stamp-coupling-sutanpujie-he-nidui-chu-surufang-fa-nihadonoyounamonogaaruka&quot; aria-label=&quot;Anchor link for: what-are-some-ways-of-addressing-stamp-coupling-sutanpujie-he-nidui-chu-surufang-fa-nihadonoyounamonogaaruka&quot;&gt;What are some ways of addressing stamp coupling?(スタンプ結合に対処する方法にはどのようなものがあるか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;GraphQLを利用してclient側で必要な情報のみ取得するようにする。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chapter-10-layered-architecture-style&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-10-layered-architecture-style&quot; aria-label=&quot;Anchor link for: chapter-10-layered-architecture-style&quot;&gt;Chapter 10. Layered Architecture Style&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;組織のチーム構成(UI,backend, DBA)とlayeredの各層が一致することにより、もっとも一般的なarchitectureの一つとなっているlayered architectureについて。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;topology&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#topology&quot; aria-label=&quot;Anchor link for: topology&quot;&gt;Topology&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Layered architectureはapplicationのcomponentをlayerに分けます。
各layerはapplication内で特定の役割と責務を持ちます。
layer数と分け方については特に制限はありませんが、通信ロジックを担うpresentation layer, ビジネルルールを担うbusiness layer, 永続化&#x2F;DB処理を担うpersistence layerのような分割が一般的です。
Layered architectureは技術による関心の分離をおこなっているといえます。
そのため、あるドメインの変更が各レイヤーの変更につながりやすいです。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;layers-of-isolation-ceng-nofen-li&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#layers-of-isolation-ceng-nofen-li&quot; aria-label=&quot;Anchor link for: layers-of-isolation-ceng-nofen-li&quot;&gt;Layers of Isolation(層の分離)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;各layerはclosedかopenに分類される。リクエストの処理において、そのlayerをスキップしてその下のlayerを呼び出せるかいなかを意味する。closedはスキップできず、openはスキップできる。
具体的にはリクエストを処理するlayerからpersistence layerに直接アクセスしてよいかのように問題になる。
このアクセスを許すとpersistence layerの変更が2層に影響するようになるので、component間の依存性が強くなることになる。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;adding-layers-ceng-nozhui-jia&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#adding-layers-ceng-nozhui-jia&quot; aria-label=&quot;Anchor link for: adding-layers-ceng-nozhui-jia&quot;&gt;Adding Layers(層の追加)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;あるlayerをopenにするのが理にかなっている場合もある。
例えば、presentation layerにbusiness layerのあるcomponentにアクセスしてほしくない場合、新たにbusiness layerの下にservice layerを追加してそのcomponentを移動させる。このservice layerはopenにしてbusiness layerからは必要に応じてアクセスするといった場合。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;architecture-sinkhole-anti-pattern&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#architecture-sinkhole-anti-pattern&quot; aria-label=&quot;Anchor link for: architecture-sinkhole-anti-pattern&quot;&gt;Architecture sinkhole anti-pattern&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Architecture sinkhole anti-patternはリクエストが各layerで単にpass throughされる場合に起きる。
(本書ではwith no business logic performedとされているがbusiness logicはbusiness layerでは?と思ったりしました。)
Layered architectureではこのようなリクエストパスがあること自体は避けられない。
このアンチパターンに陥っているかの判断基準として、sinkholeになっているリクエストの比率を明らかにし、それが8割を超えていたらlayered architectureが適していないことの顕であると判断できる。
対策としてはlayerをopenにすることが考えられるがこれは当然トレードオフになる。&lt;&#x2F;p&gt;
&lt;p&gt;あるコードベースで、layer間の詰め替え処理だけあって、各layerの抽象化があまりメリットをもたらさないなと思うこともあったのでこの状態にsinkholeという名前がついているのは知りませんでした。
Layered architectureについて完結に説明してくれているので、チームで馴染みのないメンバーに最初に読んでもらうのによい章だと思いました。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions-9&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-9&quot; aria-label=&quot;Anchor link for: self-assessment-questions-9&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;what-is-the-difference-between-an-open-layer-and-a-closed-layer-kai-fang-reiyatobi-suo-reiyanowei-ihahe-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-difference-between-an-open-layer-and-a-closed-layer-kai-fang-reiyatobi-suo-reiyanowei-ihahe-ka&quot; aria-label=&quot;Anchor link for: what-is-the-difference-between-an-open-layer-and-a-closed-layer-kai-fang-reiyatobi-suo-reiyanowei-ihahe-ka&quot;&gt;What is the difference between an open layer and a closed layer?(開放レイヤーと閉鎖レイヤーの違いは何か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;上位層がその層の下の層に直接アクセスできるか否か。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;describe-the-layers-of-isolation-concept-and-what-the-benefits-are-of-this-concept-fen-li-reiyanogai-nian-woshuo-ming-si-sonoli-dian-woshuo-ming-seyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#describe-the-layers-of-isolation-concept-and-what-the-benefits-are-of-this-concept-fen-li-reiyanogai-nian-woshuo-ming-si-sonoli-dian-woshuo-ming-seyo&quot; aria-label=&quot;Anchor link for: describe-the-layers-of-isolation-concept-and-what-the-benefits-are-of-this-concept-fen-li-reiyanogai-nian-woshuo-ming-si-sonoli-dian-woshuo-ming-seyo&quot;&gt;Describe the layers of isolation concept and what the benefits are of this concept.(分離レイヤーの概念を説明し、その利点を説明せよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;layerのcontract(api)がかわらない限りにおいて、あるlayerの変更は当該layerに閉じていて他のlayerに影響しない。
利点は変更の影響範囲を制御できること。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-is-the-architecture-sinkhole-anti-pattern-akitekutiyasinkuhoruantipatantohahe-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-architecture-sinkhole-anti-pattern-akitekutiyasinkuhoruantipatantohahe-ka&quot; aria-label=&quot;Anchor link for: what-is-the-architecture-sinkhole-anti-pattern-akitekutiyasinkuhoruantipatantohahe-ka&quot;&gt;What is the architecture sinkhole anti-pattern?(アーキテクチャシンクホールアンチパターンとは何か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;各layerがなにもせず下のlayerにリクエストを渡すだけになっている状態。特に処理の大部分がこの状態になっている場合を指す。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-are-some-of-the-main-architecture-characteristics-that-would-drive-you-to-use-a-layered-architecture-reiyadoakitekutiyawoshi-yong-surukotowocu-jin-suruzhu-naakitekutiyate-xing-hahe-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-some-of-the-main-architecture-characteristics-that-would-drive-you-to-use-a-layered-architecture-reiyadoakitekutiyawoshi-yong-surukotowocu-jin-suruzhu-naakitekutiyate-xing-hahe-ka&quot; aria-label=&quot;Anchor link for: what-are-some-of-the-main-architecture-characteristics-that-would-drive-you-to-use-a-layered-architecture-reiyadoakitekutiyawoshi-yong-surukotowocu-jin-suruzhu-naakitekutiyate-xing-hahe-ka&quot;&gt;What are some of the main architecture characteristics that would drive you to use a layered architecture?(レイヤードアーキテクチャを使用することを促進する主なアーキテクチャ特性は何か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;コストとシンプル性。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;why-isn-t-testability-well-supported-in-the-layered-architecture-style-reiyadoakitekutiyanosutairudetesutorong-yi-xing-gashi-fen-nisapotosarenainohanazeka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-isn-t-testability-well-supported-in-the-layered-architecture-style-reiyadoakitekutiyanosutairudetesutorong-yi-xing-gashi-fen-nisapotosarenainohanazeka&quot; aria-label=&quot;Anchor link for: why-isn-t-testability-well-supported-in-the-layered-architecture-style-reiyadoakitekutiyanosutairudetesutorong-yi-xing-gashi-fen-nisapotosarenainohanazeka&quot;&gt;Why isn&#x27;t testability well supported in the layered architecture style?(レイヤードアーキテクチャのスタイルでテスト容易性が十分にサポートされないのはなぜか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;数行の変更であっても実行に時間のかかるテストスイートを走らせる必要があるからという記述があるが、あまり説得的でないように思いました。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;why-isn-t-agility-well-supported-in-the-layered-architecture-style-reiyadoakitekutiyadeaziriteigashi-fen-nisapotosareteinainohanazeka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-isn-t-agility-well-supported-in-the-layered-architecture-style-reiyadoakitekutiyadeaziriteigashi-fen-nisapotosareteinainohanazeka&quot; aria-label=&quot;Anchor link for: why-isn-t-agility-well-supported-in-the-layered-architecture-style-reiyadoakitekutiyadeaziriteigashi-fen-nisapotosareteinainohanazeka&quot;&gt;Why isn&#x27;t agility well supported in the layered architecture style?(レイヤードアーキテクチャでアジリティが十分にサポートされていないのはなぜか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;deployabilityが低いからとされているから。これも実装次第ではと思いました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chapter-11-pipeline-architecture-style&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-11-pipeline-architecture-style&quot; aria-label=&quot;Anchor link for: chapter-11-pipeline-architecture-style&quot;&gt;Chapter 11. Pipeline Architecture Style&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;self-assessment-questions-10&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-10&quot; aria-label=&quot;Anchor link for: self-assessment-questions-10&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;can-pipes-be-bidirectional-in-a-pipeline-architecture-paipurainakitekutiyadepaipuwoshuang-fang-xiang-nisurukotohake-neng-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#can-pipes-be-bidirectional-in-a-pipeline-architecture-paipurainakitekutiyadepaipuwoshuang-fang-xiang-nisurukotohake-neng-ka&quot; aria-label=&quot;Anchor link for: can-pipes-be-bidirectional-in-a-pipeline-architecture-paipurainakitekutiyadepaipuwoshuang-fang-xiang-nisurukotohake-neng-ka&quot;&gt;Can pipes be bidirectional in a pipeline architecture?(パイプラインアーキテクチャでパイプを双方向にすることは可能か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;できない。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;name-the-four-types-of-filters-and-their-purpose-huirutanozhong-lei-womu-de-togong-ni4tuju-geyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#name-the-four-types-of-filters-and-their-purpose-huirutanozhong-lei-womu-de-togong-ni4tuju-geyo&quot; aria-label=&quot;Anchor link for: name-the-four-types-of-filters-and-their-purpose-huirutanozhong-lei-womu-de-togong-ni4tuju-geyo&quot;&gt;Name the four types of filters and their purpose.(フィルターの種類を目的と共に4つ挙げよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;Producer
&lt;ul&gt;
&lt;li&gt;dataの出力、処理の起点。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Transformer
&lt;ul&gt;
&lt;li&gt;入力dataを変換して出力する。&lt;code&gt;map()&lt;&#x2F;code&gt;的な機能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Tester
&lt;ul&gt;
&lt;li&gt;入力を検査し、変換を加えて出力する。&lt;code&gt;reduce()&lt;&#x2F;code&gt;的な機能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Consumer
&lt;ul&gt;
&lt;li&gt;pipelineの最終処理。結果を永続化したり表示したりする。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;can-a-filter-send-data-out-through-multiple-pipes-huirutahafu-shu-nopaipuwojing-you-sitedetawosong-richu-seruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#can-a-filter-send-data-out-through-multiple-pipes-huirutahafu-shu-nopaipuwojing-you-sitedetawosong-richu-seruka&quot; aria-label=&quot;Anchor link for: can-a-filter-send-data-out-through-multiple-pipes-huirutahafu-shu-nopaipuwojing-you-sitedetawosong-richu-seruka&quot;&gt;Can a filter send data out through multiple pipes?(フィルターは複数のパイプを経由してデータを送り出せるか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;できる。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;is-the-pipeline-architecture-style-technically-partitioned-or-domain-partitioned-paipurainakitekutiyahaji-shu-niyotutefen-ge-sareteiruka-soretomodomeinniyotutefen-ge-sareteiruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#is-the-pipeline-architecture-style-technically-partitioned-or-domain-partitioned-paipurainakitekutiyahaji-shu-niyotutefen-ge-sareteiruka-soretomodomeinniyotutefen-ge-sareteiruka&quot; aria-label=&quot;Anchor link for: is-the-pipeline-architecture-style-technically-partitioned-or-domain-partitioned-paipurainakitekutiyahaji-shu-niyotutefen-ge-sareteiruka-soretomodomeinniyotutefen-ge-sareteiruka&quot;&gt;Is the pipeline architecture style technically partitioned or domain partitioned?(パイプラインアーキテクチャは技術によって分割されているか、それともドメインによって分割されているか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;技術によって分割されている。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;in-what-way-does-the-pipeline-architecture-support-modularity-paipurainakitekutiyahadonoyounafang-fa-demoziyuruxing-wosapotositeiruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-what-way-does-the-pipeline-architecture-support-modularity-paipurainakitekutiyahadonoyounafang-fa-demoziyuruxing-wosapotositeiruka&quot; aria-label=&quot;Anchor link for: in-what-way-does-the-pipeline-architecture-support-modularity-paipurainakitekutiyahadonoyounafang-fa-demoziyuruxing-wosapotositeiruka&quot;&gt;In what way does the pipeline architecture support modularity?(パイプラインアーキテクチャはどのような方法でモジュール性をサポートしているか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;処理をfilterに分割し、かつstatelessに保つことでモジュール性を向上させている。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;provide-two-examples-of-the-pipeline-architecture-style&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#provide-two-examples-of-the-pipeline-architecture-style&quot; aria-label=&quot;Anchor link for: provide-two-examples-of-the-pipeline-architecture-style&quot;&gt;Provide two examples of the pipeline architecture style.&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nushell&#x2F;nushell&quot;&gt;nushell&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;glue&#x2F;index.html&quot;&gt;AWS Glue&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;chapter-12-microkernel-architecture-style&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-12-microkernel-architecture-style&quot; aria-label=&quot;Anchor link for: chapter-12-microkernel-architecture-style&quot;&gt;Chapter 12. Microkernel Architecture Style&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;plug-in architectureとも。ユーザの環境にインストールされて使われるproduct-based applicationに適しているarchitecture。editorは大体このarchitectureな気がします。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;topology-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#topology-1&quot; aria-label=&quot;Anchor link for: topology-1&quot;&gt;Topology&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;core systemとplug-in componentsの二つからなる。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;core-system&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#core-system&quot; aria-label=&quot;Anchor link for: core-system&quot;&gt;Core System&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;systemを実行するのに必要最低限の機能。
ほとんどなにも処理を行わないapplicationのhappy pathともいえる。
cyclomatic complexityをplug-inに切り出すことによって、testabilityを高めている。
UIをcore systemと一部とするかも、core systemをlayeredにするかも特に制限はない。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;plug-in-components&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#plug-in-components&quot; aria-label=&quot;Anchor link for: plug-in-components&quot;&gt;Plug-In Components&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;特殊な処理や追加機能を含む独立したコンポーネント。plug-in間で依存性がないのが理想。
compile basedかruntime basedに分類できる。
core systemとREST等で通信することもありえる。core systemとは別にplug-in用のデータベースを用意することもある。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;registry&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#registry&quot; aria-label=&quot;Anchor link for: registry&quot;&gt;Registry&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;core systemがplugin-inの情報を知るための仕組み。
単純なmap構造のデータから&lt;a href=&quot;https:&#x2F;&#x2F;www.consul.io&#x2F;&quot;&gt;HashiCorpのConsul&lt;&#x2F;a&gt;のような複雑なものまである。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions-11&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-11&quot; aria-label=&quot;Anchor link for: self-assessment-questions-11&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;what-is-another-name-for-the-microkernel-architecture-style-maikurokaneruakitekutiyanobie-cheng-ha&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-another-name-for-the-microkernel-architecture-style-maikurokaneruakitekutiyanobie-cheng-ha&quot; aria-label=&quot;Anchor link for: what-is-another-name-for-the-microkernel-architecture-style-maikurokaneruakitekutiyanobie-cheng-ha&quot;&gt;What is another name for the microkernel architecture style?(マイクロカーネルアーキテクチャの別称は)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;Plug-in architecture。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;under-what-situations-is-it-ok-for-plug-in-components-to-be-dependent-on-other-plug-in-components-puraguinkonponentogata-nopuraguinkonponentoniyi-cun-siteitemowen-ti-nainohadonoyounazhuang-kuang-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#under-what-situations-is-it-ok-for-plug-in-components-to-be-dependent-on-other-plug-in-components-puraguinkonponentogata-nopuraguinkonponentoniyi-cun-siteitemowen-ti-nainohadonoyounazhuang-kuang-ka&quot; aria-label=&quot;Anchor link for: under-what-situations-is-it-ok-for-plug-in-components-to-be-dependent-on-other-plug-in-components-puraguinkonponentogata-nopuraguinkonponentoniyi-cun-siteitemowen-ti-nainohadonoyounazhuang-kuang-ka&quot;&gt;Under what situations is it OK for plug-in components to be dependent on other plug-in components?(プラグインコンポーネントが他のプラグインコンポーネントに依存していても問題ないのはどのような状況か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;わかりませんでした。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-are-some-of-the-tools-and-frameworks-that-can-be-used-to-manage-plug-ins-puraguinwoguan-li-surutamenoturuyahuremuwakunihadonoyounamonogaaruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-some-of-the-tools-and-frameworks-that-can-be-used-to-manage-plug-ins-puraguinwoguan-li-surutamenoturuyahuremuwakunihadonoyounamonogaaruka&quot; aria-label=&quot;Anchor link for: what-are-some-of-the-tools-and-frameworks-that-can-be-used-to-manage-plug-ins-puraguinwoguan-li-surutamenoturuyahuremuwakunihadonoyounamonogaaruka&quot;&gt;What are some of the tools and frameworks that can be used to manage plug-ins?(プラグインを管理するためのツールやフレームワークにはどのようなものがあるか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;自身で情報を保持するか、なんらかのservice discoveryを利用する。consul(使ったことがない)&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-would-you-do-if-you-had-a-third-party-plug-in-that-didn-t-conform-to-the-standard-plug-in-contract-in-the-core-system-koasisutemunobiao-zhun-puraguinkonsutorakutonizhun-ju-siteinaisadopateizhi-puraguingaatutachang-he-dousuruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-would-you-do-if-you-had-a-third-party-plug-in-that-didn-t-conform-to-the-standard-plug-in-contract-in-the-core-system-koasisutemunobiao-zhun-puraguinkonsutorakutonizhun-ju-siteinaisadopateizhi-puraguingaatutachang-he-dousuruka&quot; aria-label=&quot;Anchor link for: what-would-you-do-if-you-had-a-third-party-plug-in-that-didn-t-conform-to-the-standard-plug-in-contract-in-the-core-system-koasisutemunobiao-zhun-puraguinkonsutorakutonizhun-ju-siteinaisadopateizhi-puraguingaatutachang-he-dousuruka&quot;&gt;What would you do if you had a third-party plug-in that didn&#x27;t conform to the standard plug-in contract in the core system?(コアシステムの標準プラグインコンストラクトに準拠していないサードパーティ製プラグインがあった場合どうするか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;Adaptorを利用する。(よくわかっていないです)&lt;&#x2F;p&gt;
&lt;h6 id=&quot;provide-two-examples-of-the-microkernel-architecture-style-maikurokaneruakitekutiyanoli-wo2tuju-geyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#provide-two-examples-of-the-microkernel-architecture-style-maikurokaneruakitekutiyanoli-wo2tuju-geyo&quot; aria-label=&quot;Anchor link for: provide-two-examples-of-the-microkernel-architecture-style-maikurokaneruakitekutiyanoli-wo2tuju-geyo&quot;&gt;Provide two examples of the microkernel architecture style.(マイクロカーネルアーキテクチャの例を2つ挙げよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;Web browserやIDE。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;is-the-microkernel-architecture-style-technically-partitioned-or-domain-partitioned-maikurokaneruakitekutiyahaji-shu-niyotutefen-ge-sareteiruka-soretomodomeinniyotutefen-ge-sareteiruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#is-the-microkernel-architecture-style-technically-partitioned-or-domain-partitioned-maikurokaneruakitekutiyahaji-shu-niyotutefen-ge-sareteiruka-soretomodomeinniyotutefen-ge-sareteiruka&quot; aria-label=&quot;Anchor link for: is-the-microkernel-architecture-style-technically-partitioned-or-domain-partitioned-maikurokaneruakitekutiyahaji-shu-niyotutefen-ge-sareteiruka-soretomodomeinniyotutefen-ge-sareteiruka&quot;&gt;Is the microkernel architecture style technically partitioned or domain partitioned?(マイクロカーネルアーキテクチャは技術によって分割されているか、それともドメインによって分割されているか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;技術によって分割されつつも、ドメインの要素と強く対応づけることで、ドメインによる分割も可能。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;why-is-the-microkernel-architecture-always-a-single-architecture-quantum-maikurokaneruakitekutiyahanazechang-nidan-yi-noakitekutiyaliang-zi-nanoka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-is-the-microkernel-architecture-always-a-single-architecture-quantum-maikurokaneruakitekutiyahanazechang-nidan-yi-noakitekutiyaliang-zi-nanoka&quot; aria-label=&quot;Anchor link for: why-is-the-microkernel-architecture-always-a-single-architecture-quantum-maikurokaneruakitekutiyahanazechang-nidan-yi-noakitekutiyaliang-zi-nanoka&quot;&gt;Why is the microkernel architecture always a single architecture quantum?(マイクロカーネルアーキテクチャはなぜ常に単一のアーキテクチャ量子なのか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;結局はcore systemに依存するから。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-is-domain-architecture-isomorphism-domein-akitekutiyanotong-xing-xing-tohahe-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-domain-architecture-isomorphism-domein-akitekutiyanotong-xing-xing-tohahe-ka&quot; aria-label=&quot;Anchor link for: what-is-domain-architecture-isomorphism-domein-akitekutiyanotong-xing-xing-tohahe-ka&quot;&gt;What is domain&#x2F;architecture isomorphism?(ドメイン&#x2F;アーキテクチャの同型性とは何か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;分割の粒度をドメインに対応させられること。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chapter-13-service-based-architecture-style&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-13-service-based-architecture-style&quot; aria-label=&quot;Anchor link for: chapter-13-service-based-architecture-style&quot;&gt;Chapter 13. Service-Based Architecture Style&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;topology-2&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#topology-2&quot; aria-label=&quot;Anchor link for: topology-2&quot;&gt;Topology&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;UI, 個別にdeployされる粒度の荒いservice, 共通のdatabaseからなるのが基本。
各serviceでdatabaseを共有しているのが特徴。UIと対応するserviceの粒度には幅がある。
databaseをservice間で完全に分離できるなら複数ある場合もある。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;service-design-and-granularity-sabisunoshe-ji-toli-du&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#service-design-and-granularity-sabisunoshe-ji-toli-du&quot; aria-label=&quot;Anchor link for: service-design-and-granularity-sabisunoshe-ji-toli-du&quot;&gt;Service Design and Granularity(サービスの設計と粒度)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;要は、ACID transactionで要件を実装できる構成という理解。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;database-partitioning-detabesufen-ge&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#database-partitioning-detabesufen-ge&quot; aria-label=&quot;Anchor link for: database-partitioning-detabesufen-ge&quot;&gt;Database Partitioning(データベース分割)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;DBを共有しているトレードオフとして、スキーマ変更時に労力と調整を要する。基本的に前サービスに変更が影響する。
もちろんスキーマをserviceごとに論理的に分割して変更の影響を制御することはできる。
この構成の開発を経験したことがあるのですが、DBのスキーマ管理のやり方次第で開発体験が大きくかわるなと思います。
(そのときはこの構成に名前がついているのを知りませんでした)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions-12&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-12&quot; aria-label=&quot;Anchor link for: self-assessment-questions-12&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;how-many-services-are-there-in-a-typical-service-based-architecture-dian-xing-de-nasabisubesuakitekutiyaha-he-ge-kurainosabisukaragou-cheng-sareruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-many-services-are-there-in-a-typical-service-based-architecture-dian-xing-de-nasabisubesuakitekutiyaha-he-ge-kurainosabisukaragou-cheng-sareruka&quot; aria-label=&quot;Anchor link for: how-many-services-are-there-in-a-typical-service-based-architecture-dian-xing-de-nasabisubesuakitekutiyaha-he-ge-kurainosabisukaragou-cheng-sareruka&quot;&gt;How many services are there in a typical service-based architecture?(典型的なサービスベースアーキテクチャは、何個くらいのサービスから構成されるか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;7個。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;do-you-have-to-break-apart-a-database-in-service-based-architecture-sabisubesuakitekutiyadehadetabesuwofen-jie-sinakerebanaranaika&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#do-you-have-to-break-apart-a-database-in-service-based-architecture-sabisubesuakitekutiyadehadetabesuwofen-jie-sinakerebanaranaika&quot; aria-label=&quot;Anchor link for: do-you-have-to-break-apart-a-database-in-service-based-architecture-sabisubesuakitekutiyadehadetabesuwofen-jie-sinakerebanaranaika&quot;&gt;Do you have to break apart a database in service-based architecture?(サービスベースアーキテクチャではデータベースを分解しなければならないか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;必要がなければ分割する必要はない。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;under-what-circumstances-might-you-want-to-break-apart-a-database-detabesuwofen-jie-sitakunarunohadonoyounazhuang-kuang-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#under-what-circumstances-might-you-want-to-break-apart-a-database-detabesuwofen-jie-sitakunarunohadonoyounazhuang-kuang-ka&quot; aria-label=&quot;Anchor link for: under-what-circumstances-might-you-want-to-break-apart-a-database-detabesuwofen-jie-sitakunarunohadonoyounazhuang-kuang-ka&quot;&gt;Under what circumstances might you want to break apart a database?(データベースを分解したくなるのはどのような状況か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;DBをドメインで分割したい場合。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-technique-can-you-use-to-manage-database-changes-within-a-service-based-architecture-sabisubesuakitekutiyanozhong-dedetabesunobian-geng-woguan-li-surunonishi-erutekunitukunidonoyounamonogaaruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-technique-can-you-use-to-manage-database-changes-within-a-service-based-architecture-sabisubesuakitekutiyanozhong-dedetabesunobian-geng-woguan-li-surunonishi-erutekunitukunidonoyounamonogaaruka&quot; aria-label=&quot;Anchor link for: what-technique-can-you-use-to-manage-database-changes-within-a-service-based-architecture-sabisubesuakitekutiyanozhong-dedetabesunobian-geng-woguan-li-surunonishi-erutekunitukunidonoyounamonogaaruka&quot;&gt;What technique can you use to manage database changes within a service-based architecture?(サービスベースアーキテクチャの中でデータベースの変更を管理するのに使えるテクニックにどのようなものがあるか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;DBを論理的に分割して、ライブラリでラップする。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;do-domain-service-require-a-container-such-as-docker-to-run-domeinsabisunoshi-xing-nihakontenagabi-yao-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#do-domain-service-require-a-container-such-as-docker-to-run-domeinsabisunoshi-xing-nihakontenagabi-yao-ka&quot; aria-label=&quot;Anchor link for: do-domain-service-require-a-container-such-as-docker-to-run-domeinsabisunoshi-xing-nihakontenagabi-yao-ka&quot;&gt;Do domain service require a container(such as Docker) to run?(ドメインサービスの実行にはコンテナが必要か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;当然コンテナ化する必要がある。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;which-architecture-characteristics-are-well-supported-by-the-service-based-architecture-style-sabisubesuakitekutiyahadonoyounaakitekutiyate-xing-woshi-fen-nisapotosuruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#which-architecture-characteristics-are-well-supported-by-the-service-based-architecture-style-sabisubesuakitekutiyahadonoyounaakitekutiyate-xing-woshi-fen-nisapotosuruka&quot; aria-label=&quot;Anchor link for: which-architecture-characteristics-are-well-supported-by-the-service-based-architecture-style-sabisubesuakitekutiyahadonoyounaakitekutiyate-xing-woshi-fen-nisapotosuruka&quot;&gt;Which architecture characteristics are well supported by the service-based architecture style?(サービスベースアーキテクチャはどのようなアーキテクチャ特性を十分にサポートするか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;deployability&lt;&#x2F;li&gt;
&lt;li&gt;modularity&lt;&#x2F;li&gt;
&lt;li&gt;testability&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;why-isn-t-elasticity-well-supported-in-a-service-based-architecture-sabisubesuakitekutiyadehanazedan-li-xing-gashi-fen-nisapotosaretenainoka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-isn-t-elasticity-well-supported-in-a-service-based-architecture-sabisubesuakitekutiyadehanazedan-li-xing-gashi-fen-nisapotosaretenainoka&quot; aria-label=&quot;Anchor link for: why-isn-t-elasticity-well-supported-in-a-service-based-architecture-sabisubesuakitekutiyadehanazedan-li-xing-gashi-fen-nisapotosaretenainoka&quot;&gt;Why isn&#x27;t elasticity well supported in a service-based architecture?(サービスベースアーキテクチャではなぜ弾力性が十分にサポートされてないのか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;サービスの粒度が粗いかため。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;how-can-you-increase-the-number-of-architecture-quanta-in-a-service-based-architecture-sabisubesuakitekutiyadeakitekutiyaliang-zi-noshu-wozeng-yasunihadousurebaliang-ika&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-can-you-increase-the-number-of-architecture-quanta-in-a-service-based-architecture-sabisubesuakitekutiyadeakitekutiyaliang-zi-noshu-wozeng-yasunihadousurebaliang-ika&quot; aria-label=&quot;Anchor link for: how-can-you-increase-the-number-of-architecture-quanta-in-a-service-based-architecture-sabisubesuakitekutiyadeakitekutiyaliang-zi-noshu-wozeng-yasunihadousurebaliang-ika&quot;&gt;How can you increase the number of architecture quanta in a service-based architecture?(サービスベースアーキテクチャでアーキテクチャ量子の数を増やすにはどうすれば良いか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;UIとDBもServiceに統合させる。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chapter-14-event-driven-architecture-style&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-14-event-driven-architecture-style&quot; aria-label=&quot;Anchor link for: chapter-14-event-driven-architecture-style&quot;&gt;Chapter 14. Event-Driven Architecture Style&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;highly scalableでhigh-performanceなdistributed asynchronous architecture。
request-based modelではなく、event-based modelに基づく。これは特定の状況に反応して、そのeventに基づいたactionを実施するモデル。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;topology-3&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#topology-3&quot; aria-label=&quot;Anchor link for: topology-3&quot;&gt;Topology&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;mediator topologyとbroker topologyという二つに大別される。
broker topologyはevent処理に際して動的な制御が必要になる場合に、mediator topologyはevent処理のworkflow制御が必要な場合にそれぞれ利用される。これらのtopologyではarchitecture characteristicsとimplementation strategiesが異なるので、適切なtopologyを選択することが重要。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;broker-topology&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#broker-topology&quot; aria-label=&quot;Anchor link for: broker-topology&quot;&gt;Broker Topology&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;中央のevent mediatorが存在しない点がmediator topologyと異なる。
message flowはmessage broker(RabbitMQ等)を介して、chain-like broadcasting fashionでevent processorに分散される。
event processing flowがsimpleでcentral event orchestrationを必要としない場合に便利なtopology。&lt;&#x2F;p&gt;
&lt;p&gt;broker topologyに以下の4つの主要なarchitecture componentがある。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;initiating event(開始イベント)
&lt;ul&gt;
&lt;li&gt;event flowを開始する最初のevent&lt;&#x2F;li&gt;
&lt;li&gt;オンラインオークションでの入札、医療給付システムにおける転職等&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;event broker&lt;&#x2F;li&gt;
&lt;li&gt;event processor
&lt;ul&gt;
&lt;li&gt;event brokerからeventを受け取り、処理を行い、processing eventを作成する&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;processing event(処理イベント)
&lt;ul&gt;
&lt;li&gt;必要に応じてevent brokerに送られる&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Broker topologyでは、他のevent processorを気にすることなく、event processorが何をしたかをsystemの残りの部分に伝えることが良いpracticeとされている。
Broker topologyは高いperformanceやscalabilityをもつが、以下のようなマイナス面もある。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;workflow全体を制御できない。&lt;&#x2F;li&gt;
&lt;li&gt;Error Handling
&lt;ul&gt;
&lt;li&gt;障害が発生してもsystem内のどの要素もそれを認識できない。なんらかの自動または手動の介入が必要になる。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Recoverability
&lt;ul&gt;
&lt;li&gt;開始eventを再送信できないので、失敗したところから再開するのが難しい。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Broker topologyは各componentが疎結になっていて、非常に素晴らしいarchitectureだと思うのですがエラー処理を考えると運用がとても大変そうに思えます。
自分は通知やBatch処理を非同期処理としてQueueに逃すようなシステムしか経験したことがないので、broker topologyは是非一度は体験してみたいarchitectureです。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;mediator-topology&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#mediator-topology&quot; aria-label=&quot;Anchor link for: mediator-topology&quot;&gt;Mediator Topology&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;broker topologyのいくつかの欠点を解消する(addresses some of the shortcomings)のがmediator topology。
mediatorはworkflowを制御する。
このtopologyではinitiating eventはevnet queueに送られ、mediatorによって受け取られる。
mediatorのみがeventの処理方法を知っており、対応するprocessing eventを生成して、専用のevent queueにeventを送信する。専用のevent queueではprocessorがlistenしており、通常は作業の完了をmediatorに通知する。
broker topologyと異なり、event processorは自身が行ったことをsystemにadvertiseしない。&lt;&#x2F;p&gt;
&lt;p&gt;Mediator topologyのほとんどの実装では、複数のmediatorがdomain,event groupごとに存在する。
また、mediatorに前段にmediatorを置くような構成もある。&lt;&#x2F;p&gt;
&lt;p&gt;Mediator topologyはworkflowに関する知識と制御をもつ。そうすることによって、event stateを管理しerror handling, を可能にする。
例えば、event処理が途中のstepで失敗した場合、その状態を永続化し、次のevent処理時に失敗したところから処理を再開するといったことが可能になる。&lt;&#x2F;p&gt;
&lt;p&gt;broker topologyとmediator topologyではprocessing eventについての解釈が異なる。
broker topologyではprocessing eventはsystemで発生したevent(things that have already happened)として公開された。また、eventは無視されることもある。
一方、mediator topologyにおけるprocessing eventはcommand(things that need to happen)を意味する。
mediator topologyのtrade-offとしては、workflowの動的な処理を宣言的に記述するのが難しい。またevent processorはbroker topologyに比べてmediatorに対して結合度が上がる。&lt;&#x2F;p&gt;
&lt;p&gt;本質的には、workflow control and error handling capability とhigh performance and scalabilityのtrade-offで、brokerかmediator topologyかが決まる。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;asynchronous-capabilities&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#asynchronous-capabilities&quot; aria-label=&quot;Anchor link for: asynchronous-capabilities&quot;&gt;Asynchronous Capabilities&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Event-driven architectureは非同期通信のみに依存しているという特徴をもつ。
この非同期通信はさらに以下の方式に分類できる。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;fire-and-forget processing(no response required)&lt;&#x2F;li&gt;
&lt;li&gt;request&#x2F;reply processing(response required from the event consumer)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;非同期通信は、eventを発行した時点で処理にたいしてresponseを返せるので、responsiveness(応答性)が高い。
主な問題点(main issue)はerror handling。これがevent-driven systemを複雑にする。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;error-handling&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#error-handling&quot; aria-label=&quot;Anchor link for: error-handling&quot;&gt;Error Handling&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;workflow event pattern of reactive architectureが非同期処理でのerror handlingに対処する方法の一つ。
このpatternでは、workflow delegateを利用する。
具体的には、event consumerの処理中にerrorが発生したら、そのerrorをworkflow processorのqueueに投げる。
workflow processorはerrorをうけとると、修正が可能なら修正して元のqueueに再びenqueueする。
修正できない場合は、さらに別のqueueに送る。このqueueはdashboardと呼ばれるapplicationがlistenしており、運用担当者にエラーが表示される。&lt;&#x2F;p&gt;
&lt;p&gt;この説明を読んだ時に、自動でエラーを修正して再リトライなんてできるのかなと思いました。失敗の原因が外部サービスの一時的なダウン等で、単純なretryならできそうですが、本書には入力を修正と書いてありました。ユーザの助けなしに誤った入力を正しい入力に変換することなんてできるか疑問に思いました。ユーザの意に反した修正だと問題がさらにややこしくなりそうだなとも。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;preventing-data-loss&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#preventing-data-loss&quot; aria-label=&quot;Anchor link for: preventing-data-loss&quot;&gt;Preventing Data Loss&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;非同期処理においては、data lossは常に最大の懸念事項(primary concern)になる。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;EventのEnqueueが失敗する
&lt;ul&gt;
&lt;li&gt;enqueueを同期通信にしてなんらかの永続化成功をもって、enqueue成功とする&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Queueからeventを受信後に、processorが落ちる
&lt;ul&gt;
&lt;li&gt;processorがevent完了をqueue側に知らせるようにする&lt;&#x2F;li&gt;
&lt;li&gt;AWS SQSはこれと思われる&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Event processorが永続化に失敗する
&lt;ul&gt;
&lt;li&gt;これは非同期通信でなくても起きることなのでは。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;主に、enqueue,dequeueに関連してeventがlossしないことが必要。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;broadcast-capabilities&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#broadcast-capabilities&quot; aria-label=&quot;Anchor link for: broadcast-capabilities&quot;&gt;Broadcast Capabilities&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;broadcastはevent processor間の最上位の分離レベル(the highest level of decoupling between event processors)を実現する。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;request-reply&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#request-reply&quot; aria-label=&quot;Anchor link for: request-reply&quot;&gt;Request-Reply&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Event-driven architectureにおいて、同期通信はrequest-reply messaging(疑似的同期通信)によって実現される。
これはevent producerがreply queueをもち、eventをproduceしたあとにreply queueでblockすることで実現される。
request-reply messagingの主な実装には二つの種類がある。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;correlation-id-xiang-guan-id&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#correlation-id-xiang-guan-id&quot; aria-label=&quot;Anchor link for: correlation-id-xiang-guan-id&quot;&gt;Correlation ID(相関ID)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;messageがもとのmessageのreplyであることを示すために、correlation id fieldをmessageに設けてreplyが紐づくrequestを特定できるようにするもの。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;temporary-queue&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#temporary-queue&quot; aria-label=&quot;Anchor link for: temporary-queue&quot;&gt;Temporary queue&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;特定のrequest専用のqueueが一時的に作成する。temporary queueの識別子をmessageにのせるので、consumerはその識別子でtemporary queueを特定して、replyを送る。
temporary queueはシンプルであるものの、状態を管理する必要があるので、performanceに影響を与える。
そのため、correlation idを利用する方式がおすすめ。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions-13&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-13&quot; aria-label=&quot;Anchor link for: self-assessment-questions-13&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;what-are-the-primary-differences-between-the-broker-and-mediator-topologies-burokatoporozitomedeietatoporozinozhu-nawei-ihahe-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-the-primary-differences-between-the-broker-and-mediator-topologies-burokatoporozitomedeietatoporozinozhu-nawei-ihahe-ka&quot; aria-label=&quot;Anchor link for: what-are-the-primary-differences-between-the-broker-and-mediator-topologies-burokatoporozitomedeietatoporozinozhu-nawei-ihahe-ka&quot;&gt;What are the primary differences between the broker and mediator topologies?(ブローカートポロジーとメディエータートポロジーの主な違いは何か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;workflowを制御するmeditorが存在するかどうか。
また、processing eventに対する解釈が違う。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;for-better-workflow-control-would-you-use-the-mediator-or-broker-topology-wakuhurowoyoriyokuzhi-yu-suruniha-medeietatoburokanodotiranotoporoziwoshi-yong-subekika&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#for-better-workflow-control-would-you-use-the-mediator-or-broker-topology-wakuhurowoyoriyokuzhi-yu-suruniha-medeietatoburokanodotiranotoporoziwoshi-yong-subekika&quot; aria-label=&quot;Anchor link for: for-better-workflow-control-would-you-use-the-mediator-or-broker-topology-wakuhurowoyoriyokuzhi-yu-suruniha-medeietatoburokanodotiranotoporoziwoshi-yong-subekika&quot;&gt;For better workflow control, would you use the mediator or broker topology?(ワークフローをよりよく制御するには、メディエーターとブローカーのどちらのトポロジーを使用すべきか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;mediator。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;does-the-broker-topology-usually-leverage-a-publish-and-subscribe-model-with-topics-or-a-point-to-point-model-with-queues-burokatoporozihatong-chang-topitukuwoshi-yong-sitapaburitusiyu-sabusukuraibumoderutokiyuwoshi-yong-sitapointoer-pointomoderunodotirawohuo-yong-suruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#does-the-broker-topology-usually-leverage-a-publish-and-subscribe-model-with-topics-or-a-point-to-point-model-with-queues-burokatoporozihatong-chang-topitukuwoshi-yong-sitapaburitusiyu-sabusukuraibumoderutokiyuwoshi-yong-sitapointoer-pointomoderunodotirawohuo-yong-suruka&quot; aria-label=&quot;Anchor link for: does-the-broker-topology-usually-leverage-a-publish-and-subscribe-model-with-topics-or-a-point-to-point-model-with-queues-burokatoporozihatong-chang-topitukuwoshi-yong-sitapaburitusiyu-sabusukuraibumoderutokiyuwoshi-yong-sitapointoer-pointomoderunodotirawohuo-yong-suruka&quot;&gt;Does the broker topology usually leverage a publish-and-subscribe model with topics or a point-to-point model with queues?(ブローカートポロジーは通常、トピックを使用したパブリッシュ&#x2F;サブスクライブモデルとキューを使用したポイント二ポイントモデルのどちらを活用するか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;publish-and-subscribe model。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;name-two-primary-advantage-of-asynchronous-communications-fei-tong-qi-tong-xin-nozhu-nali-dian-wo2tuju-geyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#name-two-primary-advantage-of-asynchronous-communications-fei-tong-qi-tong-xin-nozhu-nali-dian-wo2tuju-geyo&quot; aria-label=&quot;Anchor link for: name-two-primary-advantage-of-asynchronous-communications-fei-tong-qi-tong-xin-nozhu-nali-dian-wo2tuju-geyo&quot;&gt;Name two primary advantage of asynchronous communications.(非同期通信の主な利点を2つ挙げよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;応答性とモジュール性。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;give-an-example-of-a-typical-request-within-thr-request-based-model-rikuesutobesumoderuniokerudian-xing-de-narikuesutoli-woju-geyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#give-an-example-of-a-typical-request-within-thr-request-based-model-rikuesutobesumoderuniokerudian-xing-de-narikuesutoli-woju-geyo&quot; aria-label=&quot;Anchor link for: give-an-example-of-a-typical-request-within-thr-request-based-model-rikuesutobesumoderuniokerudian-xing-de-narikuesutoli-woju-geyo&quot;&gt;Give an example of a typical request within thr request-based model.(リクエストベースモデルにおける典型的なリクエスト例を挙げよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;過去6か月間の注文履歴の取得。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;give-an-example-of-a-typical-request-in-an-event-based-model-ibentobesumoderuniokerudian-xing-de-narikuesutoli-woju-geyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#give-an-example-of-a-typical-request-in-an-event-based-model-ibentobesumoderuniokerudian-xing-de-narikuesutoli-woju-geyo&quot; aria-label=&quot;Anchor link for: give-an-example-of-a-typical-request-in-an-event-based-model-ibentobesumoderuniokerudian-xing-de-narikuesutoli-woju-geyo&quot;&gt;Give an example of a typical request in an event-based model.(イベントベースモデルにおける典型的なリクエスト例を挙げよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;オンラインオークションでの商品への入札。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-is-the-difference-between-an-initiating-event-and-a-processing-event-in-event-driven-architecture-ibentoqu-dong-akitekutiyaniokerukai-shi-ibentotochu-li-ibentonowei-ihahe-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-difference-between-an-initiating-event-and-a-processing-event-in-event-driven-architecture-ibentoqu-dong-akitekutiyaniokerukai-shi-ibentotochu-li-ibentonowei-ihahe-ka&quot; aria-label=&quot;Anchor link for: what-is-the-difference-between-an-initiating-event-and-a-processing-event-in-event-driven-architecture-ibentoqu-dong-akitekutiyaniokerukai-shi-ibentotochu-li-ibentonowei-ihahe-ka&quot;&gt;What is the difference between an initiating event and a processing event in event-driven architecture?(イベント駆動アーキテクチャにおける開始イベントと処理イベントの違いは何か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;それがシステムの外部から来るか、システム内部で生成されるか。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-are-some-of-the-techniques-for-preventing-data-loss-when-sending-and-receiving-messages-from-a-queue-kiyukarametuseziwosong-shou-xin-suruji-nidetarosuwofang-gutamenoji-shu-nihadonoyounamonogaaruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-some-of-the-techniques-for-preventing-data-loss-when-sending-and-receiving-messages-from-a-queue-kiyukarametuseziwosong-shou-xin-suruji-nidetarosuwofang-gutamenoji-shu-nihadonoyounamonogaaruka&quot; aria-label=&quot;Anchor link for: what-are-some-of-the-techniques-for-preventing-data-loss-when-sending-and-receiving-messages-from-a-queue-kiyukarametuseziwosong-shou-xin-suruji-nidetarosuwofang-gutamenoji-shu-nihadonoyounamonogaaruka&quot;&gt;What are some of the techniques for preventing data loss when sending and receiving messages from a queue?(キューからメッセージを送受信する際にデータロスを防ぐための技術にはどのようなものがあるか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;Enqueue時にqueue側で永続化の成功までを同期通信で担保する&lt;&#x2F;li&gt;
&lt;li&gt;Dequeue時にqueue側でmessageを削除せずに、consumerからの成功まで削除を遅らせる。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;what-are-three-main-driving-architecture-characteristics-for-using-event-driven-architecture-ibentoqu-dong-akitekutiyawoshi-uji-nihe-tonaru3tunozhu-yao-naakitekutiyate-xing-hahe-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-three-main-driving-architecture-characteristics-for-using-event-driven-architecture-ibentoqu-dong-akitekutiyawoshi-uji-nihe-tonaru3tunozhu-yao-naakitekutiyate-xing-hahe-ka&quot; aria-label=&quot;Anchor link for: what-are-three-main-driving-architecture-characteristics-for-using-event-driven-architecture-ibentoqu-dong-akitekutiyawoshi-uji-nihe-tonaru3tunozhu-yao-naakitekutiyate-xing-hahe-ka&quot;&gt;What are three main driving architecture characteristics for using event-driven architecture?(イベント駆動アーキテクチャを使う際に核となる3つの主要なアーキテクチャ特性は何か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;Performance&lt;&#x2F;li&gt;
&lt;li&gt;Scalability&lt;&#x2F;li&gt;
&lt;li&gt;Durability&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;what-are-some-of-the-architecture-characteristics-that-are-not-well-supported-in-event-driven-architecture-ibentoqu-dong-akitekutiyadeumakusapotosarenaiakitekutiyate-xing-hadoreka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-some-of-the-architecture-characteristics-that-are-not-well-supported-in-event-driven-architecture-ibentoqu-dong-akitekutiyadeumakusapotosarenaiakitekutiyate-xing-hadoreka&quot; aria-label=&quot;Anchor link for: what-are-some-of-the-architecture-characteristics-that-are-not-well-supported-in-event-driven-architecture-ibentoqu-dong-akitekutiyadeumakusapotosarenaiakitekutiyate-xing-hadoreka&quot;&gt;What are some of the architecture characteristics that are not well supported in event-driven architecture?(イベント駆動アーキテクチャでうまくサポートされないアーキテクチャ特性はどれか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;Simplicity&lt;&#x2F;li&gt;
&lt;li&gt;Testability&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;chapter-15-space-based-architecture-style&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-15-space-based-architecture-style&quot; aria-label=&quot;Anchor link for: chapter-15-space-based-architecture-style&quot;&gt;Chapter 15. Space-Based Architecture Style&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;一般的なweb applicationでは負荷に対してスケールアウトしても、最終的にはDBがボトルネックになる。同時接続トランザクション数等。
同時接続ユーザ数が変動して予測できないようなアプリケーションにおいて、scalabilityをarchitecture的に解決することは、DBをスケールアウトさせたりcacheを後付けしたりするよりもよいアプローチであることが多い。&lt;&#x2F;p&gt;
&lt;p&gt;このarchitectureを初めて知りました。また、実装として紹介されている、&lt;a href=&quot;https:&#x2F;&#x2F;ignite.apache.org&#x2F;&quot;&gt;Apache Ignite&lt;&#x2F;a&gt;や&lt;a href=&quot;https:&#x2F;&#x2F;hazelcast.com&#x2F;&quot;&gt;Hazelcast&lt;&#x2F;a&gt;を利用した経験がないので、具体的なイメージがわきませんでした。
どうやらDBへの書き込みを非同期化して、各applicationのメモリに必要なデータがdbからなんらかの方法でreplicateされるというような仕組みらしいです。
通常のtransactional processingから中央のDBの関与を取り除くことで、near-infinite scalabilityを実現するそうです。一体どんなtrade-offがあるのか逆に怖くなります。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions-14&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-14&quot; aria-label=&quot;Anchor link for: self-assessment-questions-14&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&#x2F;&#x2F; TODO: space-based architectureの実装イメージがわかったら取り組む。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chapter-16-orchestration-driven-service-oriented-architecture-style&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-16-orchestration-driven-service-oriented-architecture-style&quot; aria-label=&quot;Anchor link for: chapter-16-orchestration-driven-service-oriented-architecture-style&quot;&gt;Chapter 16. Orchestration-driven Service-Oriented Architecture Style&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;このarchitectureについても、enterprise service busやenterprise serviceが具体的になにを意味するのかいまいち実装のイメージがわかりませんでした。
各ドメインにCustomerが登場するので、全て切り出して単一のCustomerサービスに分離したところ、各Component間に膨大な量の結合が発生したという例だけは理解できました。
自分は逆のパターン、各ドメインでCustomerを定義するパターンを実装したことがあるのですが、これはこれでつらかったです。(データが自ドメイン+外部サービスに分散しているので、datastore側でsortかけられない等)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions-15&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-15&quot; aria-label=&quot;Anchor link for: self-assessment-questions-15&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Skip。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chapter-17-microservices-architecture&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-17-microservices-architecture&quot; aria-label=&quot;Anchor link for: chapter-17-microservices-architecture&quot;&gt;Chapter 17. Microservices Architecture&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;history&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#history&quot; aria-label=&quot;Anchor link for: history&quot;&gt;History&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;ほとんどのarchitectureの流行りは、architect達が共通の意思決定を行ったことが事後的に認識され、命名されることによって作られる。一方で、microservices architectureは&lt;a href=&quot;https:&#x2F;&#x2F;martinfowler.com&#x2F;articles&#x2F;microservices.html&quot;&gt;Microservices&lt;&#x2F;a&gt;というMartin FowlerとJames Levisによるブログエントリーをきっかけに普及した。
Microservicesはhigh decouplingを再利用性よりも優先し、bounded contextを物理的にモデル化したもの。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;granularity-li-du&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#granularity-li-du&quot; aria-label=&quot;Anchor link for: granularity-li-du&quot;&gt;Granularity(粒度)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Serviceをまたぐとtransaction管理が複雑になるので、serviceの粒度が問題になる。
transactionの範囲(=データの整合性が強く求められる範囲)は要件(ドメイン)で決まるので、この範囲をbounded contextとしてserviceの粒度の基準にしようとしているのがmicroserviceという理解です。
microと書いてあるからといって、必ずしもserviceの粒度を小さく保たなくてはならないわけではないと書いてあります。
適切なboundaryを見つけるためのガイドラインとして以下が挙げられています。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Purpose
&lt;ul&gt;
&lt;li&gt;各microserviceは高い機能的凝集を有しており、application全体におけるひとつの重要な振る舞いを提供するが理想。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Transactions
&lt;ul&gt;
&lt;li&gt;bounded contextはbusiness workflows。distributed transactionを避けられればより望ましい。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Choreography
&lt;ul&gt;
&lt;li&gt;機能の実現で必要とするservice間の通信が多くなってしまう場合、serviceの粒度を大きくしたほうがよいかもしれない。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Microservicesではdatastoreも共有しないので、RDBに信頼できる唯一の値を保持するアプローチがとれない。
この問題に対して、ある事実にを管理するドメインを決めて、そのドメインから値を取得するか、replicationやcacheを利用して分散させるかして対応する。
自分は後者のreplicationを利用した方式を経験したことがないのでどうやって実装するのか興味があります。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;operational-reuse&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#operational-reuse&quot; aria-label=&quot;Anchor link for: operational-reuse&quot;&gt;Operational Reuse&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Microservices architectureがprefer duplication to coupling(結合よりも重複を好む)ではあるものの、これはmonitoring,logging, circuit breakersといったドメインに影響されない運用面での再利用性にまで及ぶか。
microservicesではどうやらこの二つは分けて考えるとあるので、ドメイン以外のapplication共通部分には分離性の要求は及ばないと考えてよさそう。
この問題へのアプローチとして、sidecar patternが提案されている。sidecar componentはPod内のcontainerを想定するとして、このsidecarに運用面の関心事を全て処理させる。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;frontends&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#frontends&quot; aria-label=&quot;Anchor link for: frontends&quot;&gt;Frontends&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;DDDに忠実に従うとUIもbounded contextによって分離されるが、monolithic frontendも登場している。
この辺りは、UIを分断してもUI側でなんらかの共通化は必ず必要になると思うので、組織ごとに自由に決めていいんじゃないかと思う。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;communication&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#communication&quot; aria-label=&quot;Anchor link for: communication&quot;&gt;Communication&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Microservicesにおける同期通信では、protocol-aware heterogeneous interoperabilityを利用する。
これは要はgRPCのことだと思う。
コラムで、開発チームが誤って違いのチームに結合点を作らないように、違いのチームで異なる技術スタック(Javaと.NET)を使うことを強制した例が登場した。
これはおもしろいけどやりすぎなんじゃないかとは思った。新しいチームできたらGoになるのだろうか。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;transactions-and-sagas&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#transactions-and-sagas&quot; aria-label=&quot;Anchor link for: transactions-and-sagas&quot;&gt;Transactions and Sagas&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The best advice for architects who want to do transactions across services is: don’t!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Richards, Mark; Ford, Neal. Fundamentals of Software Architecture . O&#x27;Reilly Media. Kindle Edition.&lt;&#x2F;p&gt;
&lt;p&gt;とあるように基本はtransaction boundariesとbounded contextを一致させてtransactionが閉じるようにする。
とはいうものの、architecture characteristicsがまったく異なるservice間にtransactionが必要になることもある。そんなときに登場するdistributed transactionのpatternとしてsagaがある。&lt;&#x2F;p&gt;
&lt;p&gt;sagaについては&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.co.jp&#x2F;dp&#x2F;B086JJNDKS&#x2F;&quot;&gt;マイクロサービスパターン&lt;&#x2F;a&gt;や&lt;a href=&quot;https:&#x2F;&#x2F;www.oreilly.co.jp&#x2F;books&#x2F;9784873119311&#x2F;&quot;&gt;モノリスからマイクロサービスへ&lt;&#x2F;a&gt;に説明があったのでそこから調べてみようと思いました。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions-16&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-16&quot; aria-label=&quot;Anchor link for: self-assessment-questions-16&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;why-is-the-bounded-context-concept-so-critical-for-microservices-architecture-jing-jie-dukeraretakontekisutonogai-nian-hanazemaikurosabisuakitekutiyanitotutezhong-yao-nanoka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-is-the-bounded-context-concept-so-critical-for-microservices-architecture-jing-jie-dukeraretakontekisutonogai-nian-hanazemaikurosabisuakitekutiyanitotutezhong-yao-nanoka&quot; aria-label=&quot;Anchor link for: why-is-the-bounded-context-concept-so-critical-for-microservices-architecture-jing-jie-dukeraretakontekisutonogai-nian-hanazemaikurosabisuakitekutiyanitotutezhong-yao-nanoka&quot;&gt;Why is the bounded context concept so critical for microservices architecture?(境界づけられたコンテキストの概念はなぜマイクロサービスアーキテクチャにとって重要なのか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;microservicesの粒度はtransactionの範囲で決まり、transactionはデータの整合性を保ちたい範囲を意味し、データの整合性の要求はビジネス上のdomainやworkflowに由来するから。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-are-three-ways-of-determining-if-you-have-thr-right-level-of-granularity-in-a-microservice-maikurosabisunoli-du-gashi-qie-nareberuniarukadoukawopan-duan-suru3tunofang-fa-toha&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-three-ways-of-determining-if-you-have-thr-right-level-of-granularity-in-a-microservice-maikurosabisunoli-du-gashi-qie-nareberuniarukadoukawopan-duan-suru3tunofang-fa-toha&quot; aria-label=&quot;Anchor link for: what-are-three-ways-of-determining-if-you-have-thr-right-level-of-granularity-in-a-microservice-maikurosabisunoli-du-gashi-qie-nareberuniarukadoukawopan-duan-suru3tunofang-fa-toha&quot;&gt;What are three ways of determining if you have thr right level of granularity in a microservice?(マイクロサービスの粒度が適切なレベルにあるかどうかを判断する3つの方法とは)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;Purpose&lt;&#x2F;li&gt;
&lt;li&gt;Transactions&lt;&#x2F;li&gt;
&lt;li&gt;Choreography&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;what-functionality-might-be-contained-within-a-sidecar-saidokanihadonnaji-neng-gaaruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-functionality-might-be-contained-within-a-sidecar-saidokanihadonnaji-neng-gaaruka&quot; aria-label=&quot;Anchor link for: what-functionality-might-be-contained-within-a-sidecar-saidokanihadonnaji-neng-gaaruka&quot;&gt;What functionality might be contained within a sidecar?(サイドカーにはどんな機能があるか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;運用、技術的共通事項に関する機能。
authentication, logging, monitoring, tracing, retry, circuit breakers&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-is-the-difference-between-orchestration-and-choreograph-which-does-microservices-support-is-one-communication-style-easier-in-microservices-okesutoresiyontokoreogurahuinowei-ihananika-maikurosabisuhadotirawosapotositeiruka-maikurosabisudeha-dotiranokomiyunikesiyonsutairunofang-garong-yi-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-difference-between-orchestration-and-choreograph-which-does-microservices-support-is-one-communication-style-easier-in-microservices-okesutoresiyontokoreogurahuinowei-ihananika-maikurosabisuhadotirawosapotositeiruka-maikurosabisudeha-dotiranokomiyunikesiyonsutairunofang-garong-yi-ka&quot; aria-label=&quot;Anchor link for: what-is-the-difference-between-orchestration-and-choreograph-which-does-microservices-support-is-one-communication-style-easier-in-microservices-okesutoresiyontokoreogurahuinowei-ihananika-maikurosabisuhadotirawosapotositeiruka-maikurosabisudeha-dotiranokomiyunikesiyonsutairunofang-garong-yi-ka&quot;&gt;What is the difference between orchestration and choreograph? Which does microservices support? Is one communication style easier in microservices?(オーケストレーションとコレオグラフィの違いはなにか。マイクロサービスはどちらをサポートしているか。マイクロサービスでは、どちらのコミュニケーションスタイルの方が容易か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;中央でworkflowを管理する存在がいるかどうか。microserviceはchoreographと親和性が高いが、局所的なmediatorをもつこともできる。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-is-a-saga-in-microservices-maikurosabisuniokerusagatoha&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-a-saga-in-microservices-maikurosabisuniokerusagatoha&quot; aria-label=&quot;Anchor link for: what-is-a-saga-in-microservices-maikurosabisuniokerusagatoha&quot;&gt;What is a saga in microservices?(マイクロサービスにおけるサーガとは)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;複数datastoreにまたがるデータの更新を管理するための実装パターンの一つ。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;why-are-agility-testability-and-deployability-so-well-supported-in-microservices-maikurosabisudeaziritei-tesutorong-yi-xing-depuroirong-yi-xing-gasapotosareteiruli-you-ha&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-are-agility-testability-and-deployability-so-well-supported-in-microservices-maikurosabisudeaziritei-tesutorong-yi-xing-depuroirong-yi-xing-gasapotosareteiruli-you-ha&quot; aria-label=&quot;Anchor link for: why-are-agility-testability-and-deployability-so-well-supported-in-microservices-maikurosabisudeaziritei-tesutorong-yi-xing-depuroirong-yi-xing-gasapotosareteiruli-you-ha&quot;&gt;Why are agility, testability, and deployability so well supported in microservices?(マイクロサービスでアジリティ、テスト容易性、デプロイ容易性がサポートされている理由は)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;高度に分離された非常に小さなデプロイメントユニットで構成されているから。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-are-two-reasons-performance-is-usually-an-issue-in-microservices-yi-ban-nimaikurosabisudepahuomansugawen-ti-ninaruli-you-wo2tuju-geyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-two-reasons-performance-is-usually-an-issue-in-microservices-yi-ban-nimaikurosabisudepahuomansugawen-ti-ninaruli-you-wo2tuju-geyo&quot; aria-label=&quot;Anchor link for: what-are-two-reasons-performance-is-usually-an-issue-in-microservices-yi-ban-nimaikurosabisudepahuomansugawen-ti-ninaruli-you-wo2tuju-geyo&quot;&gt;What are two reasons performance is usually an issue in microservices?(一般にマイクロサービスでパフォーマンスが問題になる理由を2つ挙げよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;service間の通信でnetwork呼び出しを多様し、その際にauthentication&#x2F;authorizationのオーバーヘッドが発生するから。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;is-microservices-a-domain-partitioned-architecture-or-a-technically-partitioned-one-maikurosabisuhadomeinniyotutefen-ge-saretaakitekutiyaka-soretomoji-shu-niyotutefen-ge-sareetaakitekutiyaka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#is-microservices-a-domain-partitioned-architecture-or-a-technically-partitioned-one-maikurosabisuhadomeinniyotutefen-ge-saretaakitekutiyaka-soretomoji-shu-niyotutefen-ge-sareetaakitekutiyaka&quot; aria-label=&quot;Anchor link for: is-microservices-a-domain-partitioned-architecture-or-a-technically-partitioned-one-maikurosabisuhadomeinniyotutefen-ge-saretaakitekutiyaka-soretomoji-shu-niyotutefen-ge-sareetaakitekutiyaka&quot;&gt;Is microservices a domain-partitioned architecture or a technically partitioned one?(マイクロサービスはドメインによって分割されたアーキテクチャか、それとも技術によって分割されえたアーキテクチャか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;domain-partitioned architecture。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;describe-a-topology-where-a-microservices-ecosystem-might-be-only-a-single-quantum-maikurosabisunoekosisutemugadan-yi-noliang-zi-sikachi-tanaike-neng-xing-noarutoporoziwoshuo-ming-seyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#describe-a-topology-where-a-microservices-ecosystem-might-be-only-a-single-quantum-maikurosabisunoekosisutemugadan-yi-noliang-zi-sikachi-tanaike-neng-xing-noarutoporoziwoshuo-ming-seyo&quot; aria-label=&quot;Anchor link for: describe-a-topology-where-a-microservices-ecosystem-might-be-only-a-single-quantum-maikurosabisunoekosisutemugadan-yi-noliang-zi-sikachi-tanaike-neng-xing-noarutoporoziwoshuo-ming-seyo&quot;&gt;Describe a topology where a microservices ecosystem might be only a single quantum.(マイクロサービスのエコシステムが単一の量子しか持たない可能性のあるトポロジーを説明せよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;全てのserviceが同期通信で連携しあっている場合等。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;how-was-domain-reuse-addressed-in-microservices-how-was-operational-reuse-addressed-maikurosabisudehadomeinnozai-li-yong-hadonoyounixi-wareruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-was-domain-reuse-addressed-in-microservices-how-was-operational-reuse-addressed-maikurosabisudehadomeinnozai-li-yong-hadonoyounixi-wareruka&quot; aria-label=&quot;Anchor link for: how-was-domain-reuse-addressed-in-microservices-how-was-operational-reuse-addressed-maikurosabisudehadomeinnozai-li-yong-hadonoyounixi-wareruka&quot;&gt;How was domain reuse addressed in microservices? How was operational reuse addressed?(マイクロサービスではドメインの再利用はどのように扱われるか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;分離性をより重視し、重複を許容する。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chapter-18-choosing-the-appropriate-architecture-style&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-18-choosing-the-appropriate-architecture-style&quot; aria-label=&quot;Anchor link for: chapter-18-choosing-the-appropriate-architecture-style&quot;&gt;Chapter 18. Choosing the Appropriate Architecture Style&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;このarchitectureを使おうとは単純に言い切れない。
それでも、適切なarchitectureの選択に際して考慮されるべき要素はある。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shifting-fashion-in-architecture&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#shifting-fashion-in-architecture&quot; aria-label=&quot;Anchor link for: shifting-fashion-in-architecture&quot;&gt;Shifting &quot;Fashion&quot; in Architecture&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Preferred architecture styleは様々な要因によって変化していく。
数年前までは誰もKubernetesを知らなかったし、Docker等のコンテナ技術の影響力は予想以上だった。
また、ビジネスドメインも変化するし、外部要因も影響する。
Architectは現在のtrendを把握して、それに従う場合と例外も設ける場合を賢明に判断しなければならない。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;decision-criteria-pan-duan-ji-zhun&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#decision-criteria-pan-duan-ji-zhun&quot; aria-label=&quot;Anchor link for: decision-criteria-pan-duan-ji-zhun&quot;&gt;Decision Criteria(判断基準)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Architectが考慮すべき要素。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The domain
&lt;ul&gt;
&lt;li&gt;特にoperational architecture characteristicsに影響を与える側面は理解していなくてはならない&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Architecture characteristics&lt;&#x2F;li&gt;
&lt;li&gt;Data architecture
&lt;ul&gt;
&lt;li&gt;本書ではあまり触れられていないがdata設計の理解は必要&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Organizational factors
&lt;ul&gt;
&lt;li&gt;結局これの影響度が大きい一方で外に出しづらい話なので、いろいろな話が一般化できないのだと思う&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Knowledge of process, teams, and operational concerns
&lt;ul&gt;
&lt;li&gt;運用や開発プロセスの影響も考慮にいれる。(QAチームとの関わり方とか組織ごとに全然違うなと思います)&lt;&#x2F;li&gt;
&lt;li&gt;agile文化が根付いていない組織でそれに依存したarchitecture styleを採用すると失敗する&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Domain&#x2F;architecture isomorphism(同型性)
&lt;ul&gt;
&lt;li&gt;問題領域とarchitectureの適しているilitiesが一致しているか&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;self-assessment-questions-17&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-17&quot; aria-label=&quot;Anchor link for: self-assessment-questions-17&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;in-what-way-does-the-data-architecture-structure-of-the-logical-and-physical-data-models-influence-the-choice-of-architecture-style-detaakitekutiya-lun-li-detamoderutowu-li-detamoderunogou-zao-ha-donoyounafang-fa-deakitekutiyasutairunoxuan-ze-niying-xiang-woyu-eruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-what-way-does-the-data-architecture-structure-of-the-logical-and-physical-data-models-influence-the-choice-of-architecture-style-detaakitekutiya-lun-li-detamoderutowu-li-detamoderunogou-zao-ha-donoyounafang-fa-deakitekutiyasutairunoxuan-ze-niying-xiang-woyu-eruka&quot; aria-label=&quot;Anchor link for: in-what-way-does-the-data-architecture-structure-of-the-logical-and-physical-data-models-influence-the-choice-of-architecture-style-detaakitekutiya-lun-li-detamoderutowu-li-detamoderunogou-zao-ha-donoyounafang-fa-deakitekutiyasutairunoxuan-ze-niying-xiang-woyu-eruka&quot;&gt;In what way does the data architecture(structure of the logical and physical data models) influence the choice of architecture style?(データアーキテクチャ(論理データモデルと物理データモデルの構造)は、どのような方法でアーキテクチャスタイルの選択に影響を与えるか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;整合性を保つ必要がある範囲(=transaction boundaries)に影響し、DBの粒度に影響を与える。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;how-does-it-influence-your-choice-of-architecture-style-to-use-shang-ji-hashi-yong-suruakitekutiyasutairunoxuan-ze-nidonoyounaying-xiang-woataeruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-does-it-influence-your-choice-of-architecture-style-to-use-shang-ji-hashi-yong-suruakitekutiyasutairunoxuan-ze-nidonoyounaying-xiang-woataeruka&quot; aria-label=&quot;Anchor link for: how-does-it-influence-your-choice-of-architecture-style-to-use-shang-ji-hashi-yong-suruakitekutiyasutairunoxuan-ze-nidonoyounaying-xiang-woataeruka&quot;&gt;How does it influence your choice of architecture style to use?(上記は使用するアーキテクチャスタイルの選択にどのような影響をあたえるか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;Microservicesを選択していた場合、serviceの粒度。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;delineate-the-steps-an-architect-uses-to-determine-style-of-architecture-data-partitioning-and-communication-styles-akitekutiyasutairu-detafen-ge-tong-xin-sutairuwojue-ding-suruji-niakitekutogayong-irushou-shun-woshuo-ming-seyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#delineate-the-steps-an-architect-uses-to-determine-style-of-architecture-data-partitioning-and-communication-styles-akitekutiyasutairu-detafen-ge-tong-xin-sutairuwojue-ding-suruji-niakitekutogayong-irushou-shun-woshuo-ming-seyo&quot; aria-label=&quot;Anchor link for: delineate-the-steps-an-architect-uses-to-determine-style-of-architecture-data-partitioning-and-communication-styles-akitekutiyasutairu-detafen-ge-tong-xin-sutairuwojue-ding-suruji-niakitekutogayong-irushou-shun-woshuo-ming-seyo&quot;&gt;Delineate the steps an architect uses to determine style of architecture, data partitioning, and communication styles.(アーキテクチャスタイル、データ分割、通信スタイルを決定する際にアーキテクトが用いる手順を説明せよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;モノリスor分散 -&amp;gt; dataの持ち方 -&amp;gt; 通信方式(同期or非同期)&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-factor-leads-an-architect-toward-a-distributed-architecture-akitekutowofen-san-akitekutiyanixiang-kawaseruyao-yin-hahe-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-factor-leads-an-architect-toward-a-distributed-architecture-akitekutowofen-san-akitekutiyanixiang-kawaseruyao-yin-hahe-ka&quot; aria-label=&quot;Anchor link for: what-factor-leads-an-architect-toward-a-distributed-architecture-akitekutowofen-san-akitekutiyanixiang-kawaseruyao-yin-hahe-ka&quot;&gt;What factor leads an architect toward a distributed architecture?(アーキテクトを分散アーキテクチャに向かわせる要因は何か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;Scope of Architecture Characteristics(quantum)。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;part-iii-techniques-and-soft-skills&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-iii-techniques-and-soft-skills&quot; aria-label=&quot;Anchor link for: part-iii-techniques-and-soft-skills&quot;&gt;Part Ⅲ. Techniques and Soft Skills&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Software architectureの技術的側面の理解だけでなく、開発チームをガイドし、ステークホルダー達と協力していくにはテクニックとソフトスキルもまた必要になってくる。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chapter-19-architecture-decisions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-19-architecture-decisions&quot; aria-label=&quot;Anchor link for: chapter-19-architecture-decisions&quot;&gt;Chapter 19. Architecture Decisions&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;architectへのcore expectationsの一つにarchitecture decisionsがある。
architecture decisionsは、applicationやsystemの構造に関わる決定又はarchitecture characteristicsに関わる技術的な決定をさす。
architecture decisionsを下す際には、関連情報を集め、正当性を示し、ドキュメント化し、関係者に周知する必要がある。&lt;&#x2F;p&gt;
&lt;p&gt;またRelease It!におけるアーキテクチャ上重要な決定についての考え方も紹介されています。
Release It!では、structure, nonfunctional characteristics, dependencies, interfaces, construction techniquesに関わるものがそれであるとしています。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Structure(構造)
&lt;ul&gt;
&lt;li&gt;architecture styleに影響を与えるもの&lt;&#x2F;li&gt;
&lt;li&gt;マイクロサービス間でデータを共有する等&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Nonfunctional characteristics(非機能特性)
&lt;ul&gt;
&lt;li&gt;&quot;-ilities&quot;のこと&lt;&#x2F;li&gt;
&lt;li&gt;Performance等&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Dependencies(依存性)
&lt;ul&gt;
&lt;li&gt;component&#x2F;serviceのcoupling points(結合点)&lt;&#x2F;li&gt;
&lt;li&gt;scalability, modularity, testability等に影響する&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Interfaces
&lt;ul&gt;
&lt;li&gt;component&#x2F;serviceがどうやってアクセスされるか&lt;&#x2F;li&gt;
&lt;li&gt;contractのversioningやdeprecation strategyも含まれる&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Construction techniques(構築手法)
&lt;ul&gt;
&lt;li&gt;platforms, frameworks, tools, processesに関わるものでarchitecture characteristicsに影響するもの&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;architecture-decision-anti-patterns&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#architecture-decision-anti-patterns&quot; aria-label=&quot;Anchor link for: architecture-decision-anti-patterns&quot;&gt;Architecture Decision Anti-Patterns&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Architecture decisionを下す際に起きがちな3つのアンチパターンがある。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Covering Your Assets Anti-Pattern(資産防御アンチパターン)&lt;&#x2F;li&gt;
&lt;li&gt;Groundhog Day Anti-Pattern&lt;&#x2F;li&gt;
&lt;li&gt;Email-Driven Architecture Anti-Pattern&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;これらのアンチパターンは資産防御の克服がGroundhog Day,その克服がEmail-Drivenという関係にある。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;covering-your-assets-anti-pattern&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#covering-your-assets-anti-pattern&quot; aria-label=&quot;Anchor link for: covering-your-assets-anti-pattern&quot;&gt;Covering Your Assets Anti-Pattern&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;間違った選択を避けるためにarchitecture decisionsを下すことを避けたり、先延ばしにしたりする場合に発生するアンチパターン。
決定を保留できる期間は代替策がとれる間までの期間(last responsible moment)。
また、そもそも間違った決定をしまっても決定が変更できるような柔軟性を担保しておくために開発チームと密に連携しておくことも重要。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;groundhog-day-anti-pattern&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#groundhog-day-anti-pattern&quot; aria-label=&quot;Anchor link for: groundhog-day-anti-pattern&quot;&gt;Groundhog Day Anti-Pattern&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;このアンチパターンは、architectが決定の根拠を示さないため、決定が下されたにもかかわらず何度も同じ議論が繰り返されてしまうアンチパターンのこと。
決定の根拠を示す際には、技術的な理由とビジネス上の理由の両方を示すことが重要。
ビジネス的な価値につながらないarchitecture decisionはおそらく良い決定ではない。
ビジネス的な価値は具体的には、コスト、市場投入までの時間、ユーザ満足度、strategic positioning(戦略的ポジショニング)等が一般的。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;email-driven-architecture-anti-pattern&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#email-driven-architecture-anti-pattern&quot; aria-label=&quot;Anchor link for: email-driven-architecture-anti-pattern&quot;&gt;Email-Driven Architecture Anti-Pattern&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;メール駆動アンチパターンは、そもそもarchitect decisionがなされたことを忘れられたり、知らされていなかったりするためにその決定が実装されないというアンチパターン。
メールでは決定を伝えるツールとして不十分なところからきている。
決定を効果的に伝えるためルールとしては、第一にメールでは決定の性質と文脈のみに言及してWiki等の本文を記録しているシステムに誘導すること。
第二に、その決定に本当に関心がある人にだけ伝えること。&lt;&#x2F;p&gt;
&lt;p&gt;誰が関心があるかわからなかったりするので、開発者全員に周知したほうがよいと考えていたので、関心のある人にだけ伝えるというルールは以外でした。
(それ聞いてなかったです的な事態を避けたい)&lt;&#x2F;p&gt;
&lt;p&gt;個人的にはわざわざアンチパターンを持ち出さず、以下のポイントを守りましょうくらいの話でよいのではと思ったりしてます。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;決定を先送りできる期間は代替案次第。&lt;&#x2F;li&gt;
&lt;li&gt;決定の際はビジネスと技術両方の根拠を明示する。&lt;&#x2F;li&gt;
&lt;li&gt;ドキュメント化して関係者に周知する。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;architecture-decision-records&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#architecture-decision-records&quot; aria-label=&quot;Anchor link for: architecture-decision-records&quot;&gt;Architecture Decision Records&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Architecture Decision Records(ADR)というarchitecture decisionをドキュメント化する手法について。
ADRについては以前、同僚の方が実践されており自分でも真似しておりました。
厳密にやろうとするともっと細かく決まっているのかもしれませんが、要はADRとはarchitecture decisionをmarkdownで書く際のtemplateです。以下では各sectionについてみていきます。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;title&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#title&quot; aria-label=&quot;Anchor link for: title&quot;&gt;Title&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;architecture decisionを要約した短い文。ADRを識別するために通常は連番もふるそうです。RFCみたいな感じでしょうか。
例. 42. use of Asynchronous Messaging Between Order and Payment Services.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;status&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#status&quot; aria-label=&quot;Anchor link for: status&quot;&gt;Status&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Proposed(提案済み), Accepted(承認済み),Superseded(破棄)のいずれかのstatusを記載します。
Proposedはなんらかの意思決定プロセスの途中、Acceptedは決定が承認され実装の準備ができていること、Supersededは決定が他のADRに取って代わられた状態を表します。
破棄済みのステータスを用意しておくことで、決定の歴史的経緯やなぜ変更されたのか、新しい決定はなんなのかを記録できるようになります。破棄された側は新しいADRの、破棄した側はされた側のADRをそれぞれstatusに記載します。
必要に応じて、Request for Comments(RFC)等のステータスを設ける例も紹介されています。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;context&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#context&quot; aria-label=&quot;Anchor link for: context&quot;&gt;Context&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;決定時の状況や具体的な問題点を記載します。
これを言語化しておくのはとても大切だと思います。えてしてなんでこうなっているのだろうと思うようところは当時にはそれなりの理由があったりするもので、それを知っているかどうかで対応する人に影響があると思っております。
代替案の検討が長くなりそうなら、alternatives section作ってもよいとされています。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;decision&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#decision&quot; aria-label=&quot;Anchor link for: decision&quot;&gt;Decision&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Architecture decisionの決定内容と理由を記載します。受動態や思うといった表現でなく、very affirmative, commanding(非常に肯定的かつ命令的)に記載するのがよいとされています。そのほうが意思決定として良い表現だからです。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;consequences-ying-xiang&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#consequences-ying-xiang&quot; aria-label=&quot;Anchor link for: consequences-ying-xiang&quot;&gt;Consequences(影響)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Architecture decisionの影響を良い点、悪い点含めて記載する。
またなされたトレードオフについてもここに記載しておくとよいとされています。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;compliance&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#compliance&quot; aria-label=&quot;Anchor link for: compliance&quot;&gt;Compliance&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;本書で追加することが進められているセクション。
なされた決定が守られているかどうかをどうやって評価するかについて記載する。
手動でチェックするのか、CI等で自動化するのか等。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;notes-bei-kao&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#notes-bei-kao&quot; aria-label=&quot;Anchor link for: notes-bei-kao&quot;&gt;Notes(備考)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;もうひとつ追加することを進めているセクションがnotes section。具体的には以下のようなmetadataを記載する。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Original author(オリジナルの著者)&lt;&#x2F;li&gt;
&lt;li&gt;Approval date(承認日)&lt;&#x2F;li&gt;
&lt;li&gt;Approved by(承認者)&lt;&#x2F;li&gt;
&lt;li&gt;Superseded date(置き換え日)&lt;&#x2F;li&gt;
&lt;li&gt;Last modified date(最終更新日)&lt;&#x2F;li&gt;
&lt;li&gt;Modified by(変更点)&lt;&#x2F;li&gt;
&lt;li&gt;Last modification(最終更新内容)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ADRをgitで管理しているとある程度重複する内容も含まれるがあえて記載することがすすめられています。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;storing-adrs-adrnobao-cun&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#storing-adrs-adrnobao-cun&quot; aria-label=&quot;Anchor link for: storing-adrs-adrnobao-cun&quot;&gt;Storing ADRs(ADRの保存)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;大規模な組織の場合、gitで管理する際に以下の点に注意することが警告されています。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ADRをみる必要がある人がgitにアクセスできるとは限らない&lt;&#x2F;li&gt;
&lt;li&gt;Applicationのcontextを外れたADRを保管するのにgit repositoryは適していない&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;このあたりはドキュメント管理に利用しているsoftwareとの兼ね合いもあるので各組織で決めていくしかないのではと思っております。個人的にはgit管理したいです。(organizationにarchitecture_decisions repositoryを建てる)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions-18&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-18&quot; aria-label=&quot;Anchor link for: self-assessment-questions-18&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;what-is-the-covering-your-assets-anti-pattern-zi-chan-fang-yu-antipatantoha&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-covering-your-assets-anti-pattern-zi-chan-fang-yu-antipatantoha&quot; aria-label=&quot;Anchor link for: what-is-the-covering-your-assets-anti-pattern-zi-chan-fang-yu-antipatantoha&quot;&gt;What is the covering your assets anti-pattern?(資産防御アンチパターンとは)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;間違った決定を下すことを恐れて、決定を先送りにした結果代替案がとれなくなること。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-are-some-techniques-for-avoiding-the-email-driven-architecture-anti-pattern-meruqu-dong-akitekutiyapatanwohui-bi-surutamenotekunitukutoha&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-some-techniques-for-avoiding-the-email-driven-architecture-anti-pattern-meruqu-dong-akitekutiyapatanwohui-bi-surutamenotekunitukutoha&quot; aria-label=&quot;Anchor link for: what-are-some-techniques-for-avoiding-the-email-driven-architecture-anti-pattern-meruqu-dong-akitekutiyapatanwohui-bi-surutamenotekunitukutoha&quot;&gt;What are some techniques for avoiding the email-driven architecture anti-pattern?(メール駆動アーキテクチャパターンを回避するためのテクニックとは)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;ADRを実践して、メールではADRへのリンクを記載する。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-are-the-five-factors-michael-nygard-defines-for-identifying-something-as-architecturally-significant-he-kawoakitekutiyashang-zhong-yao-namonotote-ding-surutamenimichael-nygardgading-yi-sita5tunoyao-yin-hananika&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-the-five-factors-michael-nygard-defines-for-identifying-something-as-architecturally-significant-he-kawoakitekutiyashang-zhong-yao-namonotote-ding-surutamenimichael-nygardgading-yi-sita5tunoyao-yin-hananika&quot; aria-label=&quot;Anchor link for: what-are-the-five-factors-michael-nygard-defines-for-identifying-something-as-architecturally-significant-he-kawoakitekutiyashang-zhong-yao-namonotote-ding-surutamenimichael-nygardgading-yi-sita5tunoyao-yin-hananika&quot;&gt;What are the five factors Michael Nygard defines for identifying something as architecturally significant?(何かをアーキテクチャ上重要なものと特定するためにMichael Nygardが定義した5つの要因はなにか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;Structure(構造)&lt;&#x2F;li&gt;
&lt;li&gt;Nonfunctional characteristics(非機能特性)&lt;&#x2F;li&gt;
&lt;li&gt;Dependencies(依存性)&lt;&#x2F;li&gt;
&lt;li&gt;Interfaces&lt;&#x2F;li&gt;
&lt;li&gt;Construction techniques(構築手法)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;what-are-the-five-basic-sections-of-an-architecture-decision-record-akitekutiyadesiziyonrekodonoji-ben-de-nasekusiyonwo5tuju-geyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-the-five-basic-sections-of-an-architecture-decision-record-akitekutiyadesiziyonrekodonoji-ben-de-nasekusiyonwo5tuju-geyo&quot; aria-label=&quot;Anchor link for: what-are-the-five-basic-sections-of-an-architecture-decision-record-akitekutiyadesiziyonrekodonoji-ben-de-nasekusiyonwo5tuju-geyo&quot;&gt;What are the five basic sections of an architecture decision record?(アーキテクチャデシジョンレコードの基本的なセクションを5つ挙げよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;Title&lt;&#x2F;li&gt;
&lt;li&gt;Status&lt;&#x2F;li&gt;
&lt;li&gt;Context&lt;&#x2F;li&gt;
&lt;li&gt;Decision&lt;&#x2F;li&gt;
&lt;li&gt;Consequence&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;in-which-section-of-an-adr-do-you-typically-add-the-justification-for-an-architecture-decision-akitekutiyajue-ding-nogen-ju-wozhui-jia-surunoha-tong-chang-adrnodonosekusiyonka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-which-section-of-an-adr-do-you-typically-add-the-justification-for-an-architecture-decision-akitekutiyajue-ding-nogen-ju-wozhui-jia-surunoha-tong-chang-adrnodonosekusiyonka&quot; aria-label=&quot;Anchor link for: in-which-section-of-an-adr-do-you-typically-add-the-justification-for-an-architecture-decision-akitekutiyajue-ding-nogen-ju-wozhui-jia-surunoha-tong-chang-adrnodonosekusiyonka&quot;&gt;In which section of an ADR do you typically add the justification for an architecture decision?(アーキテクチャ決定の根拠を追加するのは、通常ADRのどのセクションか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;Decision.&lt;&#x2F;p&gt;
&lt;h6 id=&quot;assuming-you-don-t-need-a-separate-alternatives-section-in-which-section-of-an-adr-would-you-list-the-alternatives-to-your-proposed-solution-dai-ti-an-sekusiyonwodu-li-hua-saserubi-yao-hanaitoiuxiang-ding-nochang-he-ti-an-saretasoriyusiyonnodai-ti-an-woju-gerunohaadrnodonosekusiyonninaruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#assuming-you-don-t-need-a-separate-alternatives-section-in-which-section-of-an-adr-would-you-list-the-alternatives-to-your-proposed-solution-dai-ti-an-sekusiyonwodu-li-hua-saserubi-yao-hanaitoiuxiang-ding-nochang-he-ti-an-saretasoriyusiyonnodai-ti-an-woju-gerunohaadrnodonosekusiyonninaruka&quot; aria-label=&quot;Anchor link for: assuming-you-don-t-need-a-separate-alternatives-section-in-which-section-of-an-adr-would-you-list-the-alternatives-to-your-proposed-solution-dai-ti-an-sekusiyonwodu-li-hua-saserubi-yao-hanaitoiuxiang-ding-nochang-he-ti-an-saretasoriyusiyonnodai-ti-an-woju-gerunohaadrnodonosekusiyonninaruka&quot;&gt;Assuming you don&#x27;t need a separate Alternatives section, in which section of an ADR would you list the alternatives to your proposed solution?(代替案セクションを独立化させる必要はないという想定の場合、提案されたソリューションの代替案を挙げるのはADRのどのセクションになるか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;Context.&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-are-three-basic-criteria-in-which-you-would-mark-the-status-of-aan-adr-as-proposed-adrnosutetasuwoti-an-ji-mitosuru3tunoji-ben-de-naji-zhun-hahe-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-three-basic-criteria-in-which-you-would-mark-the-status-of-aan-adr-as-proposed-adrnosutetasuwoti-an-ji-mitosuru3tunoji-ben-de-naji-zhun-hahe-ka&quot; aria-label=&quot;Anchor link for: what-are-three-basic-criteria-in-which-you-would-mark-the-status-of-aan-adr-as-proposed-adrnosutetasuwoti-an-ji-mitosuru3tunoji-ben-de-naji-zhun-hahe-ka&quot;&gt;What are three basic criteria in which you would mark the status of aan ADR as Proposed?(ADRのステータスを提案済みとする3つの基本的な基準は何か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;コスト&lt;&#x2F;li&gt;
&lt;li&gt;チーム間の影響&lt;&#x2F;li&gt;
&lt;li&gt;セキュリティ&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;chapter-20-analyzing-architecture-risk&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-20-analyzing-architecture-risk&quot; aria-label=&quot;Anchor link for: chapter-20-analyzing-architecture-risk&quot;&gt;Chapter 20. Analyzing Architecture Risk&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;全てのarchitectureにはなんらかのリスクがある。
なので、継続的にリスクを分析してリスクを軽減する措置をとる必要がある。&lt;&#x2F;p&gt;
&lt;p&gt;ドメインやサービスごとに、scalability, availability, performance, security, data integrity等のリスクを数値化して評価していく。リスクの数値化は可能性*影響度を用いる。
またこの評価を定期的におこない変化のトレンドを把握しておくなどが説明されています。&lt;&#x2F;p&gt;
&lt;p&gt;正直この表から意味のある活動につなげられるのか疑問に思ってしまいましたが、曖昧でとらえどころがない問題に対して可能なかぎり定量的に取りくもうとしたらこうならざるを得ないのかもしれません。&lt;&#x2F;p&gt;
&lt;p&gt;また、リスク評価を複数人で行うRisk Stormingについても具体的なやり方が解説されています。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions-19&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-19&quot; aria-label=&quot;Anchor link for: self-assessment-questions-19&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;what-are-the-two-dimensions-of-the-risk-assessment-matrix-risukuasesumentomatorikusuno2tunoce-mian-toha&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-the-two-dimensions-of-the-risk-assessment-matrix-risukuasesumentomatorikusuno2tunoce-mian-toha&quot; aria-label=&quot;Anchor link for: what-are-the-two-dimensions-of-the-risk-assessment-matrix-risukuasesumentomatorikusuno2tunoce-mian-toha&quot;&gt;What are the two dimensions of the risk assessment matrix?(リスクアセスメントマトリクスの2つの側面とは)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;the overall impact of the risk(リスクの全体的な影響)&lt;&#x2F;li&gt;
&lt;li&gt;the likelihood of that risk occurring(リスク発生の可能性)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;what-are-some-ways-to-show-direction-of-particular-risk-within-a-risk-assessment-can-you-think-of-other-ways-to-indicate-whether-risk-is-getting-better-or-worse-risukuasesumentonozhong-de-te-ding-norisukunofang-xiang-xing-woshi-sufang-fa-nihadonoyounamonogaaruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-some-ways-to-show-direction-of-particular-risk-within-a-risk-assessment-can-you-think-of-other-ways-to-indicate-whether-risk-is-getting-better-or-worse-risukuasesumentonozhong-de-te-ding-norisukunofang-xiang-xing-woshi-sufang-fa-nihadonoyounamonogaaruka&quot; aria-label=&quot;Anchor link for: what-are-some-ways-to-show-direction-of-particular-risk-within-a-risk-assessment-can-you-think-of-other-ways-to-indicate-whether-risk-is-getting-better-or-worse-risukuasesumentonozhong-de-te-ding-norisukunofang-xiang-xing-woshi-sufang-fa-nihadonoyounamonogaaruka&quot;&gt;What are some ways to show direction of particular risk within a risk assessment? Can you think of other ways to indicate whether risk is getting better or worse?(リスクアセスメントの中で、特定のリスクの方向性を示す方法にはどのようなものがあるか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;リスクの改善を+, 悪化を-で表現する。また矢印と変化した値を記載する方法もある。
ただし、矢印の場合上向きが改善なのか悪化なのかについて判断がわかれている。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;why-is-it-necessary-for-risk-storming-to-be-a-collaborative-exercise-risukusutomingugagong-tong-zuo-ye-dearukotogabi-yao-nanohanazeka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-is-it-necessary-for-risk-storming-to-be-a-collaborative-exercise-risukusutomingugagong-tong-zuo-ye-dearukotogabi-yao-nanohanazeka&quot; aria-label=&quot;Anchor link for: why-is-it-necessary-for-risk-storming-to-be-a-collaborative-exercise-risukusutomingugagong-tong-zuo-ye-dearukotogabi-yao-nanohanazeka&quot;&gt;Why is it necessary for risk storming to be a collaborative exercise?(リスクストーミングが共同作業であることが必要なのはなぜか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;一人ではリスクを見落とす可能性があるし、システムの全ての部分について完全な知識をもつことはできないから。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;why-is-it-necessary-for-the-identification-activity-within-risk-storming-to-be-an-individual-activity-and-not-a-collaborative-one-risukusutomingudenoshi-bie-huo-dong-ga-gong-tong-huo-dong-dehanaku-ge-ren-de-nahuo-dong-dearukotogabi-yao-nanohanazeka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-is-it-necessary-for-the-identification-activity-within-risk-storming-to-be-an-individual-activity-and-not-a-collaborative-one-risukusutomingudenoshi-bie-huo-dong-ga-gong-tong-huo-dong-dehanaku-ge-ren-de-nahuo-dong-dearukotogabi-yao-nanohanazeka&quot; aria-label=&quot;Anchor link for: why-is-it-necessary-for-the-identification-activity-within-risk-storming-to-be-an-individual-activity-and-not-a-collaborative-one-risukusutomingudenoshi-bie-huo-dong-ga-gong-tong-huo-dong-dehanaku-ge-ren-de-nahuo-dong-dearukotogabi-yao-nanohanazeka&quot;&gt;Why is it necessary for the identification activity within risk storming to be an individual activity and not a collaborative one?(リスクストーミングでの識別活動が、共同活動ではなく、個人的な活動であることが必要なのはなぜか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;他の参加者の影響をうけないようにするため。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-would-you-do-it-three-participants-identified-risk-as-high-6-for-a-particular-area-of-the-architecture-but-another-participant-identified-it-as-only-medium-3-3ren-nocan-jia-zhe-gaakitekutiyanote-ding-noling-yu-norisukuwogao-6-toren-shi-sitaga-bie-nocan-jia-zhe-gazhong-3-toren-shi-sitachang-he-dousuruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-would-you-do-it-three-participants-identified-risk-as-high-6-for-a-particular-area-of-the-architecture-but-another-participant-identified-it-as-only-medium-3-3ren-nocan-jia-zhe-gaakitekutiyanote-ding-noling-yu-norisukuwogao-6-toren-shi-sitaga-bie-nocan-jia-zhe-gazhong-3-toren-shi-sitachang-he-dousuruka&quot; aria-label=&quot;Anchor link for: what-would-you-do-it-three-participants-identified-risk-as-high-6-for-a-particular-area-of-the-architecture-but-another-participant-identified-it-as-only-medium-3-3ren-nocan-jia-zhe-gaakitekutiyanote-ding-noling-yu-norisukuwogao-6-toren-shi-sitaga-bie-nocan-jia-zhe-gazhong-3-toren-shi-sitachang-he-dousuruka&quot;&gt;What would you do it three participants identified risk as high(6) for a particular area of the architecture, but another participant identified it as only medium(3)?(3人の参加者がアーキテクチャの特定の領域のリスクを高(6)と認識したが、別の参加者が中(3)と認識した場合どうするか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;各自の根拠を話し合い、共通の認識をもてるようにする。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-risk-rating-1-9-would-you-assign-to-unproven-or-unknown-technologies-shi-zheng-sareteinaji-shu-yawei-zhi-noji-shu-hadonoyounarisukuping-jia-1-9-wosuruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-risk-rating-1-9-would-you-assign-to-unproven-or-unknown-technologies-shi-zheng-sareteinaji-shu-yawei-zhi-noji-shu-hadonoyounarisukuping-jia-1-9-wosuruka&quot; aria-label=&quot;Anchor link for: what-risk-rating-1-9-would-you-assign-to-unproven-or-unknown-technologies-shi-zheng-sareteinaji-shu-yawei-zhi-noji-shu-hadonoyounarisukuping-jia-1-9-wosuruka&quot;&gt;What risk rating(1-9) would you assign to unproven or unknown technologies?(実証されていな技術や未知の技術はどのようなリスク評価(1-9)をするか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;高リスク(9)と評価する。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chapter-21-diagramming-and-presenting-architecture&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-21-diagramming-and-presenting-architecture&quot; aria-label=&quot;Anchor link for: chapter-21-diagramming-and-presenting-architecture&quot;&gt;Chapter 21. Diagramming and Presenting Architecture&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Architectにとって、architectureの図解とプレゼンテーションは重要なソフトスキルであるとされています。
どちらにも共通するのが全体のtopologyを示したあとにcomponentの詳細の解説にうつるのがよいとしています。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;diagramming-tu-jie&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#diagramming-tu-jie&quot; aria-label=&quot;Anchor link for: diagramming-tu-jie&quot;&gt;Diagramming(図解)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Architectureのtopologyは価値ある共通理解につながるのでdiagram skillは重要。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tool&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tool&quot; aria-label=&quot;Anchor link for: tool&quot;&gt;Tool&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;図解のためのtoolはいろいろあるので特定のtoolを薦めるようなことはない。
とはいいつつ、本書は&lt;a href=&quot;https:&#x2F;&#x2F;www.omnigroup.com&#x2F;omnigraffle&quot;&gt;OmniGraffle&lt;&#x2F;a&gt;で書かれているそうです。
Diagram toolは色々試していたので、omnigraffleを使ってみようと思います。&lt;&#x2F;p&gt;
&lt;p&gt;またtoolには少なくても以下の機能がほしいとしています。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Layer
&lt;ul&gt;
&lt;li&gt;描画アイテムを論理的にグルーピングする。&lt;&#x2F;li&gt;
&lt;li&gt;必要に応じて詳細を隠せる&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Stencil&#x2F;template
&lt;ul&gt;
&lt;li&gt;描画アイテムのテンプレート。マイクロサービスには一貫した形を利用したり等。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Magnets
&lt;ul&gt;
&lt;li&gt;図形の間にひく線。自動で整列したり、接続の仕方を調整する。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;UMLも言及されていますが、クラス図やシーケンス図以外はほとんどつかわれなくなってしまったとされています。
自分は最近はUMLに加えてmermaidを利用したりしています。(Githubでサポートされているのが便利)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;presenting-purezentesiyon&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#presenting-purezentesiyon&quot; aria-label=&quot;Anchor link for: presenting-purezentesiyon&quot;&gt;Presenting(プレゼンテーション)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;PowerPointやKeynoteようなtoolを利用して、プレゼンを行うことも求められているソフトスキルの1つ。
プレゼンの特徴はドキュメントと違い、読み手が情報の展開速度を制御できないことにあるとしています。
ソフトウェアアーキテクチャの基礎という名前の本に、スライドの作り方のコツが載っているとは思いませんでした。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions-20&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-20&quot; aria-label=&quot;Anchor link for: self-assessment-questions-20&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;what-is-irrational-artifact-attachment-and-why-is-it-significant-with-respect-to-documenting-and-diagramming-architecture-bu-he-li-naateihuakutohenozhi-zhao-tohahe-ka-sositenazesoregaakitekutiyanowen-shu-hua-yatu-jie-dezhong-yao-nanoka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-irrational-artifact-attachment-and-why-is-it-significant-with-respect-to-documenting-and-diagramming-architecture-bu-he-li-naateihuakutohenozhi-zhao-tohahe-ka-sositenazesoregaakitekutiyanowen-shu-hua-yatu-jie-dezhong-yao-nanoka&quot; aria-label=&quot;Anchor link for: what-is-irrational-artifact-attachment-and-why-is-it-significant-with-respect-to-documenting-and-diagramming-architecture-bu-he-li-naateihuakutohenozhi-zhao-tohahe-ka-sositenazesoregaakitekutiyanowen-shu-hua-yatu-jie-dezhong-yao-nanoka&quot;&gt;What is irrational artifact attachment, and why is it significant with respect to documenting and diagramming architecture?(不合理なアーティファクトへの執着とは何か、そしてなぜそれがアーキテクチャの文書化や図解で重要なのか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;時間をかけて作った図に過度に執着してしまうこと。
過度な執着はiteration(実験、修正、コラボレーション)を妨げ、真の姿の理解を遅らせるから。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-do-the-4c-s-refer-to-in-the-c4-modeling-technique-c4moderinguji-shu-niokeru4tunochahe-wozhi-siteiruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-do-the-4c-s-refer-to-in-the-c4-modeling-technique-c4moderinguji-shu-niokeru4tunochahe-wozhi-siteiruka&quot; aria-label=&quot;Anchor link for: what-do-the-4c-s-refer-to-in-the-c4-modeling-technique-c4moderinguji-shu-niokeru4tunochahe-wozhi-siteiruka&quot;&gt;What do the 4C&#x27;s refer to in the C4 modeling technique?(C4モデリング技術における4つのCは何を指しているか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;Context, Container, Component, Class&lt;&#x2F;p&gt;
&lt;h6 id=&quot;when-diagramming-architecture-what-do-dotted-lines-between-components-mean-akitekutiyawotu-jie-surutoki-konponentojian-nodian-xian-hahe-woyi-wei-suruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#when-diagramming-architecture-what-do-dotted-lines-between-components-mean-akitekutiyawotu-jie-surutoki-konponentojian-nodian-xian-hahe-woyi-wei-suruka&quot; aria-label=&quot;Anchor link for: when-diagramming-architecture-what-do-dotted-lines-between-components-mean-akitekutiyawotu-jie-surutoki-konponentojian-nodian-xian-hahe-woyi-wei-suruka&quot;&gt;When diagramming architecture, what do dotted lines between components mean?(アーキテクチャを図解するとき、コンポーネント間の点線は何を意味するか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;非同期通信。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-is-the-bullet-riddled-corpse-anti-pattern-how-can-you-avoid-this-anti-pattern-when-creating-presentations-feng-nochao-nisaretasi-ti-antipatantohahe-ka-purezentesiyonwozuo-cheng-suruji-ni-konoantipatanwohui-bi-surunihadousurebayoika&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-bullet-riddled-corpse-anti-pattern-how-can-you-avoid-this-anti-pattern-when-creating-presentations-feng-nochao-nisaretasi-ti-antipatantohahe-ka-purezentesiyonwozuo-cheng-suruji-ni-konoantipatanwohui-bi-surunihadousurebayoika&quot; aria-label=&quot;Anchor link for: what-is-the-bullet-riddled-corpse-anti-pattern-how-can-you-avoid-this-anti-pattern-when-creating-presentations-feng-nochao-nisaretasi-ti-antipatantohahe-ka-purezentesiyonwozuo-cheng-suruji-ni-konoantipatanwohui-bi-surunihadousurebayoika&quot;&gt;What is the bullet-riddled corpse anti-pattern? How can you avoid this anti-pattern when creating presentations?(蜂の巣にされた死体アンチパターンとは何か。プレゼンテーションを作成する際に、このアンチパターンを回避するにはどうすればよいか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;スライドが文字だらけで、それが読み上げられるだけのプレゼン。
情報を段階的に追加していく。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-are-the-two-primary-information-channels-a-presenter-has-when-giving-a-presentation-purezenwosurutokinifa-biao-zhe-gachi-tuteiru2tunozhu-yao-naqing-bao-tiyanneruhahe-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-the-two-primary-information-channels-a-presenter-has-when-giving-a-presentation-purezenwosurutokinifa-biao-zhe-gachi-tuteiru2tunozhu-yao-naqing-bao-tiyanneruhahe-ka&quot; aria-label=&quot;Anchor link for: what-are-the-two-primary-information-channels-a-presenter-has-when-giving-a-presentation-purezenwosurutokinifa-biao-zhe-gachi-tuteiru2tunozhu-yao-naqing-bao-tiyanneruhahe-ka&quot;&gt;What are the two primary information channels a presenter has when giving a presentation?(プレゼンをするときに発表者が持っている2つの主要な情報チャンネルは何か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;言語と視覚。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chapter-22-making-teams-effective&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-22-making-teams-effective&quot; aria-label=&quot;Anchor link for: chapter-22-making-teams-effective&quot;&gt;Chapter 22. Making Teams Effective&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Architectには開発チームの実装をガイドするという責務もある。
当たり前に思われるが、著者たちは開発チームを無視するarchitectを多くみてきた。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;team-boundaries&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#team-boundaries&quot; aria-label=&quot;Anchor link for: team-boundaries&quot;&gt;Team Boundaries&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Architectは開発チームの成否に大きな影響力をもつ。
Architectから取り残されているあるいは疎外されている(feel left out of the loop or estranged)と感じるチームはsystemの制約について正しい理解やガイダンスを得られない。
その結果、architectは正しく実装されない。
これは実感として本当にわかります。知識や情報もarchitectの人のほうが多いと思うのでいい関係を築くことは大切だと思います。&lt;&#x2F;p&gt;
&lt;p&gt;Architectの役割の一つに開発チームにarchitectを実装する際の制約を作り、伝えることがある。
制約がキツすぎると、開発チームの適切なtool, library, practiceへのアクセスを妨げ開発チームのフラストレーションの原因になってしまう。
結果的に、開発者はより幸せで健全な環境を求めてプロジェクトを離れてしまう。&lt;&#x2F;p&gt;
&lt;p&gt;制約がなさすぎても厳しすぎる場合と同じくらい悪い。開発チームが実質的にarchitectの責務を引き受けていることになるので、PoCや設計上の決定を行うことになり、生産性の低下や混乱、フラストレーションにつながる。
これはチームでみれば必ずしもそうとは限らない気もしました、逆に組織ごとの統制がとれない影響を気にしました。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;architect-personalities&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#architect-personalities&quot; aria-label=&quot;Anchor link for: architect-personalities&quot;&gt;Architect Personalities&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Team boundariesで述べられた制約の程度によるarchitectのパーソナリティ分類。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;control-freak&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#control-freak&quot; aria-label=&quot;Anchor link for: control-freak&quot;&gt;Control Freak&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;開発プロセスのあらゆる詳細な側面をコントロールしようとする。決定が細かすぎたり、低レベルだったりする。
Control freakはsteal the art of programming away from the developers(開発者からプログラミング技術を奪う)。
そして結果的にarchitectへの敬意の欠如を開発チームにもたらす。&lt;&#x2F;p&gt;
&lt;p&gt;プロジェクトの複雑さやチームのスキルレベルによってはarchitectがcontrol freakになる必要がある場合がある。
しかし、一般的には開発チームを混乱させ、適切なガイドを提供せず、チームを率いてarchitectureを実装することに関して効果を発揮しない(ineffective at leading the team through the implementation of the architecture)。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;armchair-architect&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#armchair-architect&quot; aria-label=&quot;Anchor link for: armchair-architect&quot;&gt;Armchair Architect&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Armchair architectは長い間codingをしていないタイプのarchitectをいう。
こうしたarchitectは実装の詳細を考慮にいれない。開発チームから切り離されており、開発チームの近くにいないか、初期architecture diagramができると別のプロジェクトに移動してしまう。&lt;&#x2F;p&gt;
&lt;p&gt;開発者の仕事はcodeを書くことで、codeを書いているフリをするのは難しい。
一方でarchitectの仕事はなんだろうか。誰にもはっきりとはわからないので、architectのフリをするのはとても簡単。
armchair architectかどうかのindicatorは以下の3つ。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Not fully understanding the business domain, business problem, or technology used&lt;&#x2F;li&gt;
&lt;li&gt;Not enough hands-on experience developing software(ソフトウェアを実際に開発した経験が十分でない)&lt;&#x2F;li&gt;
&lt;li&gt;Not considering the implications associated with the implementation of the architecture solution(アーキテクチャソリューションの実装に伴う影響を考慮していない)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;意図してarmchair architectになったのではなく、技術やビジネスドメインに疎くなってしまい、たまたまそうなってしまうこともある。プロジェクトで使用されている技術に積極的に関わり、ビジネスドメインを理解することで、こうした罠を回避できる。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;effective-architect&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#effective-architect&quot; aria-label=&quot;Anchor link for: effective-architect&quot;&gt;Effective Architect&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Armchair architectでみたようにまったく管理しないのはアンチパターンなので、何にどの程度の制約を課すかが問題になる。
管理の度合いに影響を与える要素として以下が挙げられている。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Team familiarity(チームの親しさ)
&lt;ul&gt;
&lt;li&gt;メンバーがどの程度お互いのことを知っているか。&lt;&#x2F;li&gt;
&lt;li&gt;すでにお互いのことを知っていれば自己組織化(self-organizing)しはじめるので、コントロールの必要性は低くなる&lt;&#x2F;li&gt;
&lt;li&gt;新しいメンバーであれば、コラボレーションを促進し、内部の派閥を減らすためにコントロールが必要になる。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Team size
&lt;ul&gt;
&lt;li&gt;チームの規模。12人以上は大きいチーム、4人以下は小さなチーム。&lt;&#x2F;li&gt;
&lt;li&gt;チームが大きければより多くのコントロールが必要になる。&lt;&#x2F;li&gt;
&lt;li&gt;チームが小さければコントロールの必要はなくなる。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Overall experience(全体的な経験)
&lt;ul&gt;
&lt;li&gt;シニアメンバーとジュニアメンバーの比率。チームの技術とドメインへの理解度。&lt;&#x2F;li&gt;
&lt;li&gt;ジュニアメンバーが多ければコントロールが必要になってくる。&lt;&#x2F;li&gt;
&lt;li&gt;シニアメンバーが多ければコントロールはあまり必要ない。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Project complexity
&lt;ul&gt;
&lt;li&gt;複雑なプロジェクトでは、より時間を割いて問題への支援が必要になる。&lt;&#x2F;li&gt;
&lt;li&gt;比較的単純なプロジェクトではあまりコントロールを必要としない。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Project duration(プロジェクトの期間)
&lt;ul&gt;
&lt;li&gt;プロジェクトの期間は、短期(2か月)か、長期(2年)か、平均的か(6か月)&lt;&#x2F;li&gt;
&lt;li&gt;長期になればなるほどコントロールが必要。&lt;&#x2F;li&gt;
&lt;li&gt;短期であれば切迫感が共有されているので、コントロールはあまり必要ない。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;適切なチームのサイズを判断するにあたって、注意する点も述べられています。
大事なのは、architectは開発チームをガイドするだけでなく、チームが健康で幸せであり、共通のゴールを達成するために協力しあうことを確保することであるとされています。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;checklist&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#checklist&quot; aria-label=&quot;Anchor link for: checklist&quot;&gt;Checklist&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;CI&#x2F;CD側で行えばいいのかなと思いました。よりフィードバック早くするためにはgit hook等。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;governing-the-layered-stack-ji-shu-sutatukunotong-zhi&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#governing-the-layered-stack-ji-shu-sutatukunotong-zhi&quot; aria-label=&quot;Anchor link for: governing-the-layered-stack-ji-shu-sutatukunotong-zhi&quot;&gt;Governing the layered stack(技術スタックの統制)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;プロジェクトに依存ライブラリを追加する際に、開発者が自由に決められるもの、architectが決めるものをどうやって分類するかについて。ここでは以下の基準が提案されている。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Special purpose(特別な目的のもの)
&lt;ul&gt;
&lt;li&gt;開発者がarchitectの承認なしに決められる。&lt;&#x2F;li&gt;
&lt;li&gt;例 PDF rendering, bar code scanning&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;General purpose(汎用的な目的のもの)
&lt;ul&gt;
&lt;li&gt;architectの承認が必要。&lt;&#x2F;li&gt;
&lt;li&gt;言語のAPIのwrapper的なlibrary。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Framework
&lt;ul&gt;
&lt;li&gt;architectが決定&lt;&#x2F;li&gt;
&lt;li&gt;applicationの構造に関わるようなライブラリ。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ライブラリのこの3分類はとてもいいなと思います。
ただ、別の箇所では、ReactかVueかをarchitectは指定しないほうがいいとありましたが、この基準によるとarchitectがReactをきめるのかなと思いました。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions-21&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-21&quot; aria-label=&quot;Anchor link for: self-assessment-questions-21&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;what-are-three-types-of-architecture-personalities-what-type-of-boundary-does-each-personality-create-akitekutonopasonariteiwo3tuju-geyo-sorezorenopasonariteihadonoyounajing-jie-wozuo-ruka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-three-types-of-architecture-personalities-what-type-of-boundary-does-each-personality-create-akitekutonopasonariteiwo3tuju-geyo-sorezorenopasonariteihadonoyounajing-jie-wozuo-ruka&quot; aria-label=&quot;Anchor link for: what-are-three-types-of-architecture-personalities-what-type-of-boundary-does-each-personality-create-akitekutonopasonariteiwo3tuju-geyo-sorezorenopasonariteihadonoyounajing-jie-wozuo-ruka&quot;&gt;What are three types of architecture personalities? What type of boundary does each personality create?(アーキテクトのパーソナリティを3つ挙げよ。それぞれのパーソナリティはどのような境界を作るか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;Control Freak architect
&lt;ul&gt;
&lt;li&gt;強すぎる制約を作る。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Armchair architect
&lt;ul&gt;
&lt;li&gt;弱すぎる制約を作る。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Effective architect
&lt;ul&gt;
&lt;li&gt;効果的な制約を作る。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;what-are-the-five-factors-that-go-into-determining-the-level-of-control-you-should-exhibit-on-the-team-timunei-defa-hui-subekikontororunoreberuwojue-ding-suru5tunoyao-yin-toha&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-the-five-factors-that-go-into-determining-the-level-of-control-you-should-exhibit-on-the-team-timunei-defa-hui-subekikontororunoreberuwojue-ding-suru5tunoyao-yin-toha&quot; aria-label=&quot;Anchor link for: what-are-the-five-factors-that-go-into-determining-the-level-of-control-you-should-exhibit-on-the-team-timunei-defa-hui-subekikontororunoreberuwojue-ding-suru5tunoyao-yin-toha&quot;&gt;What are the five factors that go into determining the level of control you should exhibit on the team?(チーム内で発揮すべきコントロールのレベルを決定する5つの要因とは)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;Team familiarity(チームの親しさ)&lt;&#x2F;li&gt;
&lt;li&gt;Team size&lt;&#x2F;li&gt;
&lt;li&gt;Overall experience(全体的な経験)&lt;&#x2F;li&gt;
&lt;li&gt;Project complexity&lt;&#x2F;li&gt;
&lt;li&gt;Project duration(プロジェクトの期間)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;what-are-three-warning-signs-you-can-look-at-to-determine-if-your-team-is-getting-too-big-timugada-kikunarisugiteirukawopan-duan-surutameno3tunojing-gao-saintoha&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-three-warning-signs-you-can-look-at-to-determine-if-your-team-is-getting-too-big-timugada-kikunarisugiteirukawopan-duan-surutameno3tunojing-gao-saintoha&quot; aria-label=&quot;Anchor link for: what-are-three-warning-signs-you-can-look-at-to-determine-if-your-team-is-getting-too-big-timugada-kikunarisugiteirukawopan-duan-surutameno3tunojing-gao-saintoha&quot;&gt;What are three warning signs you can look at to determine if your team is getting too big?(チームが大きくなりすぎているかを判断するための3つの警告サインとは)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;Process loss
&lt;ul&gt;
&lt;li&gt;conflictが頻発。作業の並列性が作れていない。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Pluralistic ignorance(多言的無知)
&lt;ul&gt;
&lt;li&gt;心理的安全性の問題かも&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Diffusion of responsibility(責任の分散)
&lt;ul&gt;
&lt;li&gt;困っている人が放置される&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;list-three-basic-checklists-that-would-be-good-for-a-development-team-kai-fa-timunitotuteliang-iji-ben-de-natietukurisutowo3tuju-geyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#list-three-basic-checklists-that-would-be-good-for-a-development-team-kai-fa-timunitotuteliang-iji-ben-de-natietukurisutowo3tuju-geyo&quot; aria-label=&quot;Anchor link for: list-three-basic-checklists-that-would-be-good-for-a-development-team-kai-fa-timunitotuteliang-iji-ben-de-natietukurisutowo3tuju-geyo&quot;&gt;List three basic checklists that would be good for a development team(開発チームにとって良い基本的なチェックリストを3つ挙げよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;developer code completion checklist&lt;&#x2F;li&gt;
&lt;li&gt;unit and functional testing checklist&lt;&#x2F;li&gt;
&lt;li&gt;software release checklist&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;chapter-23-negotiation-and-leadership-skills&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-23-negotiation-and-leadership-skills&quot; aria-label=&quot;Anchor link for: chapter-23-negotiation-and-leadership-skills&quot;&gt;Chapter 23. Negotiation and Leadership Skills&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Chapter 1のarchitectに期待されることの最後にUnderstand and navigate politicsがある。
なぜ政治と交渉が必要になるのか。それは、architectが下すほぼ全ての決断はchallengeされるから。
まず、architectよりも知識があると考えている開発者にchallengeされる。他のarchitectからもされるし、stakeholdersからも費用が高すぎたり、時間がかかりすぎるといった理由で対立する。&lt;&#x2F;p&gt;
&lt;p&gt;可用性に関する具体例の話で、99.9%のダウンタイムはどれくらいかという話題がでてくるのですが、昔(2018)にGoでCLI作ったのを思い出しました。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;go&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; install github.com&#x2F;ymgyt&#x2F;sla99@latest&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; GOにbinaryが$PATHにある前提&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;sla99&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;rate&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;     hour      minute      second&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;99.00000&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 87.600000 5256.000000 315360.000000&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;99.90000&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 8.760000  525.600000  31536.000000&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;99.99000&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 0.876000  52.560000   3153.600000&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;99.99900&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 0.087600  5.256000    315.360000&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;99.99990&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 0.008760  0.525600    31.536000&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;99.99999&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 0.000876  0.052560    3.153600&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;議論の際に、当該論点だけでなくその後の関係においても、不健全で非協力的にならないためのアドバイスがのっており、実践的でした。議論になったら実証したり、正当な根拠を示すようにしようという言われれば当たり前だがなかなか難しいことだと思うので立場に関わらず意識していきたいです。開発者が決定に同意しない場合、開発者自身に解決策を見つけてもらうという考え方も好きです。&lt;&#x2F;p&gt;
&lt;p&gt;また、&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;First, notice the use of the words “you must.” This type of commanding voice is not only demeaning, but is one of the worst ways to begin a negotiation or conversation.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Richards, Mark; Ford, Neal. Fundamentals of Software Architecture . O&#x27;Reilly Media. Kindle Edition.&lt;&#x2F;p&gt;
&lt;p&gt;まさかソフトウェアアーキテクチャの基礎という本に、話し方の注意までのっていると思いませんでした。
言い方は本当に大切だと思います。
肩書きではなくて、手本で人を動かす等、もしかしたらこの章が一番大事なことをいっているかもしれません。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions-22&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-22&quot; aria-label=&quot;Anchor link for: self-assessment-questions-22&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;why-is-negotiation-so-important-as-an-architect-akitekutotositejiao-she-gazhong-yao-nali-you-ha&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-is-negotiation-so-important-as-an-architect-akitekutotositejiao-she-gazhong-yao-nali-you-ha&quot; aria-label=&quot;Anchor link for: why-is-negotiation-so-important-as-an-architect-akitekutotositejiao-she-gazhong-yao-nali-you-ha&quot;&gt;Why is negotiation so important as an architect?(アーキテクトとして交渉が重要な理由は)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;全ての決定に対して手強い人たちからchallengeされるから。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;name-some-negotiation-techniques-when-a-business-stakeholder-insists-on-five-nines-of-availability-but-only-three-nines-are-really-needed-bizinesusutekuhorudagahuairunainnoke-yong-xing-wozhu-zhang-siteirugaben-dang-nibi-yao-nanohasurinaindakenochang-he-nojiao-she-shu-woikutukaju-geyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#name-some-negotiation-techniques-when-a-business-stakeholder-insists-on-five-nines-of-availability-but-only-three-nines-are-really-needed-bizinesusutekuhorudagahuairunainnoke-yong-xing-wozhu-zhang-siteirugaben-dang-nibi-yao-nanohasurinaindakenochang-he-nojiao-she-shu-woikutukaju-geyo&quot; aria-label=&quot;Anchor link for: name-some-negotiation-techniques-when-a-business-stakeholder-insists-on-five-nines-of-availability-but-only-three-nines-are-really-needed-bizinesusutekuhorudagahuairunainnoke-yong-xing-wozhu-zhang-siteirugaben-dang-nibi-yao-nanohasurinaindakenochang-he-nojiao-she-shu-woikutukaju-geyo&quot;&gt;Name some negotiation techniques when a business stakeholder insists on five nines of availability, but only three nines are really needed.(ビジネスステークホルダーがファイルナインの可用性を主張しているが本当に必要なのはスリーナインだけの場合の交渉術をいくつか挙げよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;ファイブナインの具体的なダウンタイムを明示する。&lt;&#x2F;li&gt;
&lt;li&gt;コストがかかりすぎることを主張する。&lt;&#x2F;li&gt;
&lt;li&gt;ファイブナインの適用範囲を限定する。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;what-can-you-derive-from-a-business-stakeholder-telling-you-i-needed-it-yesterday-bizinesusutekuhorudano-sorehazuo-ri-bi-yao-datuta-toiufa-yan-karadao-kichu-serunohahe-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-can-you-derive-from-a-business-stakeholder-telling-you-i-needed-it-yesterday-bizinesusutekuhorudano-sorehazuo-ri-bi-yao-datuta-toiufa-yan-karadao-kichu-serunohahe-ka&quot; aria-label=&quot;Anchor link for: what-can-you-derive-from-a-business-stakeholder-telling-you-i-needed-it-yesterday-bizinesusutekuhorudano-sorehazuo-ri-bi-yao-datuta-toiufa-yan-karadao-kichu-serunohahe-ka&quot;&gt;What can you derive from a business stakeholder telling you &quot;I needed it yesterday&quot;?(ビジネスステークホルダーの&quot;それは昨日必要だった&quot;という発言から導き出せるのは何か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;市場投入までの時間を重視していること。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;why-is-it-important-to-save-a-discussion-about-time-and-cost-for-last-in-negotiation-shi-jian-yakosutonoyi-lun-wojiao-she-nozui-hou-madequ-tuteokukotogazhong-yao-nanohanazeka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-is-it-important-to-save-a-discussion-about-time-and-cost-for-last-in-negotiation-shi-jian-yakosutonoyi-lun-wojiao-she-nozui-hou-madequ-tuteokukotogazhong-yao-nanohanazeka&quot; aria-label=&quot;Anchor link for: why-is-it-important-to-save-a-discussion-about-time-and-cost-for-last-in-negotiation-shi-jian-yakosutonoyi-lun-wojiao-she-nozui-hou-madequ-tuteokukotogazhong-yao-nanohanazeka&quot;&gt;Why is it important to save a discussion about time and cost for last in negotiation?(時間やコストの議論を交渉の最後まで取っておくことが重要なのはなぜか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;もっと重要な正当性や合理性を議論したほうが結果的に物事が進むことが経験則的にわかっているから。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-is-the-divide-and-conquer-rule-how-can-it-be-applied-when-negotiating-architecture-characteristics-with-a-business-stakeholder-provide-an-example-fen-ge-tong-zhi-rurutohahe-ka-akitekutiyate-xing-wobizinesusutekuhorudatojiao-she-suruji-nifen-ge-tong-zhi-ruruhadoushi-yong-dekiruka-li-woju-geteshi-se&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-divide-and-conquer-rule-how-can-it-be-applied-when-negotiating-architecture-characteristics-with-a-business-stakeholder-provide-an-example-fen-ge-tong-zhi-rurutohahe-ka-akitekutiyate-xing-wobizinesusutekuhorudatojiao-she-suruji-nifen-ge-tong-zhi-ruruhadoushi-yong-dekiruka-li-woju-geteshi-se&quot; aria-label=&quot;Anchor link for: what-is-the-divide-and-conquer-rule-how-can-it-be-applied-when-negotiating-architecture-characteristics-with-a-business-stakeholder-provide-an-example-fen-ge-tong-zhi-rurutohahe-ka-akitekutiyate-xing-wobizinesusutekuhorudatojiao-she-suruji-nifen-ge-tong-zhi-ruruhadoushi-yong-dekiruka-li-woju-geteshi-se&quot;&gt;What is the divide-and-conquer rule? How can it be applied when negotiating architecture characteristics with a business stakeholder? Provide an example.(分割統治ルールとは何か。アーキテクチャ特性をビジネスステークホルダーと交渉する際に分割統治ルールはどう適用できるか、例を挙げて示せ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;問題をより小さい単位に分解して対処すること。business stakeholderが主張するarchitecture characteristicsの適用範囲を限定して議論を進める。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;list-the-4c-s-of-architecture-akitekutiyano4tunocwoju-geyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#list-the-4c-s-of-architecture-akitekutiyano4tunocwoju-geyo&quot; aria-label=&quot;Anchor link for: list-the-4c-s-of-architecture-akitekutiyano4tunocwoju-geyo&quot;&gt;List the 4C&#x27;s of architecture.(アーキテクチャの4つのCを挙げよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;Communication&lt;&#x2F;li&gt;
&lt;li&gt;Conciseness&lt;&#x2F;li&gt;
&lt;li&gt;Collaboration&lt;&#x2F;li&gt;
&lt;li&gt;Clarity&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;explain-why-it-is-important-for-an-architect-to-be-both-pragmatic-and-visionary-puragumateitukudearukototobiziyonaridearukotogaakitekutonitotutezhong-yao-dearuli-you-woshuo-ming-seyo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#explain-why-it-is-important-for-an-architect-to-be-both-pragmatic-and-visionary-puragumateitukudearukototobiziyonaridearukotogaakitekutonitotutezhong-yao-dearuli-you-woshuo-ming-seyo&quot; aria-label=&quot;Anchor link for: explain-why-it-is-important-for-an-architect-to-be-both-pragmatic-and-visionary-puragumateitukudearukototobiziyonaridearukotogaakitekutonitotutezhong-yao-dearuli-you-woshuo-ming-seyo&quot;&gt;Explain why it is important for an architect to be both pragmatic and visionary.(プラグマティックであることとビジョナリーであることがアーキテクトにとって重要である理由を説明せよ)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;Architectとして敬意をえることができるから。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-are-some-techniques-for-managing-and-reducing-the-number-of-meetings-you-are-invited-to-ke-seraretamiteingushu-woguan-li-site-jian-rasutamenotekunitukutohahe-ka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-some-techniques-for-managing-and-reducing-the-number-of-meetings-you-are-invited-to-ke-seraretamiteingushu-woguan-li-site-jian-rasutamenotekunitukutohahe-ka&quot; aria-label=&quot;Anchor link for: what-are-some-techniques-for-managing-and-reducing-the-number-of-meetings-you-are-invited-to-ke-seraretamiteingushu-woguan-li-site-jian-rasutamenotekunitukutohahe-ka&quot;&gt;What are some techniques for managing and reducing the number of meetings you are invited to?(課せられたミーティング数を管理して、減らすためのテクニックとは何か)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;Agendaを事前に確認して、自分がでなくてもよいものにはでない。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chapter-24-developing-a-career-path&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-24-developing-a-career-path&quot; aria-label=&quot;Anchor link for: chapter-24-developing-a-career-path&quot;&gt;Chapter 24. Developing a Career Path&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;学び続ける必要があることは、おおくの職種で共通していることだと思いますが、この職種の特殊性として知識の陳腐化が早い点があると思っています。(そのうちKubernetesを誰も使わなくなる日が来るのでしょうか)
そんな中で日々どうやって変化にキャッチアップしていくかについて述べられています。&lt;&#x2F;p&gt;
&lt;p&gt;technologyをtool, language&amp;amp;frameworks, techniques, platformに分類して、さらにそれらをhold, trial, adopt等に評価してどれくらいcommitするかを判断する手法はとても参考になりました。
本書を通して、architecture characteristicsであったり、risk categoryであったり、曖昧で多様なものをどうにか分類して体系化しようとする態度が自分にはとても欠けていると思わされます。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-assessment-questions-23&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-assessment-questions-23&quot; aria-label=&quot;Anchor link for: self-assessment-questions-23&quot;&gt;Self-Assessment Questions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h6 id=&quot;what-is-the-20-minute-rule-and-when-is-it-best-to-apply-it-20fen-rurutohahe-ka-itushi-yong-surunogabesutoka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-the-20-minute-rule-and-when-is-it-best-to-apply-it-20fen-rurutohahe-ka-itushi-yong-surunogabesutoka&quot; aria-label=&quot;Anchor link for: what-is-the-20-minute-rule-and-when-is-it-best-to-apply-it-20fen-rurutohahe-ka-itushi-yong-surunogabesutoka&quot;&gt;What is the 20-minute rule, and when is it best to apply it?(20分ルールとは何か。いつ適用するのがベストか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;学ぶ時間に一日に20分は費やすルール。一日の始まりに設けるとよい。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;what-are-the-four-rings-in-the-thought-works-technology-radar-and-what-do-they-mean-how-can-they-be-applied-to-your-radar-thoughtworkstekunoroziredano4tunoringutohahe-ka-mata-sorehadonoyounianatanoredanishi-yong-dekirunoka&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-the-four-rings-in-the-thought-works-technology-radar-and-what-do-they-mean-how-can-they-be-applied-to-your-radar-thoughtworkstekunoroziredano4tunoringutohahe-ka-mata-sorehadonoyounianatanoredanishi-yong-dekirunoka&quot; aria-label=&quot;Anchor link for: what-are-the-four-rings-in-the-thought-works-technology-radar-and-what-do-they-mean-how-can-they-be-applied-to-your-radar-thoughtworkstekunoroziredano4tunoringutohahe-ka-mata-sorehadonoyounianatanoredanishi-yong-dekirunoka&quot;&gt;What are the four rings in the Thought-Works technology radar, and what do they mean? How can they be applied to your radar?(ThoughtWorksテクノロジーレーダーの4つのリングとは何か。また、それはどのようにあなたのレーダーに適用できるのか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;tool, language&amp;amp;frameworks, techniques, platformの分類とcommitの度合い。
自身の技術ポートフォリオに関して、commitする対象の判断に利用できる。&lt;&#x2F;p&gt;
&lt;h6 id=&quot;describe-the-difference-between-depth-and-breadth-of-knowledge-as-it-applies-to-software-architects-which-should-architects-aspire-to-maximize-sohutoueaakitekutonitotutenozhi-shi-noshen-satoguang-sanowei-iwoshuo-ming-seyo-akitekutohadotirawozhong-shi-subekika&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#describe-the-difference-between-depth-and-breadth-of-knowledge-as-it-applies-to-software-architects-which-should-architects-aspire-to-maximize-sohutoueaakitekutonitotutenozhi-shi-noshen-satoguang-sanowei-iwoshuo-ming-seyo-akitekutohadotirawozhong-shi-subekika&quot; aria-label=&quot;Anchor link for: describe-the-difference-between-depth-and-breadth-of-knowledge-as-it-applies-to-software-architects-which-should-architects-aspire-to-maximize-sohutoueaakitekutonitotutenozhi-shi-noshen-satoguang-sanowei-iwoshuo-ming-seyo-akitekutohadotirawozhong-shi-subekika&quot;&gt;Describe the difference between depth and breadth of knowledge as it applies to software architects. Which should architects aspire to maximize?(ソフトウェアアーキテクトにとっての知識の深さと広さの違いを説明せよ。アーキテクトはどちらを重視すべきか)&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;深さは特定の技術的topicの原理や詳細、実装を理解していること。広さはこの技術的topicの数。
広さを重視すべし。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xue-ndakoto&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#xue-ndakoto&quot; aria-label=&quot;Anchor link for: xue-ndakoto&quot;&gt;学んだこと&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Everything is a trade-off&lt;&#x2F;li&gt;
&lt;li&gt;Architecture characteristicは計測可能な程度にまで具体的に定義すること。定義の合意の範囲は組織内でよい。&lt;&#x2F;li&gt;
&lt;li&gt;Architecture characteristicsはシステム全体で一律でなく、適用スコープがある。スコープを定めるにあたってはDDDの境界づけられたコンテキストや、機能的凝集性+依存データストア+同期呼び出しが出発点になる。&lt;&#x2F;li&gt;
&lt;li&gt;適切なコンポーネントの粒度の発見はイテレーティブなアプローチによって見つけていく&lt;&#x2F;li&gt;
&lt;li&gt;Transaction boundaries is one of the common indicators of service granularity.&lt;&#x2F;li&gt;
&lt;li&gt;Architect関連の決定は根拠を明示して、ADRでドキュメント化&lt;&#x2F;li&gt;
&lt;li&gt;Architecture全体のリスク評価をチームで行い、共通認識をもつ。対応の優先度を定量的に決める。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    
    
    
    
</feed>
